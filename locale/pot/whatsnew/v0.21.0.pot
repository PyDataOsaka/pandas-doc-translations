# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/whatsnew/v0.21.0.rst:4
msgid "Version 0.21.0 (October 27, 2017)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:6
msgid "{{ header }}"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:14
msgid "This is a major release from 0.20.3 and includes a number of API changes, deprecations, new features, enhancements, and performance improvements along with a large number of bug fixes. We recommend that all users upgrade to this version."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:18
msgid "Highlights include:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:20
msgid "Integration with `Apache Parquet <https://parquet.apache.org/>`__, including a new top-level :func:`read_parquet` function and :meth:`DataFrame.to_parquet` method, see :ref:`here <whatsnew_0210.enhancements.parquet>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:21
msgid "New user-facing :class:`pandas.api.types.CategoricalDtype` for specifying categoricals independent of the data, see :ref:`here <whatsnew_0210.enhancements.categorical_dtype>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:23
msgid "The behavior of ``sum`` and ``prod`` on all-NaN Series/DataFrames is now consistent and no longer depends on whether `bottleneck <https://bottleneck.readthedocs.io>`__ is installed, and ``sum`` and ``prod`` on empty Series now return NaN instead of 0, see :ref:`here <whatsnew_0210.api_breaking.bottleneck>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:24
msgid "Compatibility fixes for pypy, see :ref:`here <whatsnew_0210.pypy>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:25
msgid "Additions to the ``drop``, ``reindex`` and ``rename`` API to make them more consistent, see :ref:`here <whatsnew_0210.enhancements.drop_api>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:26
msgid "Addition of the new methods ``DataFrame.infer_objects`` (see :ref:`here <whatsnew_0210.enhancements.infer_objects>`) and ``GroupBy.pipe`` (see :ref:`here <whatsnew_0210.enhancements.GroupBy_pipe>`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:27
msgid "Indexing with a list of labels, where one or more of the labels is missing, is deprecated and will raise a KeyError in a future version, see :ref:`here <whatsnew_0210.api_breaking.loc>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:29
msgid "Check the :ref:`API Changes <whatsnew_0210.api_breaking>` and :ref:`deprecations <whatsnew_0210.deprecations>` before updating."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:34
msgid "What's new in v0.21.0"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:39
msgid "New features"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:44
msgid "Integration with Apache Parquet file format"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:46
msgid "Integration with `Apache Parquet <https://parquet.apache.org/>`__, including a new top-level :func:`read_parquet` and :func:`DataFrame.to_parquet` method, see :ref:`here <io.parquet>` (:issue:`15838`, :issue:`17438`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:48
msgid "`Apache Parquet <https://parquet.apache.org/>`__ provides a cross-language, binary file format for reading and writing data frames efficiently. Parquet is designed to faithfully serialize and de-serialize ``DataFrame`` s, supporting all of the pandas dtypes, including extension dtypes such as datetime with timezones."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:52
msgid "This functionality depends on either the `pyarrow <http://arrow.apache.org/docs/python/>`__ or `fastparquet <https://fastparquet.readthedocs.io/en/latest/>`__ library. For more details, see :ref:`the IO docs on Parquet <io.parquet>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:59
msgid "Method ``infer_objects`` type conversion"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:61
msgid "The :meth:`DataFrame.infer_objects` and :meth:`Series.infer_objects` methods have been added to perform dtype inference on object columns, replacing some of the functionality of the deprecated ``convert_objects`` method. See the documentation :ref:`here <basics.object_conversion>` for more details. (:issue:`11221`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:67
msgid "This method only performs soft conversions on object columns, converting Python objects to native types, but not any coercive conversions. For example:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:78
msgid "Note that column ``'C'`` was not converted - only scalar numeric types will be converted to a new type.  Other types of conversion should be accomplished using the :func:`to_numeric` function (or :func:`to_datetime`, :func:`to_timedelta`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:91
msgid "Improved warnings when attempting to create columns"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:93
msgid "New users are often puzzled by the relationship between column operations and attribute access on ``DataFrame`` instances (:issue:`7175`). One specific instance of this confusion is attempting to create a new column by setting an attribute on the ``DataFrame``:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:103
msgid "This does not raise any obvious exceptions, but also does not create a new column:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:114
msgid "Setting a list-like data structure into a new attribute now raises a ``UserWarning`` about the potential for unexpected behavior. See :ref:`Attribute Access <indexing.attribute_access>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:119
msgid "Method ``drop`` now also accepts index/columns keywords"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:121
msgid "The :meth:`~DataFrame.drop` method has gained ``index``/``columns`` keywords as an alternative to specifying the ``axis``. This is similar to the behavior of ``reindex`` (:issue:`12392`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:125
msgid "For example:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:139
msgid "Methods ``rename``, ``reindex`` now also accept axis keyword"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:141
msgid "The :meth:`DataFrame.rename` and :meth:`DataFrame.reindex` methods have gained the ``axis`` keyword to specify the axis to target with the operation (:issue:`12392`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:145
msgid "Here's ``rename``:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:153
msgid "And ``reindex``:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:160
msgid "The \"index, columns\" style continues to work as before."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:167
msgid "We *highly* encourage using named arguments to avoid confusion when using either style."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:173
msgid "``CategoricalDtype`` for specifying categoricals"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:175
msgid ":class:`pandas.api.types.CategoricalDtype` has been added to the public API and expanded to include the ``categories`` and ``ordered`` attributes. A ``CategoricalDtype`` can be used to specify the set of categories and orderedness of an array, independent of the data. This can be useful for example, when converting string data to a ``Categorical`` (:issue:`14711`, :issue:`15078`, :issue:`16015`, :issue:`17643`):"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:190
msgid "One place that deserves special mention is in :meth:`read_csv`. Previously, with ``dtype={'col': 'category'}``, the returned values and categories would always be strings."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:204
msgid "Notice the \"object\" dtype."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:206
msgid "With a ``CategoricalDtype`` of all numerics, datetimes, or timedeltas, we can automatically convert to the correct type"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:214
msgid "The values have been correctly interpreted as integers."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:216
msgid "The ``.dtype`` property of a ``Categorical``, ``CategoricalIndex`` or a ``Series`` with categorical type will now return an instance of ``CategoricalDtype``. While the repr has changed, ``str(CategoricalDtype())`` is still the string ``'category'``. We'll take this moment to remind users that the *preferred* way to detect categorical data is to use :func:`pandas.api.types.is_categorical_dtype`, and not ``str(dtype) == 'category'``."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:223
msgid "See the :ref:`CategoricalDtype docs <categorical.categoricaldtype>` for more."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:228
msgid "``GroupBy`` objects now have a ``pipe`` method"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:230
msgid "``GroupBy`` objects now have a ``pipe`` method, similar to the one on ``DataFrame`` and ``Series``, that allow for functions that take a ``GroupBy`` to be composed in a clean, readable syntax. (:issue:`17871`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:234
msgid "For a concrete example on combining ``.groupby`` and ``.pipe`` , imagine having a DataFrame with columns for stores, products, revenue and sold quantity. We'd like to do a groupwise calculation of *prices* (i.e. revenue/quantity) per store and per product. We could do this in a multi-step operation, but expressing it in terms of piping can make the code more readable."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:240
msgid "First we set the data:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:255
msgid "Now, to find prices per store/product, we can simply do:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:263
msgid "See the :ref:`documentation <groupby.pipe>` for more."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:269
msgid "``Categorical.rename_categories`` accepts a dict-like"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:271
msgid ":meth:`~Series.cat.rename_categories` now accepts a dict-like argument for ``new_categories``. The previous categories are looked up in the dictionary's keys and replaced if found. The behavior of missing and extra keys is the same as in :meth:`DataFrame.rename`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:283
msgid "To assist with upgrading pandas, ``rename_categories`` treats ``Series`` as list-like. Typically, Series are considered to be dict-like (e.g. in ``.rename``, ``.map``). In a future version of pandas ``rename_categories`` will change to treat them as dict-like. Follow the warning message's recommendations for writing future-proof code."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:304
msgid "Other enhancements"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:307
msgid "New functions or methods"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:309
msgid ":meth:`~pandas.core.resample.Resampler.nearest` is added to support nearest-neighbor upsampling (:issue:`17496`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:310
msgid ":class:`~pandas.Index` has added support for a ``to_frame`` method (:issue:`15230`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:313
msgid "New keywords"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:315
msgid "Added a ``skipna`` parameter to :func:`~pandas.api.types.infer_dtype` to support type inference in the presence of missing values (:issue:`17059`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:317
msgid ":func:`Series.to_dict` and :func:`DataFrame.to_dict` now support an ``into`` keyword which allows you to specify the ``collections.Mapping`` subclass that you would like returned.  The default is ``dict``, which is backwards compatible. (:issue:`16122`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:318
msgid ":func:`Series.set_axis` and :func:`DataFrame.set_axis` now support the ``inplace`` parameter. (:issue:`14636`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:319
msgid ":func:`Series.to_pickle` and :func:`DataFrame.to_pickle` have gained a ``protocol`` parameter (:issue:`16252`). By default, this parameter is set to `HIGHEST_PROTOCOL <https://docs.python.org/3/library/pickle.html#data-stream-format>`__"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:320
msgid ":func:`read_feather` has gained the ``nthreads`` parameter for multi-threaded operations (:issue:`16359`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:321
msgid ":func:`DataFrame.clip()` and :func:`Series.clip()` have gained an ``inplace`` argument. (:issue:`15388`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:322
msgid ":func:`crosstab` has gained a ``margins_name`` parameter to define the name of the row / column that will contain the totals when ``margins=True``. (:issue:`15972`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:323
msgid ":func:`read_json` now accepts a ``chunksize`` parameter that can be used when ``lines=True``. If ``chunksize`` is passed, read_json now returns an iterator which reads in ``chunksize`` lines with each iteration. (:issue:`17048`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:324
msgid ":func:`read_json` and :func:`~DataFrame.to_json` now accept a ``compression`` argument which allows them to transparently handle compressed files. (:issue:`17798`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:327
msgid "Various enhancements"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:329
msgid "Improved the import time of pandas by about 2.25x.  (:issue:`16764`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:330
msgid "Support for `PEP 519 -- Adding a file system path protocol <https://www.python.org/dev/peps/pep-0519/>`_ on most readers (e.g. :func:`read_csv`) and writers (e.g. :meth:`DataFrame.to_csv`) (:issue:`13823`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:333
msgid "Added a ``__fspath__`` method to ``pd.HDFStore``, ``pd.ExcelFile``, and ``pd.ExcelWriter`` to work properly with the file system path protocol (:issue:`13823`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:335
msgid "The ``validate`` argument for :func:`merge` now checks whether a merge is one-to-one, one-to-many, many-to-one, or many-to-many. If a merge is found to not be an example of specified merge type, an exception of type ``MergeError`` will be raised. For more, see :ref:`here <merging.validation>` (:issue:`16270`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:336
msgid "Added support for `PEP 518 <https://www.python.org/dev/peps/pep-0518/>`_ (``pyproject.toml``) to the build system (:issue:`16745`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:337
msgid ":func:`RangeIndex.append` now returns a ``RangeIndex`` object when possible (:issue:`16212`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:338
msgid ":func:`Series.rename_axis` and :func:`DataFrame.rename_axis` with ``inplace=True`` now return ``None`` while renaming the axis inplace. (:issue:`15704`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:339
msgid ":func:`api.types.infer_dtype` now infers decimals. (:issue:`15690`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:340
msgid ":func:`DataFrame.select_dtypes` now accepts scalar values for include/exclude as well as list-like. (:issue:`16855`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:341
msgid ":func:`date_range` now accepts 'YS' in addition to 'AS' as an alias for start of year. (:issue:`9313`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:342
msgid ":func:`date_range` now accepts 'Y' in addition to 'A' as an alias for end of year. (:issue:`9313`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:343
msgid ":func:`DataFrame.add_prefix` and :func:`DataFrame.add_suffix` now accept strings containing the '%' character. (:issue:`17151`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:344
msgid "Read/write methods that infer compression (:func:`read_csv`, :func:`read_table`, :func:`read_pickle`, and :meth:`~DataFrame.to_pickle`) can now infer from path-like objects, such as ``pathlib.Path``. (:issue:`17206`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:345
msgid ":func:`read_sas` now recognizes much more of the most frequently used date (datetime) formats in SAS7BDAT files. (:issue:`15871`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:346
msgid ":func:`DataFrame.items` and :func:`Series.items` are now present in both Python 2 and 3 and is lazy in all cases. (:issue:`13918`, :issue:`17213`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:347
msgid ":meth:`pandas.io.formats.style.Styler.where` has been implemented as a convenience for :meth:`pandas.io.formats.style.Styler.applymap`. (:issue:`17474`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:348
msgid ":func:`MultiIndex.is_monotonic_decreasing` has been implemented.  Previously returned ``False`` in all cases. (:issue:`16554`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:349
msgid ":func:`read_excel` raises ``ImportError`` with a better message if ``xlrd`` is not installed. (:issue:`17613`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:350
msgid ":meth:`DataFrame.assign` will preserve the original order of ``**kwargs`` for Python 3.6+ users instead of sorting the column names. (:issue:`14207`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:351
msgid ":func:`Series.reindex`, :func:`DataFrame.reindex`, :func:`Index.get_indexer` now support list-like argument for ``tolerance``. (:issue:`17367`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:356
msgid "Backwards incompatible API changes"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:361
msgid "Dependencies have increased minimum versions"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:363
msgid "We have updated our minimum supported versions of dependencies (:issue:`15206`, :issue:`15543`, :issue:`15214`). If installed, we now require:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:367
msgid "Package"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:367
msgid "Minimum Version"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:367
msgid "Required"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:369
msgid "Numpy"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:369
msgid "1.9.0"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:369
msgid "X"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:371
msgid "Matplotlib"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:371
msgid "1.4.3"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:373
msgid "Scipy"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:373
msgid "0.14.0"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:375
msgid "Bottleneck"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:375
msgid "1.0.0"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:378
msgid "Additionally, support has been dropped for Python 3.4 (:issue:`15251`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:384
msgid "Sum/prod of all-NaN or empty Series/DataFrames is now consistently NaN"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:388
msgid "The changes described here have been partially reverted. See the :ref:`v0.22.0 Whatsnew <whatsnew_0220>` for more."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:392
msgid "The behavior of ``sum`` and ``prod`` on all-NaN Series/DataFrames no longer depends on whether `bottleneck <https://bottleneck.readthedocs.io>`__ is installed, and return value of ``sum`` and ``prod`` on an empty Series has changed (:issue:`9422`, :issue:`15507`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:395
msgid "Calling ``sum`` or ``prod`` on an empty or all-``NaN`` ``Series``, or columns of a ``DataFrame``, will result in ``NaN``. See the :ref:`docs <missing_data.numeric_sum>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:401
msgid "Previously WITHOUT ``bottleneck`` installed:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:408
msgid "Previously WITH ``bottleneck``:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:415
msgid "New behavior, without regard to the bottleneck installation:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:421
msgid "Note that this also changes the sum of an empty ``Series``. Previously this always returned 0 regardless of a ``bottleneck`` installation:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:428
msgid "but for consistency with the all-NaN case, this was changed to return 0 as well:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:438
msgid "Indexing with a list with missing labels is deprecated"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:440
msgid "Previously, selecting with a list of labels, where one or more labels were missing would always succeed, returning ``NaN`` for missing labels. This will now show a ``FutureWarning``. In the future this will raise a ``KeyError`` (:issue:`15747`). This warning will trigger on a ``DataFrame`` or a ``Series`` for using ``.loc[]``  or ``[[]]`` when passing a list-of-labels with at least 1 missing label."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:450
#: ../../source/whatsnew/v0.21.0.rst:831
msgid "Previous behavior"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:462
#: ../../source/whatsnew/v0.21.0.rst:580
#: ../../source/whatsnew/v0.21.0.rst:602
msgid "Current behavior"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:479
msgid "The idiomatic way to achieve selecting potentially not-found elements is via ``.reindex()``"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:485
msgid "Selection with all keys found is unchanged."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:495
msgid "NA naming changes"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:497
msgid "In order to promote more consistency among the pandas API, we have added additional top-level functions :func:`isna` and :func:`notna` that are aliases for :func:`isnull` and :func:`notnull`. The naming scheme is now more consistent with methods like ``.dropna()`` and ``.fillna()``. Furthermore in all cases where ``.isnull()`` and ``.notnull()`` methods are defined, these have additional methods named ``.isna()`` and ``.notna()``, these are included for classes ``Categorical``, ``Index``, ``Series``, and ``DataFrame``. (:issue:`15001`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:504
msgid "The configuration option ``pd.options.mode.use_inf_as_null`` is deprecated, and ``pd.options.mode.use_inf_as_na`` is added as a replacement."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:510
msgid "Iteration of Series/Index will now return Python scalars"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:512
msgid "Previously, when using certain iteration methods for a ``Series`` with dtype ``int`` or ``float``, you would receive a ``numpy`` scalar, e.g. a ``np.int64``, rather than a Python ``int``. Issue (:issue:`10904`) corrected this for ``Series.tolist()`` and ``list(Series)``. This change makes all iteration methods consistent, in particular, for ``__iter__()`` and ``.map()``; note that this only affects int/float dtypes. (:issue:`13236`, :issue:`13258`, :issue:`14216`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:519
#: ../../source/whatsnew/v0.21.0.rst:539
msgid "Previously:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:526
#: ../../source/whatsnew/v0.21.0.rst:546
#: ../../source/whatsnew/v0.21.0.rst:636
#: ../../source/whatsnew/v0.21.0.rst:672
#: ../../source/whatsnew/v0.21.0.rst:876
#: ../../source/whatsnew/v0.21.0.rst:901
msgid "New behavior:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:532
msgid "Furthermore this will now correctly box the results of iteration for :func:`DataFrame.to_dict` as well."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:556
msgid "Indexing with a Boolean Index"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:558
msgid "Previously when passing a boolean ``Index`` to ``.loc``, if the index of the ``Series/DataFrame`` had ``boolean`` labels, you would get a label based selection, potentially duplicating result labels, rather than a boolean indexing selection (where ``True`` selects elements), this was inconsistent how a boolean numpy array indexed. The new behavior is to act like a boolean numpy array indexer. (:issue:`17738`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:563
#: ../../source/whatsnew/v0.21.0.rst:616
#: ../../source/whatsnew/v0.21.0.rst:652
#: ../../source/whatsnew/v0.21.0.rst:809
#: ../../source/whatsnew/v0.21.0.rst:863
#: ../../source/whatsnew/v0.21.0.rst:890
msgid "Previous behavior:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:587
msgid "Furthermore, previously if you had an index that was non-numeric (e.g. strings), then a boolean Index would raise a ``KeyError``. This will now be treated as a boolean indexer."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:590
msgid "Previously behavior:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:612
msgid "``PeriodIndex`` resampling"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:614
msgid "In previous versions of pandas, resampling a ``Series``/``DataFrame`` indexed by a ``PeriodIndex`` returned a ``DatetimeIndex`` in some cases (:issue:`12884`). Resampling to a multiplied frequency now returns a ``PeriodIndex`` (:issue:`15944`). As a minor enhancement, resampling a ``PeriodIndex`` can now handle ``NaT`` values (:issue:`13224`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:650
msgid "Upsampling and calling ``.ohlc()`` previously returned a ``Series``, basically identical to calling ``.asfreq()``. OHLC upsampling now returns a DataFrame with columns ``open``, ``high``, ``low`` and ``close`` (:issue:`13083`). This is consistent with downsampling and ``DatetimeIndex`` behavior."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:688
msgid "Improved error handling during item assignment in pd.eval"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:690
msgid ":func:`eval` will now raise a ``ValueError`` when item assignment malfunctions, or inplace operations are specified, but there is no item assignment in the expression (:issue:`16732`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:697
msgid "Previously, if you attempted the following expression, you would get a not very helpful error message:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:706
msgid "This is a very long way of saying numpy arrays don't support string-item indexing. With this change, the error message is now this:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:715
msgid "It also used to be possible to evaluate expressions inplace, even if there was no item assignment:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:722
msgid "However, this input does not make much sense because the output is not being assigned to the target. Now, a ``ValueError`` will be raised when such an input is passed in:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:735
msgid "Dtype conversions"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:737
msgid "Previously assignments, ``.where()`` and ``.fillna()`` with a ``bool`` assignment, would coerce to same the type (e.g. int / float), or raise for datetimelikes. These will now preserve the bools with ``object`` dtypes. (:issue:`16821`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:754
#: ../../source/whatsnew/v0.21.0.rst:846
msgid "New behavior"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:767
msgid "Previously, as assignment to a datetimelike with a non-datetimelike would coerce the non-datetime-like item being assigned (:issue:`14145`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:784
msgid "These now coerce to ``object`` dtype."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:796
msgid "Inconsistent behavior in ``.where()`` with datetimelikes which would raise rather than coerce to ``object`` (:issue:`16402`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:797
#: ../../source/whatsnew/v0.21.0.rst:1064
msgid "Bug in assignment against ``int64`` data with ``np.ndarray`` with ``float64`` dtype may keep ``int64`` dtype (:issue:`14001`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:803
msgid "MultiIndex constructor with a single level"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:805
msgid "The ``MultiIndex`` constructors no longer squeezes a MultiIndex with all length-one levels down to a regular ``Index``. This affects all the ``MultiIndex`` constructors. (:issue:`17178`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:816
msgid "Length 1 levels are no longer special-cased. They behave exactly as if you had length 2+ levels, so a :class:`MultiIndex` is always returned from all of the ``MultiIndex`` constructors:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:827
msgid "UTC localization with Series"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:829
msgid "Previously, :func:`to_datetime` did not localize datetime ``Series`` data when ``utc=True`` was passed. Now, :func:`to_datetime` will correctly localize ``Series`` with a ``datetime64[ns, UTC]`` dtype to be consistent with how list-like and ``Index`` data are handled. (:issue:`6415`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:852
msgid "Additionally, DataFrames with datetime columns that were parsed by :func:`read_sql_table` and :func:`read_sql_query` will also be localized to UTC only if the original SQL columns were timezone aware datetime columns."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:857
msgid "Consistency of range functions"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:859
msgid "In previous versions, there were some inconsistencies between the various range functions: :func:`date_range`, :func:`bdate_range`, :func:`period_range`, :func:`timedelta_range`, and :func:`interval_range`. (:issue:`17471`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:861
msgid "One of the inconsistent behaviors occurred when the ``start``, ``end`` and ``period`` parameters were all specified, potentially leading to ambiguous ranges.  When all three parameters were passed, ``interval_range`` ignored the ``period`` parameter, ``period_range`` ignored the ``end`` parameter, and the other range functions raised.  To promote consistency among the range functions, and avoid potentially ambiguous ranges, ``interval_range`` and ``period_range`` will now raise when all three parameters are passed."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:888
msgid "Additionally, the endpoint parameter ``end`` was not included in the intervals produced by ``interval_range``.  However, all other range functions include ``end`` in their output.  To promote consistency among the range functions, ``interval_range`` will now include ``end`` as the right endpoint of the final interval, except if ``freq`` is specified in a way which skips ``end``."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:910
msgid "No automatic Matplotlib converters"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:912
msgid "pandas no longer registers our ``date``, ``time``, ``datetime``, ``datetime64``, and ``Period`` converters with matplotlib when pandas is imported. Matplotlib plot methods (``plt.plot``, ``ax.plot``, ...), will not nicely format the x-axis for ``DatetimeIndex`` or ``PeriodIndex`` values. You must explicitly register these methods:"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:918
msgid "pandas built-in ``Series.plot`` and ``DataFrame.plot`` *will* register these converters on first-use (:issue:`17710`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:923
msgid "This change has been temporarily reverted in pandas 0.21.1, for more details see :ref:`here <whatsnew_0211.converters>`."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:929
msgid "Other API changes"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:931
msgid "The Categorical constructor no longer accepts a scalar for the ``categories`` keyword. (:issue:`16022`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:932
msgid "Accessing a non-existent attribute on a closed :class:`~pandas.HDFStore` will now raise an ``AttributeError`` rather than a ``ClosedFileError`` (:issue:`16301`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:934
msgid ":func:`read_csv` now issues a ``UserWarning`` if the ``names`` parameter contains duplicates (:issue:`17095`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:935
msgid ":func:`read_csv` now treats ``'null'`` and ``'n/a'`` strings as missing values by default (:issue:`16471`, :issue:`16078`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:936
msgid ":class:`pandas.HDFStore`'s string representation is now faster and less detailed. For the previous behavior, use ``pandas.HDFStore.info()``. (:issue:`16503`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:937
msgid "Compression defaults in HDF stores now follow pytables standards. Default is no compression and if ``complib`` is missing and ``complevel`` > 0 ``zlib`` is used (:issue:`15943`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:938
msgid "``Index.get_indexer_non_unique()`` now returns a ndarray indexer rather than an ``Index``; this is consistent with ``Index.get_indexer()`` (:issue:`16819`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:939
msgid "Removed the ``@slow`` decorator from ``pandas._testing``, which caused issues for some downstream packages' test suites. Use ``@pytest.mark.slow`` instead, which achieves the same thing (:issue:`16850`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:940
msgid "Moved definition of ``MergeError`` to the ``pandas.errors`` module."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:941
msgid "The signature of :func:`Series.set_axis` and :func:`DataFrame.set_axis` has been changed from ``set_axis(axis, labels)`` to ``set_axis(labels, axis=0)``, for consistency with the rest of the API. The old signature is deprecated and will show a ``FutureWarning`` (:issue:`14636`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:942
msgid ":func:`Series.argmin` and :func:`Series.argmax` will now raise a ``TypeError`` when used with ``object`` dtypes, instead of a ``ValueError`` (:issue:`13595`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:943
msgid ":class:`Period` is now immutable, and will now raise an ``AttributeError`` when a user tries to assign a new value to the ``ordinal`` or ``freq`` attributes (:issue:`17116`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:944
msgid ":func:`to_datetime` when passed a tz-aware ``origin=`` kwarg will now raise a more informative ``ValueError`` rather than a ``TypeError`` (:issue:`16842`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:945
msgid ":func:`to_datetime` now raises a ``ValueError`` when format includes ``%W`` or ``%U`` without also including day of the week and calendar year (:issue:`16774`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:946
msgid "Renamed non-functional ``index`` to ``index_col`` in :func:`read_stata` to improve API consistency (:issue:`16342`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:947
msgid "Bug in :func:`DataFrame.drop` caused boolean labels ``False`` and ``True`` to be treated as labels 0 and 1 respectively when dropping indices from a numeric index. This will now raise a ValueError (:issue:`16877`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:948
msgid "Restricted DateOffset keyword arguments.  Previously, ``DateOffset`` subclasses allowed arbitrary keyword arguments which could lead to unexpected behavior.  Now, only valid arguments will be accepted. (:issue:`17176`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:953
msgid "Deprecations"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:955
msgid ":meth:`DataFrame.from_csv` and :meth:`Series.from_csv` have been deprecated in favor of :func:`read_csv()` (:issue:`4191`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:956
msgid ":func:`read_excel()` has deprecated ``sheetname`` in favor of ``sheet_name`` for consistency with ``.to_excel()`` (:issue:`10559`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:957
msgid ":func:`read_excel()` has deprecated ``parse_cols`` in favor of ``usecols`` for consistency with :func:`read_csv` (:issue:`4988`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:958
msgid ":func:`read_csv()` has deprecated the ``tupleize_cols`` argument. Column tuples will always be converted to a ``MultiIndex`` (:issue:`17060`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:959
msgid ":meth:`DataFrame.to_csv` has deprecated the ``tupleize_cols`` argument. MultiIndex columns will be always written as rows in the CSV file (:issue:`17060`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:960
msgid "The ``convert`` parameter has been deprecated in the ``.take()`` method, as it was not being respected (:issue:`16948`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:961
msgid "``pd.options.html.border`` has been deprecated in favor of ``pd.options.display.html.border`` (:issue:`15793`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:962
msgid ":func:`SeriesGroupBy.nth` has deprecated ``True`` in favor of ``'all'`` for its kwarg ``dropna`` (:issue:`11038`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:963
msgid ":func:`DataFrame.as_blocks` is deprecated, as this is exposing the internal implementation (:issue:`17302`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:964
msgid "``pd.TimeGrouper`` is deprecated in favor of :class:`pandas.Grouper` (:issue:`16747`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:965
msgid "``cdate_range`` has been deprecated in favor of :func:`bdate_range`, which has gained ``weekmask`` and ``holidays`` parameters for building custom frequency date ranges. See the :ref:`documentation <timeseries.custom-freq-ranges>` for more details (:issue:`17596`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:966
msgid "passing ``categories`` or ``ordered`` kwargs to :func:`Series.astype` is deprecated, in favor of passing a :ref:`CategoricalDtype <whatsnew_0210.enhancements.categorical_dtype>` (:issue:`17636`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:967
msgid "``.get_value`` and ``.set_value`` on ``Series``, ``DataFrame``, ``Panel``, ``SparseSeries``, and ``SparseDataFrame`` are deprecated in favor of using ``.iat[]`` or ``.at[]`` accessors (:issue:`15269`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:968
msgid "Passing a non-existent column in ``.to_excel(..., columns=)`` is deprecated and will raise a ``KeyError`` in the future (:issue:`17295`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:969
msgid "``raise_on_error`` parameter to :func:`Series.where`, :func:`Series.mask`, :func:`DataFrame.where`, :func:`DataFrame.mask` is deprecated, in favor of ``errors=`` (:issue:`14968`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:970
msgid "Using :meth:`DataFrame.rename_axis` and :meth:`Series.rename_axis` to alter index or column *labels* is now deprecated in favor of using ``.rename``. ``rename_axis`` may still be used to alter the name of the index or columns (:issue:`17833`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:971
msgid ":meth:`~DataFrame.reindex_axis` has been deprecated in favor of :meth:`~DataFrame.reindex`. See :ref:`here <whatsnew_0210.enhancements.rename_reindex_axis>` for more (:issue:`17833`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:976
msgid "Series.select and DataFrame.select"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:978
msgid "The :meth:`Series.select` and :meth:`DataFrame.select` methods are deprecated in favor of using ``df.loc[labels.map(crit)]`` (:issue:`12401`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1001
msgid "Series.argmax and Series.argmin"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1003
msgid "The behavior of :func:`Series.argmax` and :func:`Series.argmin` have been deprecated in favor of :func:`Series.idxmax` and :func:`Series.idxmin`, respectively (:issue:`16830`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1005
msgid "For compatibility with NumPy arrays, ``pd.Series`` implements ``argmax`` and ``argmin``. Since pandas 0.13.0, ``argmax`` has been an alias for :meth:`pandas.Series.idxmax`, and ``argmin`` has been an alias for :meth:`pandas.Series.idxmin`. They return the *label* of the maximum or minimum, rather than the *position*."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1011
msgid "We've deprecated the current behavior of ``Series.argmax`` and ``Series.argmin``. Using either of these will emit a ``FutureWarning``. Use :meth:`Series.idxmax` if you want the label of the maximum. Use ``Series.values.argmax()`` if you want the position of the maximum. Likewise for the minimum. In a future release ``Series.argmax`` and ``Series.argmin`` will return the position of the maximum or minimum."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1021
msgid "Removal of prior version deprecations/changes"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1023
msgid ":func:`read_excel()` has dropped the ``has_index_names`` parameter (:issue:`10967`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1024
msgid "The ``pd.options.display.height`` configuration has been dropped (:issue:`3663`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1025
msgid "The ``pd.options.display.line_width`` configuration has been dropped (:issue:`2881`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1026
msgid "The ``pd.options.display.mpl_style`` configuration has been dropped (:issue:`12190`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1027
msgid "``Index`` has dropped the ``.sym_diff()`` method in favor of ``.symmetric_difference()`` (:issue:`12591`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1028
msgid "``Categorical`` has dropped the ``.order()`` and ``.sort()`` methods in favor of ``.sort_values()`` (:issue:`12882`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1029
msgid ":func:`eval` and :func:`DataFrame.eval` have changed the default of ``inplace`` from ``None`` to ``False`` (:issue:`11149`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1030
msgid "The function ``get_offset_name`` has been dropped in favor of the ``.freqstr`` attribute for an offset (:issue:`11834`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1031
msgid "pandas no longer tests for compatibility with hdf5-files created with pandas < 0.11 (:issue:`17404`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1038
msgid "Performance improvements"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1040
msgid "Improved performance of instantiating :class:`SparseDataFrame` (:issue:`16773`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1041
msgid ":attr:`Series.dt` no longer performs frequency inference, yielding a large speedup when accessing the attribute (:issue:`17210`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1042
msgid "Improved performance of :meth:`~Series.cat.set_categories` by not materializing the values (:issue:`17508`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1043
msgid ":attr:`Timestamp.microsecond` no longer re-computes on attribute access (:issue:`17331`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1044
msgid "Improved performance of the :class:`CategoricalIndex` for data that is already categorical dtype (:issue:`17513`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1045
msgid "Improved performance of :meth:`RangeIndex.min` and :meth:`RangeIndex.max` by using ``RangeIndex`` properties to perform the computations (:issue:`17607`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1050
msgid "Documentation changes"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1052
msgid "Several ``NaT`` method docstrings (e.g. :func:`NaT.ctime`) were incorrect (:issue:`17327`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1053
msgid "The documentation has had references to versions < v0.17 removed and cleaned up (:issue:`17442`, :issue:`17442`, :issue:`17404` & :issue:`17504`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1058
msgid "Bug fixes"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1061
msgid "Conversion"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1063
msgid "Bug in assignment against datetime-like data with ``int`` may incorrectly convert to datetime-like (:issue:`14145`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1065
msgid "Fixed the return type of ``IntervalIndex.is_non_overlapping_monotonic`` to be a Python ``bool`` for consistency with similar attributes/methods.  Previously returned a ``numpy.bool_``. (:issue:`17237`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1066
msgid "Bug in ``IntervalIndex.is_non_overlapping_monotonic`` when intervals are closed on both sides and overlap at a point (:issue:`16560`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1067
msgid "Bug in :func:`Series.fillna` returns frame when ``inplace=True`` and ``value`` is dict (:issue:`16156`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1068
msgid "Bug in :attr:`Timestamp.weekday_name` returning a UTC-based weekday name when localized to a timezone (:issue:`17354`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1069
msgid "Bug in ``Timestamp.replace`` when replacing ``tzinfo`` around DST changes (:issue:`15683`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1070
msgid "Bug in ``Timedelta`` construction and arithmetic that would not propagate the ``Overflow`` exception (:issue:`17367`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1071
msgid "Bug in :meth:`~DataFrame.astype` converting to object dtype when passed extension type classes (``DatetimeTZDtype``, ``CategoricalDtype``) rather than instances. Now a ``TypeError`` is raised when a class is passed (:issue:`17780`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1072
msgid "Bug in :meth:`to_numeric` in which elements were not always being coerced to numeric when ``errors='coerce'`` (:issue:`17007`, :issue:`17125`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1073
msgid "Bug in ``DataFrame`` and ``Series`` constructors where ``range`` objects are converted to ``int32`` dtype on Windows instead of ``int64`` (:issue:`16804`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1076
msgid "Indexing"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1078
msgid "When called with a null slice (e.g. ``df.iloc[:]``), the ``.iloc`` and ``.loc`` indexers return a shallow copy of the original object. Previously they returned the original object. (:issue:`13873`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1079
msgid "When called on an unsorted ``MultiIndex``, the ``loc`` indexer now will raise ``UnsortedIndexError`` only if proper slicing is used on non-sorted levels (:issue:`16734`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1080
msgid "Fixes regression in 0.20.3 when indexing with a string on a ``TimedeltaIndex`` (:issue:`16896`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1081
msgid "Fixed :func:`TimedeltaIndex.get_loc` handling of ``np.timedelta64`` inputs (:issue:`16909`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1082
msgid "Fix :func:`MultiIndex.sort_index` ordering when ``ascending`` argument is a list, but not all levels are specified, or are in a different order (:issue:`16934`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1083
msgid "Fixes bug where indexing with ``np.inf`` caused an ``OverflowError`` to be raised (:issue:`16957`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1084
msgid "Bug in reindexing on an empty ``CategoricalIndex`` (:issue:`16770`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1085
msgid "Fixes ``DataFrame.loc`` for setting with alignment and tz-aware ``DatetimeIndex`` (:issue:`16889`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1086
msgid "Avoids ``IndexError`` when passing an Index or Series to ``.iloc`` with older numpy (:issue:`17193`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1087
msgid "Allow unicode empty strings as placeholders in multilevel columns in Python 2 (:issue:`17099`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1088
msgid "Bug in ``.iloc`` when used with inplace addition or assignment and an int indexer on a ``MultiIndex`` causing the wrong indexes to be read from and written to (:issue:`17148`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1089
msgid "Bug in ``.isin()`` in which checking membership in empty ``Series`` objects raised an error (:issue:`16991`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1090
msgid "Bug in ``CategoricalIndex`` reindexing in which specified indices containing duplicates were not being respected (:issue:`17323`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1091
msgid "Bug in intersection of ``RangeIndex`` with negative step (:issue:`17296`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1092
msgid "Bug in ``IntervalIndex`` where performing a scalar lookup fails for included right endpoints of non-overlapping monotonic decreasing indexes (:issue:`16417`, :issue:`17271`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1093
msgid "Bug in :meth:`DataFrame.first_valid_index` and :meth:`DataFrame.last_valid_index` when no valid entry (:issue:`17400`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1094
msgid "Bug in :func:`Series.rename` when called with a callable, incorrectly alters the name of the ``Series``, rather than the name of the ``Index``. (:issue:`17407`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1095
msgid "Bug in :func:`String.str_get` raises ``IndexError`` instead of inserting NaNs when using a negative index. (:issue:`17704`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1098
msgid "IO"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1100
msgid "Bug in :func:`read_hdf` when reading a timezone aware index from ``fixed`` format HDFStore (:issue:`17618`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1101
msgid "Bug in :func:`read_csv` in which columns were not being thoroughly de-duplicated (:issue:`17060`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1102
msgid "Bug in :func:`read_csv` in which specified column names were not being thoroughly de-duplicated (:issue:`17095`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1103
msgid "Bug in :func:`read_csv` in which non integer values for the header argument generated an unhelpful / unrelated error message (:issue:`16338`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1104
msgid "Bug in :func:`read_csv` in which memory management issues in exception handling, under certain conditions, would cause the interpreter to segfault (:issue:`14696`, :issue:`16798`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1105
msgid "Bug in :func:`read_csv` when called with ``low_memory=False`` in which a CSV with at least one column > 2GB in size would incorrectly raise a ``MemoryError`` (:issue:`16798`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1106
msgid "Bug in :func:`read_csv` when called with a single-element list ``header`` would return a ``DataFrame`` of all NaN values (:issue:`7757`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1107
msgid "Bug in :meth:`DataFrame.to_csv` defaulting to 'ascii' encoding in Python 3, instead of 'utf-8' (:issue:`17097`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1108
msgid "Bug in :func:`read_stata` where value labels could not be read when using an iterator (:issue:`16923`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1109
msgid "Bug in :func:`read_stata` where the index was not set (:issue:`16342`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1110
msgid "Bug in :func:`read_html` where import check fails when run in multiple threads (:issue:`16928`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1111
msgid "Bug in :func:`read_csv` where automatic delimiter detection caused a ``TypeError`` to be thrown when a bad line was encountered rather than the correct error message (:issue:`13374`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1112
msgid "Bug in :meth:`DataFrame.to_html` with ``notebook=True`` where DataFrames with named indices or non-MultiIndex indices had undesired horizontal or vertical alignment for column or row labels, respectively (:issue:`16792`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1113
msgid "Bug in :meth:`DataFrame.to_html` in which there was no validation of the ``justify`` parameter (:issue:`17527`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1114
msgid "Bug in :func:`HDFStore.select` when reading a contiguous mixed-data table featuring VLArray (:issue:`17021`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1115
msgid "Bug in :func:`to_json` where several conditions (including objects with unprintable symbols, objects with deep recursion, overlong labels) caused segfaults instead of raising the appropriate exception (:issue:`14256`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1118
msgid "Plotting"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1119
msgid "Bug in plotting methods using ``secondary_y`` and ``fontsize`` not setting secondary axis font size (:issue:`12565`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1120
msgid "Bug when plotting ``timedelta`` and ``datetime`` dtypes on y-axis (:issue:`16953`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1121
msgid "Line plots no longer assume monotonic x data when calculating xlims, they show the entire lines now even for unsorted x data. (:issue:`11310`, :issue:`11471`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1122
msgid "With matplotlib 2.0.0 and above, calculation of x limits for line plots is left to matplotlib, so that its new default settings are applied. (:issue:`15495`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1123
msgid "Bug in ``Series.plot.bar`` or ``DataFrame.plot.bar`` with ``y`` not respecting user-passed ``color`` (:issue:`16822`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1124
msgid "Bug causing ``plotting.parallel_coordinates`` to reset the random seed when using random colors (:issue:`17525`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1128
msgid "GroupBy/resample/rolling"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1130
msgid "Bug in ``DataFrame.resample(...).size()`` where an empty ``DataFrame`` did not return a ``Series`` (:issue:`14962`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1131
msgid "Bug in :func:`infer_freq` causing indices with 2-day gaps during the working week to be wrongly inferred as business daily (:issue:`16624`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1132
msgid "Bug in ``.rolling(...).quantile()`` which incorrectly used different defaults than :func:`Series.quantile()` and :func:`DataFrame.quantile()` (:issue:`9413`, :issue:`16211`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1133
msgid "Bug in ``groupby.transform()`` that would coerce boolean dtypes back to float (:issue:`16875`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1134
msgid "Bug in ``Series.resample(...).apply()`` where an empty ``Series`` modified the source index and did not return the name of a ``Series`` (:issue:`14313`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1135
msgid "Bug in ``.rolling(...).apply(...)`` with a ``DataFrame`` with a ``DatetimeIndex``, a ``window`` of a timedelta-convertible and ``min_periods >= 1`` (:issue:`15305`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1136
msgid "Bug in ``DataFrame.groupby`` where index and column keys were not recognized correctly when the number of keys equaled the number of elements on the groupby axis (:issue:`16859`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1137
msgid "Bug in ``groupby.nunique()`` with ``TimeGrouper`` which cannot handle ``NaT`` correctly (:issue:`17575`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1138
msgid "Bug in ``DataFrame.groupby`` where a single level selection from a ``MultiIndex`` unexpectedly sorts (:issue:`17537`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1139
msgid "Bug in ``DataFrame.groupby`` where spurious warning is raised when ``Grouper`` object is used to override ambiguous column name (:issue:`17383`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1140
msgid "Bug in ``TimeGrouper`` differs when passes as a list and as a scalar (:issue:`17530`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1143
msgid "Sparse"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1145
msgid "Bug in ``SparseSeries`` raises ``AttributeError`` when a dictionary is passed in as data (:issue:`16905`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1146
msgid "Bug in :func:`SparseDataFrame.fillna` not filling all NaNs when frame was instantiated from SciPy sparse matrix (:issue:`16112`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1147
msgid "Bug in :func:`SparseSeries.unstack` and :func:`SparseDataFrame.stack` (:issue:`16614`, :issue:`15045`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1148
msgid "Bug in :func:`make_sparse` treating two numeric/boolean data, which have same bits, as same when array ``dtype`` is ``object`` (:issue:`17574`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1149
msgid ":func:`SparseArray.all` and :func:`SparseArray.any` are now implemented to handle ``SparseArray``, these were used but not implemented (:issue:`17570`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1152
msgid "Reshaping"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1153
msgid "Joining/Merging with a non unique ``PeriodIndex`` raised a ``TypeError`` (:issue:`16871`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1154
msgid "Bug in :func:`crosstab` where non-aligned series of integers were casted to float (:issue:`17005`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1155
msgid "Bug in merging with categorical dtypes with datetimelikes incorrectly raised a ``TypeError`` (:issue:`16900`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1156
msgid "Bug when using :func:`isin` on a large object series and large comparison array (:issue:`16012`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1157
msgid "Fixes regression from 0.20, :func:`Series.aggregate` and :func:`DataFrame.aggregate` allow dictionaries as return values again (:issue:`16741`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1158
msgid "Fixes dtype of result with integer dtype input, from :func:`pivot_table` when called with ``margins=True`` (:issue:`17013`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1159
msgid "Bug in :func:`crosstab` where passing two ``Series`` with the same name raised a ``KeyError`` (:issue:`13279`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1160
msgid ":func:`Series.argmin`, :func:`Series.argmax`, and their counterparts on ``DataFrame`` and groupby objects work correctly with floating point data that contains infinite values (:issue:`13595`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1161
msgid "Bug in :func:`unique` where checking a tuple of strings raised a ``TypeError`` (:issue:`17108`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1162
msgid "Bug in :func:`concat` where order of result index was unpredictable if it contained non-comparable elements (:issue:`17344`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1163
msgid "Fixes regression when sorting by multiple columns on a ``datetime64`` dtype ``Series`` with ``NaT`` values (:issue:`16836`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1164
msgid "Bug in :func:`pivot_table` where the result's columns did not preserve the categorical dtype of ``columns`` when ``dropna`` was ``False`` (:issue:`17842`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1165
msgid "Bug in ``DataFrame.drop_duplicates`` where dropping with non-unique column names raised a ``ValueError`` (:issue:`17836`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1166
msgid "Bug in :func:`unstack` which, when called on a list of levels, would discard the ``fillna`` argument (:issue:`13971`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1167
msgid "Bug in the alignment of ``range`` objects and other list-likes with ``DataFrame`` leading to operations being performed row-wise instead of column-wise (:issue:`17901`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1170
msgid "Numeric"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1171
msgid "Bug in ``.clip()`` with ``axis=1`` and a list-like for ``threshold`` is passed; previously this raised ``ValueError`` (:issue:`15390`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1172
msgid ":func:`Series.clip()` and :func:`DataFrame.clip()` now treat NA values for upper and lower arguments as ``None`` instead of raising ``ValueError`` (:issue:`17276`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1176
msgid "Categorical"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1177
msgid "Bug in :func:`Series.isin` when called with a categorical (:issue:`16639`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1178
msgid "Bug in the categorical constructor with empty values and categories causing the ``.categories`` to be an empty ``Float64Index`` rather than an empty ``Index`` with object dtype (:issue:`17248`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1179
msgid "Bug in categorical operations with :ref:`Series.cat <categorical.cat>` not preserving the original Series' name (:issue:`17509`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1180
msgid "Bug in :func:`DataFrame.merge` failing for categorical columns with boolean/int data types (:issue:`17187`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1181
msgid "Bug in constructing a ``Categorical``/``CategoricalDtype`` when the specified ``categories`` are of categorical type (:issue:`17884`)."
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1186
msgid "PyPy"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1188
msgid "Compatibility with PyPy in :func:`read_csv` with ``usecols=[<unsorted ints>]`` and :func:`read_json` (:issue:`17351`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1190
msgid "Split tests into cases for CPython and PyPy where needed, which highlights the fragility of index matching with ``float('nan')``, ``np.nan`` and ``NAT`` (:issue:`17351`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1192
msgid "Fix :func:`DataFrame.memory_usage` to support PyPy. Objects on PyPy do not have a fixed size, so an approximation is used instead (:issue:`17228`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1196
msgid "Other"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1197
msgid "Bug where some inplace operators were not being wrapped and produced a copy when invoked (:issue:`12962`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1198
msgid "Bug in :func:`eval` where the ``inplace`` parameter was being incorrectly handled (:issue:`16732`)"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1205
msgid "Contributors"
msgstr ""

#: ../../source/whatsnew/v0.21.0.rst:1207
msgid "A total of 206 people contributed patches to this release.  People with a \"+\" by their names contributed a patch for the first time."
msgstr ""
