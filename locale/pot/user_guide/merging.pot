# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/user_guide/merging.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/user_guide/merging.rst:16
msgid "Merge, join, concatenate and compare"
msgstr ""

#: ../../source/user_guide/merging.rst:18
msgid "pandas provides various facilities for easily combining together Series or DataFrame with various kinds of set logic for the indexes and relational algebra functionality in the case of join / merge-type operations."
msgstr ""

#: ../../source/user_guide/merging.rst:23
msgid "In addition, pandas also provides utilities to compare two Series or DataFrame and summarize their differences."
msgstr ""

#: ../../source/user_guide/merging.rst:29
msgid "Concatenating objects"
msgstr ""

#: ../../source/user_guide/merging.rst:31
msgid "The :func:`~pandas.concat` function (in the main pandas namespace) does all of the heavy lifting of performing concatenation operations along an axis while performing optional set logic (union or intersection) of the indexes (if any) on the other axes. Note that I say \"if any\" because there is only a single possible axis of concatenation for Series."
msgstr ""

#: ../../source/user_guide/merging.rst:37
msgid "Before diving into all of the details of ``concat`` and what it can do, here is a simple example:"
msgstr ""

#: ../../source/user_guide/merging.rst:82
msgid "Like its sibling function on ndarrays, ``numpy.concatenate``, ``pandas.concat`` takes a list or dict of homogeneously-typed objects and concatenates them with some configurable handling of \"what to do with the other axes\":"
msgstr ""

#: ../../source/user_guide/merging.rst:100
msgid "``objs`` : a sequence or mapping of Series or DataFrame objects. If a dict is passed, the sorted keys will be used as the ``keys`` argument, unless it is passed, in which case the values will be selected (see below). Any None objects will be dropped silently unless they are all None in which case a ValueError will be raised."
msgstr ""

#: ../../source/user_guide/merging.rst:105
msgid "``axis`` : {0, 1, ...}, default 0. The axis to concatenate along."
msgstr ""

#: ../../source/user_guide/merging.rst:106
msgid "``join`` : {'inner', 'outer'}, default 'outer'. How to handle indexes on other axis(es). Outer for union and inner for intersection."
msgstr ""

#: ../../source/user_guide/merging.rst:108
msgid "``ignore_index`` : boolean, default False. If True, do not use the index values on the concatenation axis. The resulting axis will be labeled 0, ..., n - 1. This is useful if you are concatenating objects where the concatenation axis does not have meaningful indexing information. Note the index values on the other axes are still respected in the join."
msgstr ""

#: ../../source/user_guide/merging.rst:113
msgid "``keys`` : sequence, default None. Construct hierarchical index using the passed keys as the outermost level. If multiple levels passed, should contain tuples."
msgstr ""

#: ../../source/user_guide/merging.rst:116
msgid "``levels`` : list of sequences, default None. Specific levels (unique values) to use for constructing a MultiIndex. Otherwise they will be inferred from the keys."
msgstr ""

#: ../../source/user_guide/merging.rst:119
msgid "``names`` : list, default None. Names for the levels in the resulting hierarchical index."
msgstr ""

#: ../../source/user_guide/merging.rst:121
msgid "``verify_integrity`` : boolean, default False. Check whether the new concatenated axis contains duplicates. This can be very expensive relative to the actual data concatenation."
msgstr ""

#: ../../source/user_guide/merging.rst:124
msgid "``copy`` : boolean, default True. If False, do not copy data unnecessarily."
msgstr ""

#: ../../source/user_guide/merging.rst:126
msgid "Without a little bit of context many of these arguments don't make much sense. Let's revisit the above example. Suppose we wanted to associate specific keys with each of the pieces of the chopped up DataFrame. We can do this using the ``keys`` argument:"
msgstr ""

#: ../../source/user_guide/merging.rst:142
msgid "As you can see (if you've read the rest of the documentation), the resulting object's index has a :ref:`hierarchical index <advanced.hierarchical>`. This means that we can now select out each chunk by key:"
msgstr ""

#: ../../source/user_guide/merging.rst:150
msgid "It's not a stretch to see how this can be very useful. More detail on this functionality below."
msgstr ""

#: ../../source/user_guide/merging.rst:154
msgid "It is worth noting that :func:`~pandas.concat` makes a full copy of the data, and that constantly reusing this function can create a significant performance hit. If you need to use the operation over several datasets, use a list comprehension."
msgstr ""

#: ../../source/user_guide/merging.rst:165
msgid "When concatenating DataFrames with named axes, pandas will attempt to preserve these index/column names whenever possible. In the case where all inputs share a common name, this name will be assigned to the result. When the input names do not all agree, the result will be unnamed. The same is true for :class:`MultiIndex`, but the logic is applied separately on a level-by-level basis."
msgstr ""

#: ../../source/user_guide/merging.rst:173
msgid "Set logic on the other axes"
msgstr ""

#: ../../source/user_guide/merging.rst:175
msgid "When gluing together multiple DataFrames, you have a choice of how to handle the other axes (other than the one being concatenated). This can be done in the following two ways:"
msgstr ""

#: ../../source/user_guide/merging.rst:179
msgid "Take the union of them all, ``join='outer'``. This is the default option as it results in zero information loss."
msgstr ""

#: ../../source/user_guide/merging.rst:181
msgid "Take the intersection, ``join='inner'``."
msgstr ""

#: ../../source/user_guide/merging.rst:183
msgid "Here is an example of each of these methods. First, the default ``join='outer'`` behavior:"
msgstr ""

#: ../../source/user_guide/merging.rst:206
msgid "Here is the same thing with ``join='inner'``:"
msgstr ""

#: ../../source/user_guide/merging.rst:219
msgid "Lastly, suppose we just wanted to reuse the *exact index* from the original DataFrame:"
msgstr ""

#: ../../source/user_guide/merging.rst:226
msgid "Similarly, we could index before the concatenation:"
msgstr ""

#: ../../source/user_guide/merging.rst:242
msgid "Ignoring indexes on the concatenation axis"
msgstr ""

#: ../../source/user_guide/merging.rst:243
msgid "For ``DataFrame`` objects which don't have a meaningful index, you may wish to append them and ignore the fact that they may have overlapping indexes. To do this, use the ``ignore_index`` argument:"
msgstr ""

#: ../../source/user_guide/merging.rst:261
msgid "Concatenating with mixed ndims"
msgstr ""

#: ../../source/user_guide/merging.rst:263
msgid "You can concatenate a mix of ``Series`` and ``DataFrame`` objects. The ``Series`` will be transformed to ``DataFrame`` with the column name as the name of the ``Series``."
msgstr ""

#: ../../source/user_guide/merging.rst:281
msgid "Since we're concatenating a ``Series`` to a ``DataFrame``, we could have achieved the same result with :meth:`DataFrame.assign`. To concatenate an arbitrary number of pandas objects (``DataFrame`` or ``Series``), use ``concat``."
msgstr ""

#: ../../source/user_guide/merging.rst:286
msgid "If unnamed ``Series`` are passed they will be numbered consecutively."
msgstr ""

#: ../../source/user_guide/merging.rst:300
msgid "Passing ``ignore_index=True`` will drop all name references."
msgstr ""

#: ../../source/user_guide/merging.rst:314
msgid "More concatenating with group keys"
msgstr ""

#: ../../source/user_guide/merging.rst:316
msgid "A fairly common use of the ``keys`` argument is to override the column names when creating a new ``DataFrame`` based on existing ``Series``. Notice how the default behaviour consists on letting the resulting ``DataFrame`` inherit the parent ``Series``' name, when these existed."
msgstr ""

#: ../../source/user_guide/merging.rst:329
msgid "Through the ``keys`` argument we can override the existing column names."
msgstr ""

#: ../../source/user_guide/merging.rst:335
msgid "Let's consider a variation of the very first example presented:"
msgstr ""

#: ../../source/user_guide/merging.rst:348
msgid "You can also pass a dict to ``concat`` in which case the dict keys will be used for the ``keys`` argument (unless other keys are specified):"
msgstr ""

#: ../../source/user_guide/merging.rst:374
msgid "The MultiIndex created has levels that are constructed from the passed keys and the index of the ``DataFrame`` pieces:"
msgstr ""

#: ../../source/user_guide/merging.rst:381
msgid "If you wish to specify other levels (as will occasionally be the case), you can do so using the ``levels`` argument:"
msgstr ""

#: ../../source/user_guide/merging.rst:401
msgid "This is fairly esoteric, but it is actually necessary for implementing things like GroupBy where the order of a categorical variable is meaningful."
msgstr ""

#: ../../source/user_guide/merging.rst:407
msgid "Appending rows to a DataFrame"
msgstr ""

#: ../../source/user_guide/merging.rst:409
msgid "If you have a series that you want to append as a single row to a ``DataFrame``, you can convert the row into a ``DataFrame`` and use ``concat``"
msgstr ""

#: ../../source/user_guide/merging.rst:424
msgid "You should use ``ignore_index`` with this method to instruct DataFrame to discard its index. If you wish to preserve the index, you should construct an appropriately-indexed DataFrame and append or concatenate those objects."
msgstr ""

#: ../../source/user_guide/merging.rst:431
msgid "Database-style DataFrame or named Series joining/merging"
msgstr ""

#: ../../source/user_guide/merging.rst:433
msgid "pandas has full-featured, **high performance** in-memory join operations idiomatically very similar to relational databases like SQL. These methods perform significantly better (in some cases well over an order of magnitude better) than other open source implementations (like ``base::merge.data.frame`` in R). The reason for this is careful algorithmic design and the internal layout of the data in ``DataFrame``."
msgstr ""

#: ../../source/user_guide/merging.rst:440
msgid "See the :ref:`cookbook<cookbook.merge>` for some advanced strategies."
msgstr ""

#: ../../source/user_guide/merging.rst:442
msgid "Users who are familiar with SQL but new to pandas might be interested in a :ref:`comparison with SQL<compare_with_sql.join>`."
msgstr ""

#: ../../source/user_guide/merging.rst:445
msgid "pandas provides a single function, :func:`~pandas.merge`, as the entry point for all standard database join operations between ``DataFrame`` or named ``Series`` objects:"
msgstr ""

#: ../../source/user_guide/merging.rst:466
msgid "``left``: A DataFrame or named Series object."
msgstr ""

#: ../../source/user_guide/merging.rst:467
msgid "``right``: Another DataFrame or named Series object."
msgstr ""

#: ../../source/user_guide/merging.rst:468
msgid "``on``: Column or index level names to join on. Must be found in both the left and right DataFrame and/or Series objects. If not passed and ``left_index`` and ``right_index`` are ``False``, the intersection of the columns in the DataFrames and/or Series will be inferred to be the join keys."
msgstr ""

#: ../../source/user_guide/merging.rst:472
msgid "``left_on``: Columns or index levels from the left DataFrame or Series to use as keys. Can either be column names, index level names, or arrays with length equal to the length of the DataFrame or Series."
msgstr ""

#: ../../source/user_guide/merging.rst:475
msgid "``right_on``: Columns or index levels from the right DataFrame or Series to use as keys. Can either be column names, index level names, or arrays with length equal to the length of the DataFrame or Series."
msgstr ""

#: ../../source/user_guide/merging.rst:478
msgid "``left_index``: If ``True``, use the index (row labels) from the left DataFrame or Series as its join key(s). In the case of a DataFrame or Series with a MultiIndex (hierarchical), the number of levels must match the number of join keys from the right DataFrame or Series."
msgstr ""

#: ../../source/user_guide/merging.rst:482
msgid "``right_index``: Same usage as ``left_index`` for the right DataFrame or Series"
msgstr ""

#: ../../source/user_guide/merging.rst:483
msgid "``how``: One of ``'left'``, ``'right'``, ``'outer'``, ``'inner'``, ``'cross'``. Defaults to ``inner``. See below for more detailed description of each method."
msgstr ""

#: ../../source/user_guide/merging.rst:485
msgid "``sort``: Sort the result DataFrame by the join keys in lexicographical order. Defaults to ``True``, setting to ``False`` will improve performance substantially in many cases."
msgstr ""

#: ../../source/user_guide/merging.rst:488
msgid "``suffixes``: A tuple of string suffixes to apply to overlapping columns. Defaults to ``('_x', '_y')``."
msgstr ""

#: ../../source/user_guide/merging.rst:490
msgid "``copy``: Always copy data (default ``True``) from the passed DataFrame or named Series objects, even when reindexing is not necessary. Cannot be avoided in many cases but may improve performance / memory usage. The cases where copying can be avoided are somewhat pathological but this option is provided nonetheless."
msgstr ""

#: ../../source/user_guide/merging.rst:495
msgid "``indicator``: Add a column to the output DataFrame called ``_merge`` with information on the source of each row. ``_merge`` is Categorical-type and takes on a value of ``left_only`` for observations whose merge key only appears in ``'left'`` DataFrame or Series, ``right_only`` for observations whose merge key only appears in ``'right'`` DataFrame or Series, and ``both`` if the observation's merge key is found in both."
msgstr ""

#: ../../source/user_guide/merging.rst:502
msgid "``validate`` : string, default None. If specified, checks if merge is of specified type."
msgstr ""

#: ../../source/user_guide/merging.rst:505
msgid "\"one_to_one\" or \"1:1\": checks if merge keys are unique in both left and right datasets."
msgstr ""

#: ../../source/user_guide/merging.rst:507
msgid "\"one_to_many\" or \"1:m\": checks if merge keys are unique in left dataset."
msgstr ""

#: ../../source/user_guide/merging.rst:509
msgid "\"many_to_one\" or \"m:1\": checks if merge keys are unique in right dataset."
msgstr ""

#: ../../source/user_guide/merging.rst:511
msgid "\"many_to_many\" or \"m:m\": allowed, but does not result in checks."
msgstr ""

#: ../../source/user_guide/merging.rst:513
msgid "The return type will be the same as ``left``. If ``left`` is a ``DataFrame`` or named ``Series`` and ``right`` is a subclass of ``DataFrame``, the return type will still be ``DataFrame``."
msgstr ""

#: ../../source/user_guide/merging.rst:516
msgid "``merge`` is a function in the pandas namespace, and it is also available as a ``DataFrame`` instance method :meth:`~DataFrame.merge`, with the calling ``DataFrame`` being implicitly considered the left object in the join."
msgstr ""

#: ../../source/user_guide/merging.rst:520
msgid "The related :meth:`~DataFrame.join` method, uses ``merge`` internally for the index-on-index (by default) and column(s)-on-index join. If you are joining on index only, you may wish to use ``DataFrame.join`` to save yourself some typing."
msgstr ""

#: ../../source/user_guide/merging.rst:525
msgid "Brief primer on merge methods (relational algebra)"
msgstr ""

#: ../../source/user_guide/merging.rst:527
msgid "Experienced users of relational databases like SQL will be familiar with the terminology used to describe join operations between two SQL-table like structures (``DataFrame`` objects). There are several cases to consider which are very important to understand:"
msgstr ""

#: ../../source/user_guide/merging.rst:532
msgid "**one-to-one** joins: for example when joining two ``DataFrame`` objects on their indexes (which must contain unique values)."
msgstr ""

#: ../../source/user_guide/merging.rst:534
msgid "**many-to-one** joins: for example when joining an index (unique) to one or more columns in a different ``DataFrame``."
msgstr ""

#: ../../source/user_guide/merging.rst:536
msgid "**many-to-many** joins: joining columns on columns."
msgstr ""

#: ../../source/user_guide/merging.rst:540
msgid "When joining columns on columns (potentially a many-to-many join), any indexes on the passed ``DataFrame`` objects **will be discarded**."
msgstr ""

#: ../../source/user_guide/merging.rst:544
msgid "It is worth spending some time understanding the result of the **many-to-many** join case. In SQL / standard relational algebra, if a key combination appears more than once in both tables, the resulting table will have the **Cartesian product** of the associated data. Here is a very basic example with one unique key combination:"
msgstr ""

#: ../../source/user_guide/merging.rst:576
msgid "Here is a more complicated example with multiple join keys. Only the keys appearing in ``left`` and ``right`` are present (the intersection), since ``how='inner'`` by default."
msgstr ""

#: ../../source/user_guide/merging.rst:609
msgid "The ``how`` argument to ``merge`` specifies how to determine which keys are to be included in the resulting table. If a key combination **does not appear** in either the left or right tables, the values in the joined table will be ``NA``. Here is a summary of the ``how`` options and their SQL equivalent names:"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "Merge method"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "SQL Join Name"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "Description"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``left``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``LEFT OUTER JOIN``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "Use keys from left frame only"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``right``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``RIGHT OUTER JOIN``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "Use keys from right frame only"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``outer``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``FULL OUTER JOIN``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "Use union of keys from both frames"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``inner``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``INNER JOIN``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "Use intersection of keys from both frames"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``cross``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "``CROSS JOIN``"
msgstr ""

#: ../../source/user_guide/merging.rst:1
msgid "Create the cartesian product of rows of both frames"
msgstr ""

#: ../../source/user_guide/merging.rst:678
msgid "You can merge a mult-indexed Series and a DataFrame, if the names of the MultiIndex correspond to the columns from the DataFrame. Transform the Series to a DataFrame using :meth:`Series.reset_index` before merging, as shown in the following example."
msgstr ""

#: ../../source/user_guide/merging.rst:699
msgid "Here is another example with duplicate join keys in DataFrames:"
msgstr ""

#: ../../source/user_guide/merging.rst:719
msgid "Joining / merging on duplicate keys can cause a returned frame that is the multiplication of the row dimensions, which may result in memory overflow. It is the user' s responsibility to manage duplicate values in keys before joining large DataFrames."
msgstr ""

#: ../../source/user_guide/merging.rst:724
msgid "Checking for duplicate keys"
msgstr ""

#: ../../source/user_guide/merging.rst:726
msgid "Users can use the ``validate`` argument to automatically check whether there are unexpected duplicates in their merge keys. Key uniqueness is checked before merge operations and so should protect against memory overflows. Checking key uniqueness is also a good way to ensure user data structures are as expected."
msgstr ""

#: ../../source/user_guide/merging.rst:731
msgid "In the following example, there are duplicate values of ``B`` in the right ``DataFrame``. As this is not a one-to-one merge -- as specified in the ``validate`` argument -- an exception will be raised."
msgstr ""

#: ../../source/user_guide/merging.rst:742
msgid "If the user is aware of the duplicates in the right ``DataFrame`` but wants to ensure there are no duplicates in the left DataFrame, one can use the ``validate='one_to_many'`` argument instead, which will not raise an exception."
msgstr ""

#: ../../source/user_guide/merging.rst:754
msgid "The merge indicator"
msgstr ""

#: ../../source/user_guide/merging.rst:756
msgid ":func:`~pandas.merge` accepts the argument ``indicator``. If ``True``, a Categorical-type column called ``_merge`` will be added to the output object that takes on values:"
msgstr ""

#: ../../source/user_guide/merging.rst:761
msgid "Observation Origin"
msgstr ""

#: ../../source/user_guide/merging.rst:761
msgid "``_merge`` value"
msgstr ""

#: ../../source/user_guide/merging.rst:763
msgid "Merge key only in ``'left'`` frame"
msgstr ""

#: ../../source/user_guide/merging.rst:763
msgid "``left_only``"
msgstr ""

#: ../../source/user_guide/merging.rst:764
msgid "Merge key only in ``'right'`` frame"
msgstr ""

#: ../../source/user_guide/merging.rst:764
msgid "``right_only``"
msgstr ""

#: ../../source/user_guide/merging.rst:765
msgid "Merge key in both frames"
msgstr ""

#: ../../source/user_guide/merging.rst:765
msgid "``both``"
msgstr ""

#: ../../source/user_guide/merging.rst:774
msgid "The ``indicator`` argument will also accept string arguments, in which case the indicator function will use the value of the passed string as the name for the indicator column."
msgstr ""

#: ../../source/user_guide/merging.rst:784
msgid "Merge dtypes"
msgstr ""

#: ../../source/user_guide/merging.rst:786
msgid "Merging will preserve the dtype of the join keys."
msgstr ""

#: ../../source/user_guide/merging.rst:795
msgid "We are able to preserve the join keys:"
msgstr ""

#: ../../source/user_guide/merging.rst:802
msgid "Of course if you have missing values that are introduced, then the resulting dtype will be upcast."
msgstr ""

#: ../../source/user_guide/merging.rst:810
msgid "Merging will preserve ``category`` dtypes of the mergands. See also the section on :ref:`categoricals <categorical.merge>`."
msgstr ""

#: ../../source/user_guide/merging.rst:812
msgid "The left frame."
msgstr ""

#: ../../source/user_guide/merging.rst:827
msgid "The right frame."
msgstr ""

#: ../../source/user_guide/merging.rst:840
msgid "The merged result:"
msgstr ""

#: ../../source/user_guide/merging.rst:850
msgid "The category dtypes must be *exactly* the same, meaning the same categories and the ordered attribute. Otherwise the result will coerce to the categories' dtype."
msgstr ""

#: ../../source/user_guide/merging.rst:855
msgid "Merging on ``category`` dtypes that are the same can be quite performant compared to ``object`` dtype merging."
msgstr ""

#: ../../source/user_guide/merging.rst:860
msgid "Joining on index"
msgstr ""

#: ../../source/user_guide/merging.rst:862
msgid ":meth:`DataFrame.join` is a convenient method for combining the columns of two potentially differently-indexed ``DataFrames`` into a single result ``DataFrame``. Here is a very basic example:"
msgstr ""

#: ../../source/user_guide/merging.rst:896
msgid "The same as above, but with ``how='inner'``."
msgstr ""

#: ../../source/user_guide/merging.rst:909
msgid "The data alignment here is on the indexes (row labels). This same behavior can be achieved using ``merge`` plus additional arguments instructing it to use the indexes:"
msgstr ""

#: ../../source/user_guide/merging.rst:936
msgid "Joining key columns on an index"
msgstr ""

#: ../../source/user_guide/merging.rst:938
msgid ":meth:`~DataFrame.join` takes an optional ``on`` argument which may be a column or multiple column names, which specifies that the passed ``DataFrame`` is to be aligned on that column in the ``DataFrame``. These two function calls are completely equivalent:"
msgstr ""

#: ../../source/user_guide/merging.rst:950
msgid "Obviously you can choose whichever form you find more convenient. For many-to-one joins (where one of the ``DataFrame``'s is already indexed by the join key), using ``join`` may be more convenient. Here is a simple example:"
msgstr ""

#: ../../source/user_guide/merging.rst:990
msgid "To join on multiple keys, the passed DataFrame must have a ``MultiIndex``:"
msgstr ""

#: ../../source/user_guide/merging.rst:1010
msgid "Now this can be joined by passing the two key column names:"
msgstr ""

#: ../../source/user_guide/merging.rst:1025
msgid "The default for ``DataFrame.join`` is to perform a left join (essentially a \"VLOOKUP\" operation, for Excel users), which uses only the keys found in the calling DataFrame. Other join types, for example inner join, can be just as easily performed:"
msgstr ""

#: ../../source/user_guide/merging.rst:1041
msgid "As you can see, this drops any rows where there was no match."
msgstr ""

#: ../../source/user_guide/merging.rst:1046
msgid "Joining a single Index to a MultiIndex"
msgstr ""

#: ../../source/user_guide/merging.rst:1048
msgid "You can join a singly-indexed ``DataFrame`` with a level of a MultiIndexed ``DataFrame``. The level will match on the name of the index of the singly-indexed frame against a level name of the MultiIndexed frame."
msgstr ""

#: ../../source/user_guide/merging.rst:1078
msgid "This is equivalent but less verbose and more memory efficient / faster than this."
msgstr ""

#: ../../source/user_guide/merging.rst:1096
msgid "Joining with two MultiIndexes"
msgstr ""

#: ../../source/user_guide/merging.rst:1098
msgid "This is supported in a limited way, provided that the index for the right argument is completely used in the join, and is a subset of the indices in the left argument, as in this example:"
msgstr ""

#: ../../source/user_guide/merging.rst:1118
msgid "If that condition is not satisfied, a join with two multi-indexes can be done using the following code."
msgstr ""

#: ../../source/user_guide/merging.rst:1151
msgid "Merging on a combination of columns and index levels"
msgstr ""

#: ../../source/user_guide/merging.rst:1153
msgid "Strings passed as the ``on``, ``left_on``, and ``right_on`` parameters may refer to either column names or index level names.  This enables merging ``DataFrame`` instances on a combination of index levels and columns without resetting indexes."
msgstr ""

#: ../../source/user_guide/merging.rst:1193
msgid "When DataFrames are merged on a string that matches an index level in both frames, the index level is preserved as an index level in the resulting DataFrame."
msgstr ""

#: ../../source/user_guide/merging.rst:1198
msgid "When DataFrames are merged using only some of the levels of a ``MultiIndex``, the extra levels will be dropped from the resulting merge. In order to preserve those levels, use ``reset_index`` on those level names to move those levels to columns prior to doing the merge."
msgstr ""

#: ../../source/user_guide/merging.rst:1205
msgid "If a string matches both a column name and an index level name, then a warning is issued and the column takes precedence. This will result in an ambiguity error in a future version."
msgstr ""

#: ../../source/user_guide/merging.rst:1210
msgid "Overlapping value columns"
msgstr ""

#: ../../source/user_guide/merging.rst:1212
msgid "The merge ``suffixes`` argument takes a tuple of list of strings to append to overlapping column names in the input ``DataFrame``\\ s to disambiguate the result columns:"
msgstr ""

#: ../../source/user_guide/merging.rst:1241
msgid ":meth:`DataFrame.join` has ``lsuffix`` and ``rsuffix`` arguments which behave similarly."
msgstr ""

#: ../../source/user_guide/merging.rst:1260
msgid "Joining multiple DataFrames"
msgstr ""

#: ../../source/user_guide/merging.rst:1262
msgid "A list or tuple of ``DataFrames`` can also be passed to :meth:`~DataFrame.join` to join them together on their indexes."
msgstr ""

#: ../../source/user_guide/merging.rst:1285
msgid "Merging together values within Series or DataFrame columns"
msgstr ""

#: ../../source/user_guide/merging.rst:1287
msgid "Another fairly common situation is to have two like-indexed (or similarly indexed) ``Series`` or ``DataFrame`` objects and wanting to \"patch\" values in one object from values for matching indices in the other. Here is an example:"
msgstr ""

#: ../../source/user_guide/merging.rst:1298
msgid "For this, use the :meth:`~DataFrame.combine_first` method:"
msgstr ""

#: ../../source/user_guide/merging.rst:1311
msgid "Note that this method only takes values from the right ``DataFrame`` if they are missing in the left ``DataFrame``. A related method, :meth:`~DataFrame.update`, alters non-NA values in place:"
msgstr ""

#: ../../source/user_guide/merging.rst:1334
msgid "Timeseries friendly merging"
msgstr ""

#: ../../source/user_guide/merging.rst:1339
msgid "Merging ordered data"
msgstr ""

#: ../../source/user_guide/merging.rst:1341
msgid "A :func:`merge_ordered` function allows combining time series and other ordered data. In particular it has an optional ``fill_method`` keyword to fill/interpolate missing data:"
msgstr ""

#: ../../source/user_guide/merging.rst:1358
msgid "Merging asof"
msgstr ""

#: ../../source/user_guide/merging.rst:1360
msgid "A :func:`merge_asof` is similar to an ordered left-join except that we match on nearest key rather than equal keys. For each row in the ``left`` ``DataFrame``, we select the last row in the ``right`` ``DataFrame`` whose ``on`` key is less than the left's key. Both DataFrames must be sorted by the key."
msgstr ""

#: ../../source/user_guide/merging.rst:1365
msgid "Optionally an asof merge can perform a group-wise merge. This matches the ``by`` key equally, in addition to the nearest match on the ``on`` key."
msgstr ""

#: ../../source/user_guide/merging.rst:1368
msgid "For example; we might have ``trades`` and ``quotes`` and we want to ``asof`` merge them."
msgstr ""

#: ../../source/user_guide/merging.rst:1417
msgid "By default we are taking the asof of the quotes."
msgstr ""

#: ../../source/user_guide/merging.rst:1423
msgid "We only asof within ``2ms`` between the quote time and the trade time."
msgstr ""

#: ../../source/user_guide/merging.rst:1429
msgid "We only asof within ``10ms`` between the quote time and the trade time and we exclude exact matches on time. Note that though we exclude the exact matches (of the quotes), prior quotes **do** propagate to that point in time."
msgstr ""

#: ../../source/user_guide/merging.rst:1447
msgid "Comparing objects"
msgstr ""

#: ../../source/user_guide/merging.rst:1449
msgid "The :meth:`~Series.compare` and :meth:`~DataFrame.compare` methods allow you to compare two DataFrame or Series, respectively, and summarize their differences."
msgstr ""

#: ../../source/user_guide/merging.rst:1452
msgid "For example, you might want to compare two ``DataFrame`` and stack their differences side by side."
msgstr ""

#: ../../source/user_guide/merging.rst:1478
msgid "By default, if two corresponding values are equal, they will be shown as ``NaN``. Furthermore, if all values in an entire row / column, the row / column will be omitted from the result. The remaining differences will be aligned on columns."
msgstr ""

#: ../../source/user_guide/merging.rst:1482
msgid "If you wish, you may choose to stack the differences on rows."
msgstr ""

#: ../../source/user_guide/merging.rst:1488
msgid "If you wish to keep all original rows and columns, set ``keep_shape`` argument to ``True``."
msgstr ""

#: ../../source/user_guide/merging.rst:1495
msgid "You may also keep all the original values even if they are equal."
msgstr ""
