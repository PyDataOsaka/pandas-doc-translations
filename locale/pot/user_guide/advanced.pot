# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/user_guide/advanced.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/user_guide/advanced.rst:7
msgid "MultiIndex / advanced indexing"
msgstr ""

#: ../../source/user_guide/advanced.rst:9
msgid "This section covers :ref:`indexing with a MultiIndex <advanced.hierarchical>` and :ref:`other advanced indexing features <advanced.index_types>`."
msgstr ""

#: ../../source/user_guide/advanced.rst:12
msgid "See the :ref:`Indexing and Selecting Data <indexing>` for general indexing documentation."
msgstr ""

#: ../../source/user_guide/advanced.rst:16
msgid "Whether a copy or a reference is returned for a setting operation may depend on the context.  This is sometimes called ``chained assignment`` and should be avoided.  See :ref:`Returning a View versus Copy <indexing.view_versus_copy>`."
msgstr ""

#: ../../source/user_guide/advanced.rst:21
msgid "See the :ref:`cookbook<cookbook.selection>` for some advanced strategies."
msgstr ""

#: ../../source/user_guide/advanced.rst:26
msgid "Hierarchical indexing (MultiIndex)"
msgstr ""

#: ../../source/user_guide/advanced.rst:28
msgid "Hierarchical / Multi-level indexing is very exciting as it opens the door to some quite sophisticated data analysis and manipulation, especially for working with higher dimensional data. In essence, it enables you to store and manipulate data with an arbitrary number of dimensions in lower dimensional data structures like ``Series`` (1d) and ``DataFrame`` (2d)."
msgstr ""

#: ../../source/user_guide/advanced.rst:34
msgid "In this section, we will show what exactly we mean by \"hierarchical\" indexing and how it integrates with all of the pandas indexing functionality described above and in prior sections. Later, when discussing :ref:`group by <groupby>` and :ref:`pivoting and reshaping data <reshaping>`, we'll show non-trivial applications to illustrate how it aids in structuring data for analysis."
msgstr ""

#: ../../source/user_guide/advanced.rst:41
msgid "See the :ref:`cookbook<cookbook.multi_index>` for some advanced strategies."
msgstr ""

#: ../../source/user_guide/advanced.rst:44
msgid "Creating a MultiIndex (hierarchical index) object"
msgstr ""

#: ../../source/user_guide/advanced.rst:46
msgid "The :class:`MultiIndex` object is the hierarchical analogue of the standard :class:`Index` object which typically stores the axis labels in pandas objects. You can think of ``MultiIndex`` as an array of tuples where each tuple is unique. A ``MultiIndex`` can be created from a list of arrays (using :meth:`MultiIndex.from_arrays`), an array of tuples (using :meth:`MultiIndex.from_tuples`), a crossed set of iterables (using :meth:`MultiIndex.from_product`), or a :class:`DataFrame` (using :meth:`MultiIndex.from_frame`).  The ``Index`` constructor will attempt to return a ``MultiIndex`` when it is passed a list of tuples.  The following examples demonstrate different ways to initialize MultiIndexes."
msgstr ""

#: ../../source/user_guide/advanced.rst:73
msgid "When you want every pairing of the elements in two iterables, it can be easier to use the :meth:`MultiIndex.from_product` method:"
msgstr ""

#: ../../source/user_guide/advanced.rst:81
msgid "You can also construct a ``MultiIndex`` from a ``DataFrame`` directly, using the method :meth:`MultiIndex.from_frame`. This is a complementary method to :meth:`MultiIndex.to_frame`."
msgstr ""

#: ../../source/user_guide/advanced.rst:93
msgid "As a convenience, you can pass a list of arrays directly into ``Series`` or ``DataFrame`` to construct a ``MultiIndex`` automatically:"
msgstr ""

#: ../../source/user_guide/advanced.rst:107
msgid "All of the ``MultiIndex`` constructors accept a ``names`` argument which stores string names for the levels themselves. If no names are provided, ``None`` will be assigned:"
msgstr ""

#: ../../source/user_guide/advanced.rst:115
msgid "This index can back any axis of a pandas object, and the number of **levels** of the index is up to you:"
msgstr ""

#: ../../source/user_guide/advanced.rst:124
msgid "We've \"sparsified\" the higher levels of the indexes to make the console output a bit easier on the eyes. Note that how the index is displayed can be controlled using the ``multi_sparse`` option in ``pandas.set_options()``:"
msgstr ""

#: ../../source/user_guide/advanced.rst:133
msgid "It's worth keeping in mind that there's nothing preventing you from using tuples as atomic labels on an axis:"
msgstr ""

#: ../../source/user_guide/advanced.rst:140
msgid "The reason that the ``MultiIndex`` matters is that it can allow you to do grouping, selection, and reshaping operations as we will describe below and in subsequent areas of the documentation. As you will see in later sections, you can find yourself working with hierarchically-indexed data without creating a ``MultiIndex`` explicitly yourself. However, when loading data from a file, you may wish to generate your own ``MultiIndex`` when preparing the data set."
msgstr ""

#: ../../source/user_guide/advanced.rst:150
msgid "Reconstructing the level labels"
msgstr ""

#: ../../source/user_guide/advanced.rst:152
msgid "The method :meth:`~MultiIndex.get_level_values` will return a vector of the labels for each location at a particular level:"
msgstr ""

#: ../../source/user_guide/advanced.rst:161
msgid "Basic indexing on axis with MultiIndex"
msgstr ""

#: ../../source/user_guide/advanced.rst:163
msgid "One of the important features of hierarchical indexing is that you can select data by a \"partial\" label identifying a subgroup in the data. **Partial** selection \"drops\" levels of the hierarchical index in the result in a completely analogous way to selecting a column in a regular DataFrame:"
msgstr ""

#: ../../source/user_guide/advanced.rst:175
msgid "See :ref:`Cross-section with hierarchical index <advanced.xs>` for how to select on a deeper level."
msgstr ""

#: ../../source/user_guide/advanced.rst:181
msgid "Defined levels"
msgstr ""

#: ../../source/user_guide/advanced.rst:183
msgid "The :class:`MultiIndex` keeps all the defined levels of an index, even if they are not actually used. When slicing an index, you may notice this. For example:"
msgstr ""

#: ../../source/user_guide/advanced.rst:193
msgid "This is done to avoid a recomputation of the levels in order to make slicing highly performant. If you want to see only the used levels, you can use the :meth:`~MultiIndex.get_level_values` method."
msgstr ""

#: ../../source/user_guide/advanced.rst:204
msgid "To reconstruct the ``MultiIndex`` with only the used levels, the :meth:`~MultiIndex.remove_unused_levels` method may be used."
msgstr ""

#: ../../source/user_guide/advanced.rst:213
msgid "Data alignment and using ``reindex``"
msgstr ""

#: ../../source/user_guide/advanced.rst:215
msgid "Operations between differently-indexed objects having ``MultiIndex`` on the axes will work as you expect; data alignment will work the same as an Index of tuples:"
msgstr ""

#: ../../source/user_guide/advanced.rst:224
msgid "The :meth:`~DataFrame.reindex` method of ``Series``/``DataFrames`` can be called with another ``MultiIndex``, or even a list or array of tuples:"
msgstr ""

#: ../../source/user_guide/advanced.rst:235
msgid "Advanced indexing with hierarchical index"
msgstr ""

#: ../../source/user_guide/advanced.rst:237
msgid "Syntactically integrating ``MultiIndex`` in advanced indexing with ``.loc`` is a bit challenging, but we've made every effort to do so. In general, MultiIndex keys take the form of tuples. For example, the following works as you would expect:"
msgstr ""

#: ../../source/user_guide/advanced.rst:247
msgid "Note that ``df.loc['bar', 'two']`` would also work in this example, but this shorthand notation can lead to ambiguity in general."
msgstr ""

#: ../../source/user_guide/advanced.rst:250
msgid "If you also want to index a specific column with ``.loc``, you must use a tuple like this:"
msgstr ""

#: ../../source/user_guide/advanced.rst:257
msgid "You don't have to specify all levels of the ``MultiIndex`` by passing only the first elements of the tuple. For example, you can use \"partial\" indexing to get all elements with ``bar`` in the first level as follows:"
msgstr ""

#: ../../source/user_guide/advanced.rst:265
msgid "This is a shortcut for the slightly more verbose notation ``df.loc[('bar',),]`` (equivalent to ``df.loc['bar',]`` in this example)."
msgstr ""

#: ../../source/user_guide/advanced.rst:268
msgid "\"Partial\" slicing also works quite nicely."
msgstr ""

#: ../../source/user_guide/advanced.rst:274
msgid "You can slice with a 'range' of values, by providing a slice of tuples."
msgstr ""

#: ../../source/user_guide/advanced.rst:281
msgid "Passing a list of labels or tuples works similar to reindexing:"
msgstr ""

#: ../../source/user_guide/advanced.rst:289
msgid "It is important to note that tuples and lists are not treated identically in pandas when it comes to indexing. Whereas a tuple is interpreted as one multi-level key, a list is used to specify several keys. Or in other words, tuples go horizontally (traversing levels), lists go vertically (scanning levels)."
msgstr ""

#: ../../source/user_guide/advanced.rst:294
msgid "Importantly, a list of tuples indexes several complete ``MultiIndex`` keys, whereas a tuple of lists refer to several values within a level:"
msgstr ""

#: ../../source/user_guide/advanced.rst:310
msgid "Using slicers"
msgstr ""

#: ../../source/user_guide/advanced.rst:312
msgid "You can slice a ``MultiIndex`` by providing multiple indexers."
msgstr ""

#: ../../source/user_guide/advanced.rst:314
msgid "You can provide any of the selectors as if you are indexing by label, see :ref:`Selection by Label <indexing.label>`, including slices, lists of labels, labels, and boolean indexers."
msgstr ""

#: ../../source/user_guide/advanced.rst:317
msgid "You can use ``slice(None)`` to select all the contents of *that* level. You do not need to specify all the *deeper* levels, they will be implied as ``slice(None)``."
msgstr ""

#: ../../source/user_guide/advanced.rst:320
msgid "As usual, **both sides** of the slicers are included as this is label indexing."
msgstr ""

#: ../../source/user_guide/advanced.rst:324
msgid "You should specify all axes in the ``.loc`` specifier, meaning the indexer for the **index** and for the **columns**. There are some ambiguous cases where the passed indexer could be misinterpreted as indexing *both* axes, rather than into say the ``MultiIndex`` for the rows."
msgstr ""

#: ../../source/user_guide/advanced.rst:328
msgid "You should do this:"
msgstr ""

#: ../../source/user_guide/advanced.rst:334
msgid "You should **not** do this:"
msgstr ""

#: ../../source/user_guide/advanced.rst:365
msgid "Basic MultiIndex slicing using slices, lists, and labels."
msgstr ""

#: ../../source/user_guide/advanced.rst:372
msgid "You can use :class:`pandas.IndexSlice` to facilitate a more natural syntax using ``:``, rather than using ``slice(None)``."
msgstr ""

#: ../../source/user_guide/advanced.rst:380
msgid "It is possible to perform quite complicated selections using this method on multiple axes at the same time."
msgstr ""

#: ../../source/user_guide/advanced.rst:388
msgid "Using a boolean indexer you can provide selection related to the *values*."
msgstr ""

#: ../../source/user_guide/advanced.rst:395
msgid "You can also specify the ``axis`` argument to ``.loc`` to interpret the passed slicers on a single axis."
msgstr ""

#: ../../source/user_guide/advanced.rst:402
msgid "Furthermore, you can *set* the values using the following methods."
msgstr ""

#: ../../source/user_guide/advanced.rst:410
msgid "You can use a right-hand-side of an alignable object as well."
msgstr ""

#: ../../source/user_guide/advanced.rst:421
msgid "Cross-section"
msgstr ""

#: ../../source/user_guide/advanced.rst:423
msgid "The :meth:`~DataFrame.xs` method of ``DataFrame`` additionally takes a level argument to make selecting data at a particular level of a ``MultiIndex`` easier."
msgstr ""

#: ../../source/user_guide/advanced.rst:436
msgid "You can also select on the columns with ``xs``, by providing the axis argument."
msgstr ""

#: ../../source/user_guide/advanced.rst:449
msgid "``xs`` also allows selection with multiple keys."
msgstr ""

#: ../../source/user_guide/advanced.rst:460
msgid "You can pass ``drop_level=False`` to ``xs`` to retain the level that was selected."
msgstr ""

#: ../../source/user_guide/advanced.rst:467
msgid "Compare the above with the result using ``drop_level=True`` (the default value)."
msgstr ""

#: ../../source/user_guide/advanced.rst:476
msgid "Advanced reindexing and alignment"
msgstr ""

#: ../../source/user_guide/advanced.rst:478
msgid "Using the parameter ``level`` in the :meth:`~DataFrame.reindex` and :meth:`~DataFrame.align` methods of pandas objects is useful to broadcast values across a level. For instance:"
msgstr ""

#: ../../source/user_guide/advanced.rst:500
msgid "Swapping levels with ``swaplevel``"
msgstr ""

#: ../../source/user_guide/advanced.rst:502
msgid "The :meth:`~MultiIndex.swaplevel` method can switch the order of two levels:"
msgstr ""

#: ../../source/user_guide/advanced.rst:512
msgid "Reordering levels with ``reorder_levels``"
msgstr ""

#: ../../source/user_guide/advanced.rst:514
msgid "The :meth:`~MultiIndex.reorder_levels` method generalizes the ``swaplevel`` method, allowing you to permute the hierarchical index levels in one step:"
msgstr ""

#: ../../source/user_guide/advanced.rst:524
msgid "Renaming names of an ``Index`` or ``MultiIndex``"
msgstr ""

#: ../../source/user_guide/advanced.rst:526
msgid "The :meth:`~DataFrame.rename` method is used to rename the labels of a ``MultiIndex``, and is typically used to rename the columns of a ``DataFrame``. The ``columns`` argument of ``rename`` allows a dictionary to be specified that includes only the columns you wish to rename."
msgstr ""

#: ../../source/user_guide/advanced.rst:535
msgid "This method can also be used to rename specific labels of the main index of the ``DataFrame``."
msgstr ""

#: ../../source/user_guide/advanced.rst:542
msgid "The :meth:`~DataFrame.rename_axis` method is used to rename the name of a ``Index`` or ``MultiIndex``. In particular, the names of the levels of a ``MultiIndex`` can be specified, which is useful if ``reset_index()`` is later used to move the values from the ``MultiIndex`` to a column."
msgstr ""

#: ../../source/user_guide/advanced.rst:551
msgid "Note that the columns of a ``DataFrame`` are an index, so that using ``rename_axis`` with the ``columns`` argument will change the name of that index."
msgstr ""

#: ../../source/user_guide/advanced.rst:559
msgid "Both ``rename`` and ``rename_axis`` support specifying a dictionary, ``Series`` or a mapping function to map labels/names to new values."
msgstr ""

#: ../../source/user_guide/advanced.rst:562
msgid "When working with an ``Index`` object directly, rather than via a ``DataFrame``, :meth:`Index.set_names` can be used to change the names."
msgstr ""

#: ../../source/user_guide/advanced.rst:574
msgid "You cannot set the names of the MultiIndex via a level."
msgstr ""

#: ../../source/user_guide/advanced.rst:581
msgid "Use :meth:`Index.set_names` instead."
msgstr ""

#: ../../source/user_guide/advanced.rst:584
msgid "Sorting a ``MultiIndex``"
msgstr ""

#: ../../source/user_guide/advanced.rst:586
msgid "For :class:`MultiIndex`-ed objects to be indexed and sliced effectively, they need to be sorted. As with any index, you can use :meth:`~DataFrame.sort_index`."
msgstr ""

#: ../../source/user_guide/advanced.rst:602
msgid "You may also pass a level name to ``sort_index`` if the ``MultiIndex`` levels are named."
msgstr ""

#: ../../source/user_guide/advanced.rst:611
msgid "On higher dimensional objects, you can sort any of the other axes by level if they have a ``MultiIndex``:"
msgstr ""

#: ../../source/user_guide/advanced.rst:618
msgid "Indexing will work even if the data are not sorted, but will be rather inefficient (and show a ``PerformanceWarning``). It will also return a copy of the data rather than a view:"
msgstr ""

#: ../../source/user_guide/advanced.rst:634
msgid "Furthermore, if you try to index something that is not fully lexsorted, this can raise:"
msgstr ""

#: ../../source/user_guide/advanced.rst:641
msgid "The :meth:`~MultiIndex.is_monotonic_increasing` method on a ``MultiIndex`` shows if the index is sorted:"
msgstr ""

#: ../../source/user_guide/advanced.rst:654
msgid "And now selection works as expected."
msgstr ""

#: ../../source/user_guide/advanced.rst:661
msgid "Take methods"
msgstr ""

#: ../../source/user_guide/advanced.rst:665
msgid "Similar to NumPy ndarrays, pandas ``Index``, ``Series``, and ``DataFrame`` also provides the :meth:`~DataFrame.take` method that retrieves elements along a given axis at the given indices. The given indices must be either a list or an ndarray of integer index positions. ``take`` will also accept negative integers as relative positions to the end of the object."
msgstr ""

#: ../../source/user_guide/advanced.rst:685
msgid "For DataFrames, the given indices should be a 1d list or ndarray that specifies row or column positions."
msgstr ""

#: ../../source/user_guide/advanced.rst:696
msgid "It is important to note that the ``take`` method on pandas objects are not intended to work on boolean indices and may return unexpected results."
msgstr ""

#: ../../source/user_guide/advanced.rst:709
msgid "Finally, as a small note on performance, because the ``take`` method handles a narrower range of inputs, it can offer performance that is a good deal faster than fancy indexing."
msgstr ""

#: ../../source/user_guide/advanced.rst:731
msgid "Index types"
msgstr ""

#: ../../source/user_guide/advanced.rst:733
msgid "We have discussed ``MultiIndex`` in the previous sections pretty extensively. Documentation about ``DatetimeIndex`` and ``PeriodIndex`` are shown :ref:`here <timeseries.overview>`, and documentation about ``TimedeltaIndex`` is found :ref:`here <timedeltas.index>`."
msgstr ""

#: ../../source/user_guide/advanced.rst:737
msgid "In the following sub-sections we will highlight some other index types."
msgstr ""

#: ../../source/user_guide/advanced.rst:742
msgid "CategoricalIndex"
msgstr ""

#: ../../source/user_guide/advanced.rst:744
msgid ":class:`CategoricalIndex` is a type of index that is useful for supporting indexing with duplicates. This is a container around a :class:`Categorical` and allows efficient indexing and storage of an index with a large number of duplicated elements."
msgstr ""

#: ../../source/user_guide/advanced.rst:758
msgid "Setting the index will create a ``CategoricalIndex``."
msgstr ""

#: ../../source/user_guide/advanced.rst:765
msgid "Indexing with ``__getitem__/.iloc/.loc`` works similarly to an ``Index`` with duplicates. The indexers **must** be in the category or the operation will raise a ``KeyError``."
msgstr ""

#: ../../source/user_guide/advanced.rst:772
msgid "The ``CategoricalIndex`` is **preserved** after indexing:"
msgstr ""

#: ../../source/user_guide/advanced.rst:778
msgid "Sorting the index will sort by the order of the categories (recall that we created the index with ``CategoricalDtype(list('cab'))``, so the sorted order is ``cab``)."
msgstr ""

#: ../../source/user_guide/advanced.rst:786
msgid "Groupby operations on the index will preserve the index nature as well."
msgstr ""

#: ../../source/user_guide/advanced.rst:793
msgid "Reindexing operations will return a resulting index based on the type of the passed indexer. Passing a list will return a plain-old ``Index``; indexing with a ``Categorical`` will return a ``CategoricalIndex``, indexed according to the categories of the **passed** ``Categorical`` dtype. This allows one to arbitrarily index these even with values **not** in the categories, similarly to how you can reindex **any** pandas index."
msgstr ""

#: ../../source/user_guide/advanced.rst:816
msgid "Reshaping and Comparison operations on a ``CategoricalIndex`` must have the same categories or a ``TypeError`` will be raised."
msgstr ""

#: ../../source/user_guide/advanced.rst:839
msgid "RangeIndex"
msgstr ""

#: ../../source/user_guide/advanced.rst:841
msgid ":class:`RangeIndex` is a sub-class of :class:`Index`  that provides the default index for all :class:`DataFrame` and :class:`Series` objects. ``RangeIndex`` is an optimized version of ``Index`` that can represent a monotonic ordered set. These are analogous to Python `range types <https://docs.python.org/3/library/stdtypes.html#typesseq-range>`__. A ``RangeIndex`` will always have an ``int64`` dtype."
msgstr ""

#: ../../source/user_guide/advanced.rst:850
msgid "``RangeIndex`` is the default index for all :class:`DataFrame` and :class:`Series` objects:"
msgstr ""

#: ../../source/user_guide/advanced.rst:860
msgid "A ``RangeIndex`` will behave similarly to a :class:`Index` with an ``int64`` dtype and operations on a ``RangeIndex``, whose result cannot be represented by a ``RangeIndex``, but should have an integer dtype, will be converted to an ``Index`` with ``int64``. For example:"
msgstr ""

#: ../../source/user_guide/advanced.rst:872
msgid "IntervalIndex"
msgstr ""

#: ../../source/user_guide/advanced.rst:874
msgid ":class:`IntervalIndex` together with its own dtype, :class:`~pandas.api.types.IntervalDtype` as well as the :class:`Interval` scalar type,  allow first-class support in pandas for interval notation."
msgstr ""

#: ../../source/user_guide/advanced.rst:878
msgid "The ``IntervalIndex`` allows some unique indexing and is also used as a return type for the categories in :func:`cut` and :func:`qcut`."
msgstr ""

#: ../../source/user_guide/advanced.rst:882
msgid "Indexing with an ``IntervalIndex``"
msgstr ""

#: ../../source/user_guide/advanced.rst:884
msgid "An ``IntervalIndex`` can be used in ``Series`` and in ``DataFrame`` as the index."
msgstr ""

#: ../../source/user_guide/advanced.rst:893
msgid "Label based indexing via ``.loc`` along the edges of an interval works as you would expect, selecting that particular interval."
msgstr ""

#: ../../source/user_guide/advanced.rst:901
msgid "If you select a label *contained* within an interval, this will also select the interval."
msgstr ""

#: ../../source/user_guide/advanced.rst:908
msgid "Selecting using an ``Interval`` will only return exact matches."
msgstr ""

#: ../../source/user_guide/advanced.rst:914
msgid "Trying to select an ``Interval`` that is not exactly contained in the ``IntervalIndex`` will raise a ``KeyError``."
msgstr ""

#: ../../source/user_guide/advanced.rst:921
msgid "Selecting all ``Intervals`` that overlap a given ``Interval`` can be performed using the :meth:`~IntervalIndex.overlaps` method to create a boolean indexer."
msgstr ""

#: ../../source/user_guide/advanced.rst:931
msgid "Binning data with ``cut`` and ``qcut``"
msgstr ""

#: ../../source/user_guide/advanced.rst:933
msgid ":func:`cut` and :func:`qcut` both return a ``Categorical`` object, and the bins they create are stored as an ``IntervalIndex`` in its ``.categories`` attribute."
msgstr ""

#: ../../source/user_guide/advanced.rst:942
msgid ":func:`cut` also accepts an ``IntervalIndex`` for its ``bins`` argument, which enables a useful pandas idiom. First, We call :func:`cut` with some data and ``bins`` set to a fixed number, to generate the bins. Then, we pass the values of ``.categories`` as the ``bins`` argument in subsequent calls to :func:`cut`, supplying new data which will be binned into the same bins."
msgstr ""

#: ../../source/user_guide/advanced.rst:952
msgid "Any value which falls outside all bins will be assigned a ``NaN`` value."
msgstr ""

#: ../../source/user_guide/advanced.rst:955
msgid "Generating ranges of intervals"
msgstr ""

#: ../../source/user_guide/advanced.rst:957
msgid "If we need intervals on a regular frequency, we can use the :func:`interval_range` function to create an ``IntervalIndex`` using various combinations of ``start``, ``end``, and ``periods``. The default frequency for ``interval_range`` is a 1 for numeric intervals, and calendar day for datetime-like intervals:"
msgstr ""

#: ../../source/user_guide/advanced.rst:970
msgid "The ``freq`` parameter can used to specify non-default frequencies, and can utilize a variety of :ref:`frequency aliases <timeseries.offset_aliases>` with datetime-like intervals:"
msgstr ""

#: ../../source/user_guide/advanced.rst:981
msgid "Additionally, the ``closed`` parameter can be used to specify which side(s) the intervals are closed on.  Intervals are closed on the right side by default."
msgstr ""

#: ../../source/user_guide/advanced.rst:990
msgid "Specifying ``start``, ``end``, and ``periods`` will generate a range of evenly spaced intervals from ``start`` to ``end`` inclusively, with ``periods`` number of elements in the resulting ``IntervalIndex``:"
msgstr ""

#: ../../source/user_guide/advanced.rst:1001
msgid "Miscellaneous indexing FAQ"
msgstr ""

#: ../../source/user_guide/advanced.rst:1004
msgid "Integer indexing"
msgstr ""

#: ../../source/user_guide/advanced.rst:1006
msgid "Label-based indexing with integer axis labels is a thorny topic. It has been discussed heavily on mailing lists and among various members of the scientific Python community. In pandas, our general viewpoint is that labels matter more than integer locations. Therefore, with an integer axis index *only* label-based indexing is possible with the standard tools like ``.loc``. The following code will generate exceptions:"
msgstr ""

#: ../../source/user_guide/advanced.rst:1022
msgid "This deliberate decision was made to prevent ambiguities and subtle bugs (many users reported finding bugs when the API change was made to stop \"falling back\" on position-based indexing)."
msgstr ""

#: ../../source/user_guide/advanced.rst:1027
msgid "Non-monotonic indexes require exact matches"
msgstr ""

#: ../../source/user_guide/advanced.rst:1029
msgid "If the index of a ``Series`` or ``DataFrame`` is monotonically increasing or decreasing, then the bounds of a label-based slice can be outside the range of the index, much like slice indexing a normal Python ``list``. Monotonicity of an index can be tested with the :meth:`~Index.is_monotonic_increasing` and :meth:`~Index.is_monotonic_decreasing` attributes."
msgstr ""

#: ../../source/user_guide/advanced.rst:1045
msgid "On the other hand, if the index is not monotonic, then both slice bounds must be *unique* members of the index."
msgstr ""

#: ../../source/user_guide/advanced.rst:1065
msgid "``Index.is_monotonic_increasing`` and ``Index.is_monotonic_decreasing`` only check that an index is weakly monotonic. To check for strict monotonicity, you can combine one of those with the :meth:`~Index.is_unique` attribute."
msgstr ""

#: ../../source/user_guide/advanced.rst:1079
msgid "Endpoints are inclusive"
msgstr ""

#: ../../source/user_guide/advanced.rst:1081
msgid "Compared with standard Python sequence slicing in which the slice endpoint is not inclusive, label-based slicing in pandas **is inclusive**. The primary reason for this is that it is often not possible to easily determine the \"successor\" or next element after a particular label in an index. For example, consider the following ``Series``:"
msgstr ""

#: ../../source/user_guide/advanced.rst:1092
msgid "Suppose we wished to slice from ``c`` to ``e``, using integers this would be accomplished as such:"
msgstr ""

#: ../../source/user_guide/advanced.rst:1099
msgid "However, if you only had ``c`` and ``e``, determining the next element in the index can be somewhat complicated. For example, the following does not work:"
msgstr ""

#: ../../source/user_guide/advanced.rst:1107
msgid "A very common use case is to limit a time series to start and end at two specific dates. To enable this, we made the design choice to make label-based slicing include both endpoints:"
msgstr ""

#: ../../source/user_guide/advanced.rst:1115
msgid "This is most definitely a \"practicality beats purity\" sort of thing, but it is something to watch out for if you expect label-based slicing to behave exactly in the way that standard Python integer slicing works."
msgstr ""

#: ../../source/user_guide/advanced.rst:1121
msgid "Indexing potentially changes underlying Series dtype"
msgstr ""

#: ../../source/user_guide/advanced.rst:1123
msgid "The different indexing operation can potentially change the dtype of a ``Series``."
msgstr ""

#: ../../source/user_guide/advanced.rst:1141
msgid "This is because the (re)indexing operations above silently inserts ``NaNs`` and the ``dtype`` changes accordingly.  This can cause some issues when using ``numpy`` ``ufuncs`` such as ``numpy.logical_and``."
msgstr ""

#: ../../source/user_guide/advanced.rst:1145
msgid "See the :issue:`2388` for a more detailed discussion."
msgstr ""
