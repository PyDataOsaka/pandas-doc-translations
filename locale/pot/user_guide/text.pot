# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/user_guide/text.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/user_guide/text.rst:7
msgid "Working with text data"
msgstr ""

#: ../../source/user_guide/text.rst:12
msgid "Text data types"
msgstr ""

#: ../../source/user_guide/text.rst:14
msgid "There are two ways to store text data in pandas:"
msgstr ""

#: ../../source/user_guide/text.rst:16
msgid "``object`` -dtype NumPy array."
msgstr ""

#: ../../source/user_guide/text.rst:17
msgid ":class:`StringDtype` extension type."
msgstr ""

#: ../../source/user_guide/text.rst:19
msgid "We recommend using :class:`StringDtype` to store text data."
msgstr ""

#: ../../source/user_guide/text.rst:21
msgid "Prior to pandas 1.0, ``object`` dtype was the only option. This was unfortunate for many reasons:"
msgstr ""

#: ../../source/user_guide/text.rst:24
msgid "You can accidentally store a *mixture* of strings and non-strings in an ``object`` dtype array. It's better to have a dedicated dtype."
msgstr ""

#: ../../source/user_guide/text.rst:26
msgid "``object`` dtype breaks dtype-specific operations like :meth:`DataFrame.select_dtypes`. There isn't a clear way to select *just* text while excluding non-text but still object-dtype columns."
msgstr ""

#: ../../source/user_guide/text.rst:29
msgid "When reading code, the contents of an ``object`` dtype array is less clear than ``'string'``."
msgstr ""

#: ../../source/user_guide/text.rst:32
msgid "Currently, the performance of ``object`` dtype arrays of strings and :class:`arrays.StringArray` are about the same. We expect future enhancements to significantly increase the performance and lower the memory overhead of :class:`~arrays.StringArray`."
msgstr ""

#: ../../source/user_guide/text.rst:39
msgid "``StringArray`` is currently considered experimental. The implementation and parts of the API may change without warning."
msgstr ""

#: ../../source/user_guide/text.rst:42
msgid "For backwards-compatibility, ``object`` dtype remains the default type we infer a list of strings to"
msgstr ""

#: ../../source/user_guide/text.rst:49
msgid "To explicitly request ``string`` dtype, specify the ``dtype``"
msgstr ""

#: ../../source/user_guide/text.rst:56
msgid "Or ``astype`` after the ``Series`` or ``DataFrame`` is created"
msgstr ""

#: ../../source/user_guide/text.rst:65
msgid "You can also use :class:`StringDtype`/``\"string\"`` as the dtype on non-string data and it will be converted to ``string`` dtype:"
msgstr ""

#: ../../source/user_guide/text.rst:74
msgid "or convert from existing pandas data:"
msgstr ""

#: ../../source/user_guide/text.rst:88
msgid "Behavior differences"
msgstr ""

#: ../../source/user_guide/text.rst:90
msgid "These are places where the behavior of ``StringDtype`` objects differ from ``object`` dtype"
msgstr ""

#: ../../source/user_guide/text.rst:93
msgid "For ``StringDtype``, :ref:`string accessor methods<api.series.str>` that return **numeric** output will always return a nullable integer dtype, rather than either int or float dtype, depending on the presence of NA values. Methods returning **boolean** output will return a nullable boolean dtype."
msgstr ""

#: ../../source/user_guide/text.rst:105
msgid "Both outputs are ``Int64`` dtype. Compare that with object-dtype"
msgstr ""

#: ../../source/user_guide/text.rst:113
msgid "When NA values are present, the output dtype is float64. Similarly for methods returning boolean values."
msgstr ""

#: ../../source/user_guide/text.rst:121
msgid "Some string methods, like :meth:`Series.str.decode` are not available on ``StringArray`` because ``StringArray`` only holds strings, not bytes."
msgstr ""

#: ../../source/user_guide/text.rst:124
msgid "In comparison operations, :class:`arrays.StringArray` and ``Series`` backed by a ``StringArray`` will return an object with :class:`BooleanDtype`, rather than a ``bool`` dtype object. Missing values in a ``StringArray`` will propagate in comparison operations, rather than always comparing unequal like :attr:`numpy.nan`."
msgstr ""

#: ../../source/user_guide/text.rst:130
msgid "Everything else that follows in the rest of this document applies equally to ``string`` and ``object`` dtype."
msgstr ""

#: ../../source/user_guide/text.rst:136
msgid "String methods"
msgstr ""

#: ../../source/user_guide/text.rst:138
msgid "Series and Index are equipped with a set of string processing methods that make it easy to operate on each element of the array. Perhaps most importantly, these methods exclude missing/NA values automatically. These are accessed via the ``str`` attribute and generally have names matching the equivalent (scalar) built-in string methods:"
msgstr ""

#: ../../source/user_guide/text.rst:160
msgid "The string methods on Index are especially useful for cleaning up or transforming DataFrame columns. For instance, you may have columns with leading or trailing whitespace:"
msgstr ""

#: ../../source/user_guide/text.rst:171
msgid "Since ``df.columns`` is an Index object, we can use the ``.str`` accessor"
msgstr ""

#: ../../source/user_guide/text.rst:178
msgid "These string methods can then be used to clean up the columns as needed. Here we are removing leading and trailing whitespaces, lower casing all names, and replacing any remaining whitespaces with underscores:"
msgstr ""

#: ../../source/user_guide/text.rst:189
msgid "If you have a ``Series`` where lots of elements are repeated (i.e. the number of unique elements in the ``Series`` is a lot smaller than the length of the ``Series``), it can be faster to convert the original ``Series`` to one of type ``category`` and then use ``.str.<method>`` or ``.dt.<property>`` on that. The performance difference comes from the fact that, for ``Series`` of type ``category``, the string operations are done on the ``.categories`` and not on each element of the ``Series``."
msgstr ""

#: ../../source/user_guide/text.rst:197
msgid "Please note that a ``Series`` of type ``category`` with string ``.categories`` has some limitations in comparison to ``Series`` of type string (e.g. you can't add strings to each other: ``s + \" \" + s`` won't work if ``s`` is a ``Series`` of type ``category``). Also, ``.str`` methods which operate on elements of type ``list`` are not available on such a ``Series``."
msgstr ""

#: ../../source/user_guide/text.rst:207
msgid "The type of the Series is inferred and the allowed types (i.e. strings)."
msgstr ""

#: ../../source/user_guide/text.rst:209
msgid "Generally speaking, the ``.str`` accessor is intended to work only on strings. With very few exceptions, other uses are not supported, and may be disabled at a later point."
msgstr ""

#: ../../source/user_guide/text.rst:215
msgid "Splitting and replacing strings"
msgstr ""

#: ../../source/user_guide/text.rst:217
msgid "Methods like ``split`` return a Series of lists:"
msgstr ""

#: ../../source/user_guide/text.rst:224
msgid "Elements in the split lists can be accessed using ``get`` or ``[]`` notation:"
msgstr ""

#: ../../source/user_guide/text.rst:231
msgid "It is easy to expand this to return a DataFrame using ``expand``."
msgstr ""

#: ../../source/user_guide/text.rst:237
msgid "When original ``Series`` has :class:`StringDtype`, the output columns will all be :class:`StringDtype` as well."
msgstr ""

#: ../../source/user_guide/text.rst:240
msgid "It is also possible to limit the number of splits:"
msgstr ""

#: ../../source/user_guide/text.rst:246
msgid "``rsplit`` is similar to ``split`` except it works in the reverse direction, i.e., from the end of the string to the beginning of the string:"
msgstr ""

#: ../../source/user_guide/text.rst:253
msgid "``replace`` optionally uses `regular expressions <https://docs.python.org/3/library/re.html>`__:"
msgstr ""

#: ../../source/user_guide/text.rst:268
msgid "Single character pattern with ``regex=True`` will also be treated as regular expressions:"
msgstr ""

#: ../../source/user_guide/text.rst:276
msgid "If you want literal replacement of a string (equivalent to :meth:`str.replace`), you can set the optional ``regex`` parameter to ``False``, rather than escaping each character. In this case both ``pat`` and ``repl`` must be strings:"
msgstr ""

#: ../../source/user_guide/text.rst:288
msgid "The ``replace`` method can also take a callable as replacement. It is called on every ``pat`` using :func:`re.sub`. The callable should expect one positional argument (a regex object) and return a string."
msgstr ""

#: ../../source/user_guide/text.rst:314
msgid "The ``replace`` method also accepts a compiled regular expression object from :func:`re.compile` as a pattern. All flags should be included in the compiled regular expression object."
msgstr ""

#: ../../source/user_guide/text.rst:325
msgid "Including a ``flags`` argument when calling ``replace`` with a compiled regular expression object will raise a ``ValueError``."
msgstr ""

#: ../../source/user_guide/text.rst:335
msgid "``removeprefix`` and ``removesuffix`` have the same effect as ``str.removeprefix`` and ``str.removesuffix`` added in Python 3.9 <https://docs.python.org/3/library/stdtypes.html#str.removeprefix>`__:"
msgstr ""

#: ../../source/user_guide/text.rst:351
msgid "Concatenation"
msgstr ""

#: ../../source/user_guide/text.rst:353
msgid "There are several ways to concatenate a ``Series`` or ``Index``, either with itself or others, all based on :meth:`~Series.str.cat`, resp. ``Index.str.cat``."
msgstr ""

#: ../../source/user_guide/text.rst:357
msgid "Concatenating a single Series into a string"
msgstr ""

#: ../../source/user_guide/text.rst:359
msgid "The content of a ``Series`` (or ``Index``) can be concatenated:"
msgstr ""

#: ../../source/user_guide/text.rst:366
msgid "If not specified, the keyword ``sep`` for the separator defaults to the empty string, ``sep=''``:"
msgstr ""

#: ../../source/user_guide/text.rst:372
msgid "By default, missing values are ignored. Using ``na_rep``, they can be given a representation:"
msgstr ""

#: ../../source/user_guide/text.rst:381
msgid "Concatenating a Series and something list-like into a Series"
msgstr ""

#: ../../source/user_guide/text.rst:383
msgid "The first argument to :meth:`~Series.str.cat` can be a list-like object, provided that it matches the length of the calling ``Series`` (or ``Index``)."
msgstr ""

#: ../../source/user_guide/text.rst:389
msgid "Missing values on either side will result in missing values in the result as well, *unless* ``na_rep`` is specified:"
msgstr ""

#: ../../source/user_guide/text.rst:397
msgid "Concatenating a Series and something array-like into a Series"
msgstr ""

#: ../../source/user_guide/text.rst:399
msgid "The parameter ``others`` can also be two-dimensional. In this case, the number or rows must match the lengths of the calling ``Series`` (or ``Index``)."
msgstr ""

#: ../../source/user_guide/text.rst:409
msgid "Concatenating a Series and an indexed object into a Series, with alignment"
msgstr ""

#: ../../source/user_guide/text.rst:411
msgid "For concatenation with a ``Series`` or ``DataFrame``, it is possible to align the indexes before concatenation by setting the ``join``-keyword."
msgstr ""

#: ../../source/user_guide/text.rst:423
msgid "The usual options are available for ``join`` (one of ``'left', 'outer', 'inner', 'right'``). In particular, alignment also means that the different lengths do not need to coincide anymore."
msgstr ""

#: ../../source/user_guide/text.rst:434
msgid "The same alignment can be used when ``others`` is a ``DataFrame``:"
msgstr ""

#: ../../source/user_guide/text.rst:444
msgid "Concatenating a Series and many objects into a Series"
msgstr ""

#: ../../source/user_guide/text.rst:446
msgid "Several array-like items (specifically: ``Series``, ``Index``, and 1-dimensional variants of ``np.ndarray``) can be combined in a list-like container (including iterators, ``dict``-views, etc.)."
msgstr ""

#: ../../source/user_guide/text.rst:455
msgid "All elements without an index (e.g. ``np.ndarray``) within the passed list-like must match in length to the calling ``Series`` (or ``Index``), but ``Series`` and ``Index`` may have arbitrary length (as long as alignment is not disabled with ``join=None``):"
msgstr ""

#: ../../source/user_guide/text.rst:463
msgid "If using ``join='right'`` on a list-like of ``others`` that contains different indexes, the union of these indexes will be used as the basis for the final concatenation:"
msgstr ""

#: ../../source/user_guide/text.rst:473
msgid "Indexing with ``.str``"
msgstr ""

#: ../../source/user_guide/text.rst:477
msgid "You can use ``[]`` notation to directly index by position locations. If you index past the end of the string, the result will be a ``NaN``."
msgstr ""

#: ../../source/user_guide/text.rst:491
msgid "Extracting substrings"
msgstr ""

#: ../../source/user_guide/text.rst:496
msgid "Extract first match in each subject (extract)"
msgstr ""

#: ../../source/user_guide/text.rst:498
msgid "The ``extract`` method accepts a `regular expression <https://docs.python.org/3/library/re.html>`__ with at least one capture group."
msgstr ""

#: ../../source/user_guide/text.rst:502
msgid "Extracting a regular expression with more than one group returns a DataFrame with one column per group."
msgstr ""

#: ../../source/user_guide/text.rst:512
msgid "Elements that do not match return a row filled with ``NaN``. Thus, a Series of messy strings can be \"converted\" into a like-indexed Series or DataFrame of cleaned-up or more useful strings, without necessitating ``get()`` to access tuples or ``re.match`` objects. The dtype of the result is always object, even if no match is found and the result only contains ``NaN``."
msgstr ""

#: ../../source/user_guide/text.rst:519
msgid "Named groups like"
msgstr ""

#: ../../source/user_guide/text.rst:527
msgid "and optional groups like"
msgstr ""

#: ../../source/user_guide/text.rst:536
msgid "can also be used. Note that any capture group names in the regular expression will be used for column names; otherwise capture group numbers will be used."
msgstr ""

#: ../../source/user_guide/text.rst:540
msgid "Extracting a regular expression with one group returns a ``DataFrame`` with one column if ``expand=True``."
msgstr ""

#: ../../source/user_guide/text.rst:547
msgid "It returns a Series if ``expand=False``."
msgstr ""

#: ../../source/user_guide/text.rst:553
msgid "Calling on an ``Index`` with a regex with exactly one capture group returns a ``DataFrame`` with one column if ``expand=True``."
msgstr ""

#: ../../source/user_guide/text.rst:562
msgid "It returns an ``Index`` if ``expand=False``."
msgstr ""

#: ../../source/user_guide/text.rst:568
msgid "Calling on an ``Index`` with a regex with more than one capture group returns a ``DataFrame`` if ``expand=True``."
msgstr ""

#: ../../source/user_guide/text.rst:575
msgid "It raises ``ValueError`` if ``expand=False``."
msgstr ""

#: ../../source/user_guide/text.rst:582
msgid "The table below summarizes the behavior of ``extract(expand=False)`` (input subject in first column, number of groups in regex in first row)"
msgstr ""

#: ../../source/user_guide/text.rst:587
msgid "1 group"
msgstr ""

#: ../../source/user_guide/text.rst:587
msgid ">1 group"
msgstr ""

#: ../../source/user_guide/text.rst:589
msgid "Index"
msgstr ""

#: ../../source/user_guide/text.rst:589
msgid "ValueError"
msgstr ""

#: ../../source/user_guide/text.rst:591
msgid "Series"
msgstr ""

#: ../../source/user_guide/text.rst:591
msgid "DataFrame"
msgstr ""

#: ../../source/user_guide/text.rst:595
msgid "Extract all matches in each subject (extractall)"
msgstr ""

#: ../../source/user_guide/text.rst:599
msgid "Unlike ``extract`` (which returns only the first match),"
msgstr ""

#: ../../source/user_guide/text.rst:608
msgid "the ``extractall`` method returns every match. The result of ``extractall`` is always a ``DataFrame`` with a ``MultiIndex`` on its rows. The last level of the ``MultiIndex`` is named ``match`` and indicates the order in the subject."
msgstr ""

#: ../../source/user_guide/text.rst:617
msgid "When each subject string in the Series has exactly one match,"
msgstr ""

#: ../../source/user_guide/text.rst:624
msgid "then ``extractall(pat).xs(0, level='match')`` gives the same result as ``extract(pat)``."
msgstr ""

#: ../../source/user_guide/text.rst:635
msgid "``Index`` also supports ``.str.extractall``. It returns a ``DataFrame`` which has the same result as a ``Series.str.extractall`` with a default index (starts from 0)."
msgstr ""

#: ../../source/user_guide/text.rst:646
msgid "Testing for strings that match or contain a pattern"
msgstr ""

#: ../../source/user_guide/text.rst:648
msgid "You can check whether elements contain a pattern:"
msgstr ""

#: ../../source/user_guide/text.rst:658
msgid "Or whether elements match a pattern:"
msgstr ""

#: ../../source/user_guide/text.rst:676
msgid "The distinction between ``match``, ``fullmatch``, and ``contains`` is strictness: ``fullmatch`` tests whether the entire string matches the regular expression; ``match`` tests whether there is a match of the regular expression that begins at the first character of the string; and ``contains`` tests whether there is a match of the regular expression at any position within the string."
msgstr ""

#: ../../source/user_guide/text.rst:682
msgid "The corresponding functions in the ``re`` package for these three match modes are `re.fullmatch <https://docs.python.org/3/library/re.html#re.fullmatch>`_, `re.match <https://docs.python.org/3/library/re.html#re.match>`_, and `re.search <https://docs.python.org/3/library/re.html#re.search>`_, respectively."
msgstr ""

#: ../../source/user_guide/text.rst:688
msgid "Methods like ``match``, ``fullmatch``, ``contains``, ``startswith``, and ``endswith`` take an extra ``na`` argument so missing values can be considered True or False:"
msgstr ""

#: ../../source/user_guide/text.rst:702
msgid "Creating indicator variables"
msgstr ""

#: ../../source/user_guide/text.rst:704
msgid "You can extract dummy variables from string columns. For example if they are separated by a ``'|'``:"
msgstr ""

#: ../../source/user_guide/text.rst:712
msgid "String ``Index`` also supports ``get_dummies`` which returns a ``MultiIndex``."
msgstr ""

#: ../../source/user_guide/text.rst:719
msgid "See also :func:`~pandas.get_dummies`."
msgstr ""

#: ../../source/user_guide/text.rst:722
msgid "Method summary"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Method"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Description"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.cat`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Concatenate strings"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.split`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Split strings on delimiter"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.rsplit`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Split strings on delimiter working from the end of the string"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.get`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Index into each element (retrieve i-th element)"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.join`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Join strings in each element of the Series with passed separator"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.get_dummies`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Split strings on the delimiter returning DataFrame of dummy variables"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.contains`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Return boolean array if each string contains pattern/regex"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.replace`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Replace occurrences of pattern/regex/string with some other string or the return value of a callable given the occurrence"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.removeprefix`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Remove prefix from string, i.e. only remove if string starts with prefix."
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.removesuffix`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Remove suffix from string, i.e. only remove if string ends with suffix."
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.repeat`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Duplicate values (``s.str.repeat(3)`` equivalent to ``x * 3``)"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.pad`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Add whitespace to left, right, or both sides of strings"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.center`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.center``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.ljust`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.ljust``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.rjust`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.rjust``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.zfill`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.zfill``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.wrap`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Split long strings into lines with length less than a given width"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.slice`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Slice each string in the Series"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.slice_replace`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Replace slice in each string with passed value"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.count`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Count occurrences of pattern"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.startswith`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.startswith(pat)`` for each element"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.endswith`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.endswith(pat)`` for each element"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.findall`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Compute list of all occurrences of pattern/regex for each string"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.match`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Call ``re.match`` on each element, returning matched groups as list"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.extract`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Call ``re.search`` on each element, returning DataFrame with one row for each element and one column for each regex capture group"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.extractall`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Call ``re.findall`` on each element, returning DataFrame with one row for each match and one column for each regex capture group"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.len`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Compute string lengths"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.strip`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.strip``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.rstrip`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.rstrip``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.lstrip`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.lstrip``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.partition`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.partition``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.rpartition`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.rpartition``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.lower`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.lower``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.casefold`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.casefold``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.upper`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.upper``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.find`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.find``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.rfind`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.rfind``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.index`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.index``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.rindex`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.rindex``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.capitalize`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.capitalize``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.swapcase`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.swapcase``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.normalize`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Return Unicode normal form. Equivalent to ``unicodedata.normalize``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.translate`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.translate``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.isalnum`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.isalnum``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.isalpha`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.isalpha``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.isdigit`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.isdigit``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.isspace`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.isspace``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.islower`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.islower``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.isupper`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.isupper``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.istitle`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.istitle``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.isnumeric`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.isnumeric``"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid ":meth:`~Series.str.isdecimal`"
msgstr ""

#: ../../source/user_guide/text.rst:1
msgid "Equivalent to ``str.isdecimal``"
msgstr ""
