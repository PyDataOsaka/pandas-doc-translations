# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/user_guide/visualization.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/user_guide/visualization.rst:7
msgid "Chart visualization"
msgstr ""

#: ../../source/user_guide/visualization.rst:12
msgid "The examples below assume that you're using `Jupyter <https://jupyter.org/>`_."
msgstr ""

#: ../../source/user_guide/visualization.rst:14
msgid "This section demonstrates visualization through charting. For information on visualization of tabular data please see the section on `Table Visualization <style.ipynb>`_."
msgstr ""

#: ../../source/user_guide/visualization.rst:17
msgid "We use the standard convention for referencing the matplotlib API:"
msgstr ""

#: ../../source/user_guide/visualization.rst:25
msgid "We provide the basics in pandas to easily create decent looking plots. See `the ecosystem page <https://pandas.pydata.org/community/ecosystem.html>`_ for visualization libraries that go beyond the basics documented here."
msgstr ""

#: ../../source/user_guide/visualization.rst:31
msgid "All calls to ``np.random`` are seeded with 123456."
msgstr ""

#: ../../source/user_guide/visualization.rst:36
msgid "Basic plotting: ``plot``"
msgstr ""

#: ../../source/user_guide/visualization.rst:38
msgid "We will demonstrate the basics, see the :ref:`cookbook<cookbook.plotting>` for some advanced strategies."
msgstr ""

#: ../../source/user_guide/visualization.rst:41
msgid "The ``plot`` method on Series and DataFrame is just a simple wrapper around :meth:`plt.plot() <matplotlib.axes.Axes.plot>`:"
msgstr ""

#: ../../source/user_guide/visualization.rst:54
msgid "If the index consists of dates, it calls :meth:`gcf().autofmt_xdate() <matplotlib.figure.Figure.autofmt_xdate>` to try to format the x-axis nicely as per above."
msgstr ""

#: ../../source/user_guide/visualization.rst:57
msgid "On DataFrame, :meth:`~DataFrame.plot` is a convenience to plot all of the columns with labels:"
msgstr ""

#: ../../source/user_guide/visualization.rst:74
msgid "You can plot one column versus another using the ``x`` and ``y`` keywords in :meth:`~DataFrame.plot`:"
msgstr ""

#: ../../source/user_guide/visualization.rst:94
msgid "For more formatting and styling options, see :ref:`formatting <visualization.formatting>` below."
msgstr ""

#: ../../source/user_guide/visualization.rst:105
msgid "Other plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:107
msgid "Plotting methods allow for a handful of plot styles other than the default line plot. These methods can be provided as the ``kind`` keyword argument to :meth:`~DataFrame.plot`, and include:"
msgstr ""

#: ../../source/user_guide/visualization.rst:111
msgid ":ref:`'bar' <visualization.barplot>` or :ref:`'barh' <visualization.barplot>` for bar plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:112
msgid ":ref:`'hist' <visualization.hist>` for histogram"
msgstr ""

#: ../../source/user_guide/visualization.rst:113
msgid ":ref:`'box' <visualization.box>` for boxplot"
msgstr ""

#: ../../source/user_guide/visualization.rst:114
msgid ":ref:`'kde' <visualization.kde>` or :ref:`'density' <visualization.kde>` for density plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:115
msgid ":ref:`'area' <visualization.area_plot>` for area plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:116
msgid ":ref:`'scatter' <visualization.scatter>` for scatter plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:117
msgid ":ref:`'hexbin' <visualization.hexbin>` for hexagonal bin plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:118
msgid ":ref:`'pie' <visualization.pie>` for pie plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:120
msgid "For example, a bar plot can be created the following way:"
msgstr ""

#: ../../source/user_guide/visualization.rst:129
msgid "You can also create these other plots using the methods ``DataFrame.plot.<kind>`` instead of providing the ``kind`` keyword argument. This makes it easier to discover plot methods and the specific arguments they use:"
msgstr ""

#: ../../source/user_guide/visualization.rst:140
msgid "In addition to these ``kind`` s, there are the :ref:`DataFrame.hist() <visualization.hist>`, and :ref:`DataFrame.boxplot() <visualization.box>` methods, which use a separate interface."
msgstr ""

#: ../../source/user_guide/visualization.rst:143
msgid "Finally, there are several :ref:`plotting functions <visualization.tools>` in ``pandas.plotting`` that take a :class:`Series` or :class:`DataFrame` as an argument. These include:"
msgstr ""

#: ../../source/user_guide/visualization.rst:147
msgid ":ref:`Scatter Matrix <visualization.scatter_matrix>`"
msgstr ""

#: ../../source/user_guide/visualization.rst:148
msgid ":ref:`Andrews Curves <visualization.andrews_curves>`"
msgstr ""

#: ../../source/user_guide/visualization.rst:149
msgid ":ref:`Parallel Coordinates <visualization.parallel_coordinates>`"
msgstr ""

#: ../../source/user_guide/visualization.rst:150
msgid ":ref:`Lag Plot <visualization.lag>`"
msgstr ""

#: ../../source/user_guide/visualization.rst:151
msgid ":ref:`Autocorrelation Plot <visualization.autocorrelation>`"
msgstr ""

#: ../../source/user_guide/visualization.rst:152
msgid ":ref:`Bootstrap Plot <visualization.bootstrap>`"
msgstr ""

#: ../../source/user_guide/visualization.rst:153
msgid ":ref:`RadViz <visualization.radviz>`"
msgstr ""

#: ../../source/user_guide/visualization.rst:155
msgid "Plots may also be adorned with :ref:`errorbars <visualization.errorbars>` or :ref:`tables <visualization.table>`."
msgstr ""

#: ../../source/user_guide/visualization.rst:161
msgid "Bar plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:163
msgid "For labeled, non-time series data, you may wish to produce a bar plot:"
msgstr ""

#: ../../source/user_guide/visualization.rst:173
msgid "Calling a DataFrame's :meth:`plot.bar() <DataFrame.plot.bar>` method produces a multiple bar plot:"
msgstr ""

#: ../../source/user_guide/visualization.rst:190
msgid "To produce a stacked bar plot, pass ``stacked=True``:"
msgstr ""

#: ../../source/user_guide/visualization.rst:203
msgid "To get horizontal bar plots, use the ``barh`` method:"
msgstr ""

#: ../../source/user_guide/visualization.rst:219
msgid "Histograms"
msgstr ""

#: ../../source/user_guide/visualization.rst:221
msgid "Histograms can be drawn by using the :meth:`DataFrame.plot.hist` and :meth:`Series.plot.hist` methods."
msgstr ""

#: ../../source/user_guide/visualization.rst:245
msgid "A histogram can be stacked using ``stacked=True``. Bin size can be changed using the ``bins`` keyword."
msgstr ""

#: ../../source/user_guide/visualization.rst:260
msgid "You can pass other keywords supported by matplotlib ``hist``. For example, horizontal and cumulative histograms can be drawn by ``orientation='horizontal'`` and ``cumulative=True``."
msgstr ""

#: ../../source/user_guide/visualization.rst:276
msgid "See the :meth:`hist <matplotlib.axes.Axes.hist>` method and the `matplotlib hist documentation <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html>`__ for more."
msgstr ""

#: ../../source/user_guide/visualization.rst:280
msgid "The existing interface ``DataFrame.hist`` to plot histogram still can be used."
msgstr ""

#: ../../source/user_guide/visualization.rst:294
msgid ":meth:`DataFrame.hist` plots the histograms of the columns on multiple subplots:"
msgstr ""

#: ../../source/user_guide/visualization.rst:305
msgid "The ``by`` keyword can be specified to plot grouped histograms:"
msgstr ""

#: ../../source/user_guide/visualization.rst:327
msgid "In addition, the ``by`` keyword can also be specified in :meth:`DataFrame.plot.hist`."
msgstr ""

#: ../../source/user_guide/visualization.rst:353
msgid "Box plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:355
msgid "Boxplot can be drawn calling :meth:`Series.plot.box` and :meth:`DataFrame.plot.box`, or :meth:`DataFrame.boxplot` to visualize the distribution of values within each column."
msgstr ""

#: ../../source/user_guide/visualization.rst:358
msgid "For instance, here is a boxplot representing five trials of 10 observations of a uniform random variable on [0,1)."
msgstr ""

#: ../../source/user_guide/visualization.rst:374
msgid "Boxplot can be colorized by passing ``color`` keyword. You can pass a ``dict`` whose keys are ``boxes``, ``whiskers``, ``medians`` and ``caps``. If some keys are missing in the ``dict``, default colors are used for the corresponding artists. Also, boxplot has ``sym`` keyword to specify fliers style."
msgstr ""

#: ../../source/user_guide/visualization.rst:379
msgid "When you pass other type of arguments via ``color`` keyword, it will be directly passed to matplotlib for all the ``boxes``, ``whiskers``, ``medians`` and ``caps`` colorization."
msgstr ""

#: ../../source/user_guide/visualization.rst:383
msgid "The colors are applied to every boxes to be drawn. If you want more complicated colorization, you can get each drawn artists by passing :ref:`return_type <visualization.box.return>`."
msgstr ""

#: ../../source/user_guide/visualization.rst:404
msgid "Also, you can pass other keywords supported by matplotlib ``boxplot``. For example, horizontal and custom-positioned boxplot can be drawn by ``vert=False`` and ``positions`` keywords."
msgstr ""

#: ../../source/user_guide/visualization.rst:414
msgid "See the :meth:`boxplot <matplotlib.axes.Axes.boxplot>` method and the `matplotlib boxplot documentation <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html>`__ for more."
msgstr ""

#: ../../source/user_guide/visualization.rst:418
msgid "The existing interface ``DataFrame.boxplot`` to plot boxplot still can be used."
msgstr ""

#: ../../source/user_guide/visualization.rst:435
msgid "You can create a stratified boxplot using the ``by`` keyword argument to create groupings.  For instance,"
msgstr ""

#: ../../source/user_guide/visualization.rst:455
msgid "You can also pass a subset of columns to plot, as well as group by multiple columns:"
msgstr ""

#: ../../source/user_guide/visualization.rst:481
msgid "You could also create groupings with :meth:`DataFrame.plot.box`, for instance:"
msgstr ""

#: ../../source/user_guide/visualization.rst:509
msgid "In ``boxplot``, the return type can be controlled by the ``return_type``, keyword. The valid choices are ``{\"axes\", \"dict\", \"both\", None}``. Faceting, created by ``DataFrame.boxplot`` with the ``by`` keyword, will affect the output type as well:"
msgstr ""

#: ../../source/user_guide/visualization.rst:514
msgid "``return_type``"
msgstr ""

#: ../../source/user_guide/visualization.rst:514
msgid "Faceted"
msgstr ""

#: ../../source/user_guide/visualization.rst:514
msgid "Output type"
msgstr ""

#: ../../source/user_guide/visualization.rst:516
#: ../../source/user_guide/visualization.rst:517
msgid "``None``"
msgstr ""

#: ../../source/user_guide/visualization.rst:516
#: ../../source/user_guide/visualization.rst:518
#: ../../source/user_guide/visualization.rst:520
#: ../../source/user_guide/visualization.rst:522
msgid "No"
msgstr ""

#: ../../source/user_guide/visualization.rst:516
#: ../../source/user_guide/visualization.rst:518
msgid "axes"
msgstr ""

#: ../../source/user_guide/visualization.rst:517
#: ../../source/user_guide/visualization.rst:519
#: ../../source/user_guide/visualization.rst:521
#: ../../source/user_guide/visualization.rst:523
msgid "Yes"
msgstr ""

#: ../../source/user_guide/visualization.rst:517
msgid "2-D ndarray of axes"
msgstr ""

#: ../../source/user_guide/visualization.rst:518
#: ../../source/user_guide/visualization.rst:519
msgid "``'axes'``"
msgstr ""

#: ../../source/user_guide/visualization.rst:519
msgid "Series of axes"
msgstr ""

#: ../../source/user_guide/visualization.rst:520
#: ../../source/user_guide/visualization.rst:521
msgid "``'dict'``"
msgstr ""

#: ../../source/user_guide/visualization.rst:520
msgid "dict of artists"
msgstr ""

#: ../../source/user_guide/visualization.rst:521
msgid "Series of dicts of artists"
msgstr ""

#: ../../source/user_guide/visualization.rst:522
#: ../../source/user_guide/visualization.rst:523
msgid "``'both'``"
msgstr ""

#: ../../source/user_guide/visualization.rst:522
msgid "namedtuple"
msgstr ""

#: ../../source/user_guide/visualization.rst:523
msgid "Series of namedtuples"
msgstr ""

#: ../../source/user_guide/visualization.rst:526
msgid "``Groupby.boxplot`` always returns a ``Series`` of ``return_type``."
msgstr ""

#: ../../source/user_guide/visualization.rst:544
msgid "The subplots above are split by the numeric columns first, then the value of the ``g`` column. Below the subplots are first split by the value of ``g``, then by the numeric columns."
msgstr ""

#: ../../source/user_guide/visualization.rst:562
msgid "Area plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:564
msgid "You can create area plots with :meth:`Series.plot.area` and :meth:`DataFrame.plot.area`. Area plots are stacked by default. To produce stacked area plot, each column must be either all positive or all negative values."
msgstr ""

#: ../../source/user_guide/visualization.rst:567
msgid "When input data contains ``NaN``, it will be automatically filled by 0. If you want to drop or fill by different values, use :func:`dataframe.dropna` or :func:`dataframe.fillna` before calling ``plot``."
msgstr ""

#: ../../source/user_guide/visualization.rst:582
msgid "To produce an unstacked plot, pass ``stacked=False``. Alpha value is set to 0.5 unless otherwise specified:"
msgstr ""

#: ../../source/user_guide/visualization.rst:598
msgid "Scatter plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:600
msgid "Scatter plot can be drawn by using the :meth:`DataFrame.plot.scatter` method. Scatter plot requires numeric columns for the x and y axes. These can be specified by the ``x`` and ``y`` keywords."
msgstr ""

#: ../../source/user_guide/visualization.rst:621
msgid "To plot multiple column groups in a single axes, repeat ``plot`` method specifying target ``ax``. It is recommended to specify ``color`` and ``label`` keywords to distinguish each groups."
msgstr ""

#: ../../source/user_guide/visualization.rst:636
msgid "The keyword ``c`` may be given as the name of a column to provide colors for each point:"
msgstr ""

#: ../../source/user_guide/visualization.rst:650
msgid "If a categorical column is passed to ``c``, then a discrete colorbar will be produced:"
msgstr ""

#: ../../source/user_guide/visualization.rst:665
msgid "You can pass other keywords supported by matplotlib :meth:`scatter <matplotlib.axes.Axes.scatter>`. The example  below shows a bubble chart using a column of the ``DataFrame`` as the bubble size."
msgstr ""

#: ../../source/user_guide/visualization.rst:679
msgid "See the :meth:`scatter <matplotlib.axes.Axes.scatter>` method and the `matplotlib scatter documentation <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html>`__ for more."
msgstr ""

#: ../../source/user_guide/visualization.rst:685
msgid "Hexagonal bin plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:687
msgid "You can create hexagonal bin plots with :meth:`DataFrame.plot.hexbin`. Hexbin plots can be a useful alternative to scatter plots if your data are too dense to plot each point individually."
msgstr ""

#: ../../source/user_guide/visualization.rst:706
msgid "A useful keyword argument is ``gridsize``; it controls the number of hexagons in the x-direction, and defaults to 100. A larger ``gridsize`` means more, smaller bins."
msgstr ""

#: ../../source/user_guide/visualization.rst:710
msgid "By default, a histogram of the counts around each ``(x, y)`` point is computed. You can specify alternative aggregations by passing values to the ``C`` and ``reduce_C_function`` arguments. ``C`` specifies the value at each ``(x, y)`` point and ``reduce_C_function`` is a function of one argument that reduces all the values in a bin to a single number (e.g. ``mean``, ``max``, ``sum``, ``std``).  In this example the positions are given by columns ``a`` and ``b``, while the value is given by column ``z``. The bins are aggregated with NumPy's ``max`` function."
msgstr ""

#: ../../source/user_guide/visualization.rst:739
msgid "See the :meth:`hexbin <matplotlib.axes.Axes.hexbin>` method and the `matplotlib hexbin documentation <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html>`__ for more."
msgstr ""

#: ../../source/user_guide/visualization.rst:745
msgid "Pie plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:747
msgid "You can create a pie plot with :meth:`DataFrame.plot.pie` or :meth:`Series.plot.pie`. If your data includes any ``NaN``, they will be automatically filled with 0. A ``ValueError`` will be raised if there are any negative values in your data."
msgstr ""

#: ../../source/user_guide/visualization.rst:770
msgid "For pie plots it's best to use square figures, i.e. a figure aspect ratio 1. You can create the figure with equal width and height, or force the aspect ratio to be equal after plotting by calling ``ax.set_aspect('equal')`` on the returned ``axes`` object."
msgstr ""

#: ../../source/user_guide/visualization.rst:775
msgid "Note that pie plot with :class:`DataFrame` requires that you either specify a target column by the ``y`` argument or ``subplots=True``. When ``y`` is specified, pie plot of selected column will be drawn. If ``subplots=True`` is specified, pie plots for each column are drawn as subplots. A legend will be drawn in each pie plots by default; specify ``legend=False`` to hide it."
msgstr ""

#: ../../source/user_guide/visualization.rst:801
msgid "You can use the ``labels`` and ``colors`` keywords to specify the labels and colors of each wedge."
msgstr ""

#: ../../source/user_guide/visualization.rst:805
msgid "Most pandas plots use the ``label`` and ``color`` arguments (note the lack of \"s\" on those). To be consistent with :func:`matplotlib.pyplot.pie` you must use ``labels`` and ``colors``."
msgstr ""

#: ../../source/user_guide/visualization.rst:808
msgid "If you want to hide wedge labels, specify ``labels=None``. If ``fontsize`` is specified, the value will be applied to wedge labels. Also, other keywords supported by :func:`matplotlib.pyplot.pie` can be used."
msgstr ""

#: ../../source/user_guide/visualization.rst:829
msgid "If you pass values whose sum total is less than 1.0 they will be rescaled so that they sum to 1."
msgstr ""

#: ../../source/user_guide/visualization.rst:845
msgid "See the `matplotlib pie documentation <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html>`__ for more."
msgstr ""

#: ../../source/user_guide/visualization.rst:855
msgid "Plotting with missing data"
msgstr ""

#: ../../source/user_guide/visualization.rst:857
msgid "pandas tries to be pragmatic about plotting ``DataFrames`` or ``Series`` that contain missing data. Missing values are dropped, left out, or filled depending on the plot type."
msgstr ""

#: ../../source/user_guide/visualization.rst:862
msgid "Plot Type"
msgstr ""

#: ../../source/user_guide/visualization.rst:862
msgid "NaN Handling"
msgstr ""

#: ../../source/user_guide/visualization.rst:864
msgid "Line"
msgstr ""

#: ../../source/user_guide/visualization.rst:864
msgid "Leave gaps at NaNs"
msgstr ""

#: ../../source/user_guide/visualization.rst:866
msgid "Line (stacked)"
msgstr ""

#: ../../source/user_guide/visualization.rst:866
#: ../../source/user_guide/visualization.rst:868
#: ../../source/user_guide/visualization.rst:876
#: ../../source/user_guide/visualization.rst:882
msgid "Fill 0's"
msgstr ""

#: ../../source/user_guide/visualization.rst:868
msgid "Bar"
msgstr ""

#: ../../source/user_guide/visualization.rst:870
msgid "Scatter"
msgstr ""

#: ../../source/user_guide/visualization.rst:870
#: ../../source/user_guide/visualization.rst:880
msgid "Drop NaNs"
msgstr ""

#: ../../source/user_guide/visualization.rst:872
msgid "Histogram"
msgstr ""

#: ../../source/user_guide/visualization.rst:872
#: ../../source/user_guide/visualization.rst:874
#: ../../source/user_guide/visualization.rst:878
msgid "Drop NaNs (column-wise)"
msgstr ""

#: ../../source/user_guide/visualization.rst:874
msgid "Box"
msgstr ""

#: ../../source/user_guide/visualization.rst:876
msgid "Area"
msgstr ""

#: ../../source/user_guide/visualization.rst:878
msgid "KDE"
msgstr ""

#: ../../source/user_guide/visualization.rst:880
msgid "Hexbin"
msgstr ""

#: ../../source/user_guide/visualization.rst:882
msgid "Pie"
msgstr ""

#: ../../source/user_guide/visualization.rst:885
msgid "If any of these defaults are not what you want, or if you want to be explicit about how missing values are handled, consider using :meth:`~pandas.DataFrame.fillna` or :meth:`~pandas.DataFrame.dropna` before plotting."
msgstr ""

#: ../../source/user_guide/visualization.rst:893
msgid "Plotting tools"
msgstr ""

#: ../../source/user_guide/visualization.rst:895
msgid "These functions can be imported from ``pandas.plotting`` and take a :class:`Series` or :class:`DataFrame` as an argument."
msgstr ""

#: ../../source/user_guide/visualization.rst:901
msgid "Scatter matrix plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:903
msgid "You can create a scatter plot matrix using the ``scatter_matrix`` method in ``pandas.plotting``:"
msgstr ""

#: ../../source/user_guide/visualization.rst:928
msgid "Density plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:930
msgid "You can create density plots using the :meth:`Series.plot.kde` and :meth:`DataFrame.plot.kde` methods."
msgstr ""

#: ../../source/user_guide/visualization.rst:953
msgid "Andrews curves"
msgstr ""

#: ../../source/user_guide/visualization.rst:955
msgid "Andrews curves allow one to plot multivariate data as a large number of curves that are created using the attributes of samples as coefficients for Fourier series, see the `Wikipedia entry <https://en.wikipedia.org/wiki/Andrews_plot>`__ for more information. By coloring these curves differently for each class it is possible to visualize data clustering. Curves belonging to samples of the same class will usually be closer together and form larger structures."
msgstr ""

#: ../../source/user_guide/visualization.rst:962
#: ../../source/user_guide/visualization.rst:1122
msgid "**Note**: The \"Iris\" dataset is available `here <https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv>`__."
msgstr ""

#: ../../source/user_guide/visualization.rst:978
msgid "Parallel coordinates"
msgstr ""

#: ../../source/user_guide/visualization.rst:980
msgid "Parallel coordinates is a plotting technique for plotting multivariate data, see the `Wikipedia entry <https://en.wikipedia.org/wiki/Parallel_coordinates>`__ for an introduction. Parallel coordinates allows one to see clusters in data and to estimate other statistics visually. Using parallel coordinates points are represented as connected line segments. Each vertical line represents one attribute. One set of connected line segments represents one data point. Points that tend to cluster will appear closer together."
msgstr ""

#: ../../source/user_guide/visualization.rst:1007
msgid "Lag plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:1009
msgid "Lag plots are used to check if a data set or time series is random. Random data should not exhibit any structure in the lag plot. Non-random structure implies that the underlying data are not random. The ``lag`` argument may be passed, and when ``lag=1`` the plot is essentially ``data[:-1]`` vs. ``data[1:]``."
msgstr ""

#: ../../source/user_guide/visualization.rst:1040
msgid "Autocorrelation plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:1042
msgid "Autocorrelation plots are often used for checking randomness in time series. This is done by computing autocorrelations for data values at varying time lags. If time series is random, such autocorrelations should be near zero for any and all time-lag separations. If time series is non-random then one or more of the autocorrelations will be significantly non-zero. The horizontal lines displayed in the plot correspond to 95% and 99% confidence bands. The dashed line is 99% confidence band. See the `Wikipedia entry <https://en.wikipedia.org/wiki/Correlogram>`__ for more about autocorrelation plots."
msgstr ""

#: ../../source/user_guide/visualization.rst:1077
msgid "Bootstrap plot"
msgstr ""

#: ../../source/user_guide/visualization.rst:1079
msgid "Bootstrap plots are used to visually assess the uncertainty of a statistic, such as mean, median, midrange, etc. A random subset of a specified size is selected from a data set, the statistic in question is computed for this subset and the process is repeated a specified number of times. Resulting plots and histograms are what constitutes the bootstrap plot."
msgstr ""

#: ../../source/user_guide/visualization.rst:1107
msgid "RadViz"
msgstr ""

#: ../../source/user_guide/visualization.rst:1109
msgid "RadViz is a way of visualizing multi-variate data. It is based on a simple spring tension minimization algorithm. Basically you set up a bunch of points in a plane. In our case they are equally spaced on a unit circle. Each point represents a single attribute. You then pretend that each sample in the data set is attached to each of these points by a spring, the stiffness of which is proportional to the numerical value of that attribute (they are normalized to unit interval). The point in the plane, where our sample settles to (where the forces acting on our sample are at an equilibrium) is where a dot representing our sample will be drawn. Depending on which class that sample belongs it will be colored differently. See the R package `Radviz <https://cran.r-project.org/web/packages/Radviz/index.html>`__ for more information."
msgstr ""

#: ../../source/user_guide/visualization.rst:1143
msgid "Plot formatting"
msgstr ""

#: ../../source/user_guide/visualization.rst:1146
msgid "Setting the plot style"
msgstr ""

#: ../../source/user_guide/visualization.rst:1148
msgid "From version 1.5 and up, matplotlib offers a range of pre-configured plotting styles. Setting the style can be used to easily give plots the general look that you want. Setting the style is as easy as calling ``matplotlib.style.use(my_plot_style)`` before creating your plot. For example you could write ``matplotlib.style.use('ggplot')`` for ggplot-style plots."
msgstr ""

#: ../../source/user_guide/visualization.rst:1154
msgid "You can see the various available style names at ``matplotlib.style.available`` and it's very easy to try them out."
msgstr ""

#: ../../source/user_guide/visualization.rst:1158
msgid "General plot style arguments"
msgstr ""

#: ../../source/user_guide/visualization.rst:1160
msgid "Most plotting methods have a set of keyword arguments that control the layout and formatting of the returned plot:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1174
msgid "For each kind of plot (e.g. ``line``, ``bar``, ``scatter``) any additional arguments keywords are passed along to the corresponding matplotlib function (:meth:`ax.plot() <matplotlib.axes.Axes.plot>`, :meth:`ax.bar() <matplotlib.axes.Axes.bar>`, :meth:`ax.scatter() <matplotlib.axes.Axes.scatter>`). These can be used to control additional styling, beyond what pandas provides."
msgstr ""

#: ../../source/user_guide/visualization.rst:1182
msgid "Controlling the legend"
msgstr ""

#: ../../source/user_guide/visualization.rst:1184
msgid "You may set the ``legend`` argument to ``False`` to hide the legend, which is shown by default."
msgstr ""

#: ../../source/user_guide/visualization.rst:1207
msgid "Controlling the labels"
msgstr ""

#: ../../source/user_guide/visualization.rst:1209
msgid "You may set the ``xlabel`` and ``ylabel`` arguments to give the plot custom labels for x and y axis. By default, pandas will pick up index name as xlabel, while leaving it empty for ylabel."
msgstr ""

#: ../../source/user_guide/visualization.rst:1232
msgid "Scales"
msgstr ""

#: ../../source/user_guide/visualization.rst:1234
msgid "You may pass ``logy`` to get a log-scale Y axis."
msgstr ""

#: ../../source/user_guide/visualization.rst:1255
msgid "See also the ``logx`` and ``loglog`` keyword arguments."
msgstr ""

#: ../../source/user_guide/visualization.rst:1258
msgid "Plotting on a secondary y-axis"
msgstr ""

#: ../../source/user_guide/visualization.rst:1260
msgid "To plot data on a secondary y-axis, use the ``secondary_y`` keyword:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1279
msgid "To plot some columns in a ``DataFrame``, give the column names to the ``secondary_y`` keyword:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1295
msgid "Note that the columns plotted on the secondary y-axis is automatically marked with \"(right)\" in the legend. To turn off the automatic marking, use the ``mark_right=False`` keyword:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1314
msgid "Custom formatters for timeseries plots"
msgstr ""

#: ../../source/user_guide/visualization.rst:1316
msgid "pandas provides custom formatters for timeseries plots. These change the formatting of the axis labels for dates and times. By default, the custom formatters are applied only to plots created by pandas with :meth:`DataFrame.plot` or :meth:`Series.plot`. To have them apply to all plots, including those made by matplotlib, set the option ``pd.options.plotting.matplotlib.register_converters = True`` or use :meth:`pandas.plotting.register_matplotlib_converters`."
msgstr ""

#: ../../source/user_guide/visualization.rst:1325
msgid "Suppressing tick resolution adjustment"
msgstr ""

#: ../../source/user_guide/visualization.rst:1327
msgid "pandas includes automatic tick resolution adjustment for regular frequency time-series data. For limited cases where pandas cannot infer the frequency information (e.g., in an externally created ``twinx``), you can choose to suppress this behavior for alignment purposes."
msgstr ""

#: ../../source/user_guide/visualization.rst:1332
msgid "Here is the default behavior, notice how the x-axis tick labeling is performed:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1346
msgid "Using the ``x_compat`` parameter, you can suppress this behavior:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1360
msgid "If you have more than one plot that needs to be suppressed, the ``use`` method in ``pandas.plotting.plot_params`` can be used in a ``with`` statement:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1379
msgid "Automatic date tick adjustment"
msgstr ""

#: ../../source/user_guide/visualization.rst:1381
msgid "``TimedeltaIndex`` now uses the native matplotlib tick locator methods, it is useful to call the automatic date tick adjustment from matplotlib for figures whose ticklabels overlap."
msgstr ""

#: ../../source/user_guide/visualization.rst:1385
msgid "See the :meth:`autofmt_xdate <matplotlib.figure.autofmt_xdate>` method and the `matplotlib documentation <https://matplotlib.org/2.0.2/users/recipes.html#fixing-common-date-annoyances>`__ for more."
msgstr ""

#: ../../source/user_guide/visualization.rst:1389
msgid "Subplots"
msgstr ""

#: ../../source/user_guide/visualization.rst:1391
msgid "Each ``Series`` in a ``DataFrame`` can be plotted on a different axis with the ``subplots`` keyword:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1405
msgid "Using layout and targeting multiple axes"
msgstr ""

#: ../../source/user_guide/visualization.rst:1407
msgid "The layout of subplots can be specified by the ``layout`` keyword. It can accept ``(rows, columns)``. The ``layout`` keyword can be used in ``hist`` and ``boxplot`` also. If the input is invalid, a ``ValueError`` will be raised."
msgstr ""

#: ../../source/user_guide/visualization.rst:1411
msgid "The number of axes which can be contained by rows x columns specified by ``layout`` must be larger than the number of required subplots. If layout can contain more axes than required, blank axes are not drawn. Similar to a NumPy array's ``reshape`` method, you can use ``-1`` for one dimension to automatically calculate the number of rows or columns needed, given the other."
msgstr ""

#: ../../source/user_guide/visualization.rst:1427
msgid "The above example is identical to using:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1438
msgid "The required number of columns (3) is inferred from the number of series to plot and the given number of rows (2)."
msgstr ""

#: ../../source/user_guide/visualization.rst:1441
msgid "You can pass multiple axes created beforehand as list-like via ``ax`` keyword. This allows more complicated layouts. The passed axes must be the same number as the subplots being drawn."
msgstr ""

#: ../../source/user_guide/visualization.rst:1445
msgid "When multiple axes are passed via the ``ax`` keyword, ``layout``, ``sharex`` and ``sharey`` keywords don't affect to the output. You should explicitly pass ``sharex=False`` and ``sharey=False``, otherwise you will see a warning."
msgstr ""

#: ../../source/user_guide/visualization.rst:1465
msgid "Another option is passing an ``ax`` argument to :meth:`Series.plot` to plot on a particular axis:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1503
msgid "Plotting with error bars"
msgstr ""

#: ../../source/user_guide/visualization.rst:1505
msgid "Plotting with error bars is supported in :meth:`DataFrame.plot` and :meth:`Series.plot`."
msgstr ""

#: ../../source/user_guide/visualization.rst:1507
msgid "Horizontal and vertical error bars can be supplied to the ``xerr`` and ``yerr`` keyword arguments to :meth:`~DataFrame.plot()`. The error values can be specified using a variety of formats:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1509
msgid "As a :class:`DataFrame` or ``dict`` of errors with column names matching the ``columns`` attribute of the plotting :class:`DataFrame` or matching the ``name`` attribute of the :class:`Series`."
msgstr ""

#: ../../source/user_guide/visualization.rst:1510
msgid "As a ``str`` indicating which of the columns of plotting :class:`DataFrame` contain the error values."
msgstr ""

#: ../../source/user_guide/visualization.rst:1511
msgid "As raw values (``list``, ``tuple``, or ``np.ndarray``). Must be the same length as the plotting :class:`DataFrame`/:class:`Series`."
msgstr ""

#: ../../source/user_guide/visualization.rst:1513
msgid "Here is an example of one way to easily plot group means with standard deviations from the raw data."
msgstr ""

#: ../../source/user_guide/visualization.rst:1552
msgid "Asymmetrical error bars are also supported, however raw error values must be provided in this case. For a ``N`` length :class:`Series`, a ``2xN`` array should be provided indicating lower and upper (or left and right) errors. For a ``MxN`` :class:`DataFrame`, asymmetrical errors should be in a ``Mx2xN`` array."
msgstr ""

#: ../../source/user_guide/visualization.rst:1554
msgid "Here is an example of one way to plot the min/max range using asymmetrical error bars."
msgstr ""

#: ../../source/user_guide/visualization.rst:1577
msgid "Plotting tables"
msgstr ""

#: ../../source/user_guide/visualization.rst:1579
msgid "Plotting with matplotlib table is now supported in  :meth:`DataFrame.plot` and :meth:`Series.plot` with a ``table`` keyword. The ``table`` keyword can accept ``bool``, :class:`DataFrame` or :class:`Series`. The simple way to draw a table is to specify ``table=True``. Data will be transposed to meet matplotlib's default layout."
msgstr ""

#: ../../source/user_guide/visualization.rst:1596
msgid "Also, you can pass a different :class:`DataFrame` or :class:`Series` to the ``table`` keyword. The data will be drawn as displayed in print method (not transposed automatically). If required, it should be transposed manually as seen in the example below."
msgstr ""

#: ../../source/user_guide/visualization.rst:1614
msgid "There also exists a helper function ``pandas.plotting.table``, which creates a table from :class:`DataFrame` or :class:`Series`, and adds it to an ``matplotlib.Axes`` instance. This function can accept keywords which the matplotlib `table <https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.table.html>`__ has."
msgstr ""

#: ../../source/user_guide/visualization.rst:1635
msgid "**Note**: You can get table instances on the axes using ``axes.tables`` property for further decorations. See the `matplotlib table documentation <https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table>`__ for more."
msgstr ""

#: ../../source/user_guide/visualization.rst:1640
msgid "Colormaps"
msgstr ""

#: ../../source/user_guide/visualization.rst:1642
msgid "A potential issue when plotting a large number of columns is that it can be difficult to distinguish some series due to repetition in the default colors. To remedy this, ``DataFrame`` plotting supports the use of the ``colormap`` argument, which accepts either a Matplotlib `colormap <https://matplotlib.org/api/cm_api.html>`__ or a string that is a name of a colormap registered with Matplotlib. A visualization of the default matplotlib colormaps is available `here <https://matplotlib.org/stable/gallery/color/colormap_reference.html>`__."
msgstr ""

#: ../../source/user_guide/visualization.rst:1650
msgid "As matplotlib does not directly support colormaps for line-based plots, the colors are selected based on an even spacing determined by the number of columns in the ``DataFrame``. There is no consideration made for background color, so some colormaps will produce lines that are not easily visible."
msgstr ""

#: ../../source/user_guide/visualization.rst:1655
msgid "To use the cubehelix colormap, we can pass ``colormap='cubehelix'``."
msgstr ""

#: ../../source/user_guide/visualization.rst:1673
msgid "Alternatively, we can pass the colormap itself:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1689
msgid "Colormaps can also be used other plot types, like bar charts:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1707
msgid "Parallel coordinates charts:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1721
msgid "Andrews curves charts:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1736
msgid "Plotting directly with Matplotlib"
msgstr ""

#: ../../source/user_guide/visualization.rst:1738
msgid "In some situations it may still be preferable or necessary to prepare plots directly with matplotlib, for instance when a certain type of plot or customization is not (yet) supported by pandas. ``Series`` and ``DataFrame`` objects behave like arrays and can therefore be passed directly to matplotlib functions without explicit casts."
msgstr ""

#: ../../source/user_guide/visualization.rst:1744
msgid "pandas also automatically registers formatters and locators that recognize date indices, thereby extending date and time support to practically all plot types available in matplotlib. Although this formatting does not provide the same level of refinement you would get when plotting via pandas, it can be faster when plotting a large number of points."
msgstr ""

#: ../../source/user_guide/visualization.rst:1773
msgid "Plotting backends"
msgstr ""

#: ../../source/user_guide/visualization.rst:1775
msgid "pandas can be extended with third-party plotting backends. The main idea is letting users select a plotting backend different than the provided one based on Matplotlib."
msgstr ""

#: ../../source/user_guide/visualization.rst:1779
msgid "This can be done by passing 'backend.module' as the argument ``backend`` in ``plot`` function. For example:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1786
msgid "Alternatively, you can also set this option globally, do you don't need to specify the keyword in each ``plot`` call. For example:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1794
msgid "Or:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1801
msgid "This would be more or less equivalent to:"
msgstr ""

#: ../../source/user_guide/visualization.rst:1808
msgid "The backend module can then use other visualization tools (Bokeh, Altair, hvplot,...) to generate the plots. Some libraries implementing a backend for pandas are listed on `the ecosystem page <https://pandas.pydata.org/community/ecosystem.html>`_."
msgstr ""

#: ../../source/user_guide/visualization.rst:1812
msgid "Developers guide can be found at https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends"
msgstr ""
