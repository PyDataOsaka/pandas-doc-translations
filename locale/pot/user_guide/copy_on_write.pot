# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/user_guide/copy_on_write.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:7
msgid "Copy-on-Write (CoW)"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:9
msgid "Copy-on-Write was first introduced in version 1.5.0. Starting from version 2.0 most of the optimizations that become possible through CoW are implemented and supported. All possible optimizations are supported starting from pandas 2.1."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:13
msgid "We expect that CoW will be enabled by default in version 3.0."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:15
msgid "CoW will lead to more predictable behavior since it is not possible to update more than one object with one statement, e.g. indexing operations or methods won't have side-effects. Additionally, through delaying copies as long as possible, the average performance and memory usage will improve."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:20
msgid "Previous behavior"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:22
msgid "pandas indexing behavior is tricky to understand. Some operations return views while other return copies. Depending on the result of the operation, mutation one object might accidentally mutate another:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:33
msgid "Mutating ``subset``, e.g. updating its values, also updates ``df``. The exact behavior is hard to predict. Copy-on-Write solves accidentally modifying more than one object, it explicitly disallows this. With CoW enabled, ``df`` is unchanged:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:46
msgid "The following sections will explain what this means and how it impacts existing applications."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:50
msgid "Description"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:52
msgid "CoW means that any DataFrame or Series derived from another in any way always behaves as a copy. As a consequence, we can only change the values of an object through modifying the object itself. CoW disallows updating a DataFrame or a Series that shares data with another DataFrame or Series object inplace."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:57
msgid "This avoids side-effects when modifying values and hence, most methods can avoid actually copying the data and only trigger a copy when necessary."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:60
msgid "The following example will operate inplace with CoW:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:68
msgid "The object ``df`` does not share any data with any other object and hence no copy is triggered when updating the values. In contrast, the following operation triggers a copy of the data under CoW:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:82
msgid "``reset_index`` returns a lazy copy with CoW while it copies the data without CoW. Since both objects, ``df`` and ``df2`` share the same data, a copy is triggered when modifying ``df2``. The object ``df`` still has the same values as initially while ``df2`` was modified."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:87
msgid "If the object ``df`` isn't needed anymore after performing the ``reset_index`` operation, you can emulate an inplace-like operation through assigning the output of ``reset_index`` to the same variable:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:98
msgid "The initial object gets out of scope as soon as the result of ``reset_index`` is reassigned and hence ``df`` does not share data with any other object. No copy is necessary when modifying the object. This is generally true for all methods listed in :ref:`Copy-on-Write optimizations <copy_on_write.optimizations>`."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:103
msgid "Previously, when operating on views, the view and the parent object was modified:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:115
msgid "CoW triggers a copy when ``df`` is changed to avoid mutating ``view`` as well:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:127
msgid "Chained Assignment"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:129
msgid "Chained assignment references a technique where an object is updated through two subsequent indexing operations, e.g."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:139
msgid "The column ``foo`` is updated where the column ``bar`` is greater than 5. This violates the CoW principles though, because it would have to modify the view ``df[\"foo\"]`` and ``df`` in one step. Hence, chained assignment will consistently never work and raise a ``ChainedAssignmentError`` warning with CoW enabled:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:151
msgid "With copy on write this can be done by using ``loc``."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:158
msgid "Read-only NumPy arrays"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:160
msgid "Accessing the underlying NumPy array of a DataFrame will return a read-only array if the array shares data with the initial DataFrame:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:163
msgid "The array is a copy if the initial DataFrame consists of more than one array:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:171
msgid "The array shares data with the DataFrame if the DataFrame consists of only one NumPy array:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:178
msgid "This array is read-only, which means that it can't be modified inplace:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:186
msgid "The same holds true for a Series, since a Series always consists of a single array."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:188
msgid "There are two potential solution to this:"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:190
msgid "Trigger a copy manually if you want to avoid updating DataFrames that share memory with your array."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:191
msgid "Make the array writeable. This is a more performant solution but circumvents Copy-on-Write rules, so it should be used with caution."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:202
msgid "Patterns to avoid"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:204
msgid "No defensive copy will be performed if two objects share the same data while you are modifying one object inplace."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:213
msgid "This creates two objects that share data and thus the setitem operation will trigger a copy. This is not necessary if the initial object ``df`` isn't needed anymore. Simply reassigning to the same variable will invalidate the reference that is held by the object."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:224
msgid "No copy is necessary in this example. Creating multiple references keeps unnecessary references alive and thus will hurt performance with Copy-on-Write."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:231
msgid "Copy-on-Write optimizations"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:233
msgid "A new lazy copy mechanism that defers the copy until the object in question is modified and only if this object shares data with another object. This mechanism was added to methods that don't require a copy of the underlying data. Popular examples are :meth:`DataFrame.drop` for ``axis=1`` and :meth:`DataFrame.rename`."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:238
msgid "These methods return views when Copy-on-Write is enabled, which provides a significant performance improvement compared to the regular execution."
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:242
msgid "How to enable CoW"
msgstr ""

#: ../../source/user_guide/copy_on_write.rst:244
msgid "Copy-on-Write can be enabled through the configuration option ``copy_on_write``. The option can be turned on __globally__ through either of the following:"
msgstr ""
