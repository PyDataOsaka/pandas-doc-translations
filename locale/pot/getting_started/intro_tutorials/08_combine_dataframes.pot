# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:26
msgid "For this tutorial, air quality data about :math:`NO_2` is used, made available by `OpenAQ <https://openaq.org>`__ and downloaded using the `py-openaq <http://dhhagan.github.io/py-openaq/index.html>`__ package."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:30
msgid "The ``air_quality_no2_long.csv`` data set provides :math:`NO_2` values for the measurement stations *FR04014*, *BETR801* and *London Westminster* in respectively Paris, Antwerp and London."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:60
msgid "For this tutorial, air quality data about Particulate matter less than 2.5 micrometers is used, made available by `OpenAQ <https://openaq.org>`__ and downloaded using the `py-openaq <http://dhhagan.github.io/py-openaq/index.html>`__ package."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:65
msgid "The ``air_quality_pm25_long.csv`` data set provides :math:`PM_{25}` values for the measurement stations *FR04014*, *BETR801* and *London Westminster* in respectively Paris, Antwerp and London."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:92
msgid "How to combine data from multiple tables"
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:95
msgid "Concatenating objects"
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:105
msgid "I want to combine the measurements of :math:`NO_2` and :math:`PM_{25}`, two tables with a similar structure, in a single table."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:112
msgid "The :func:`~pandas.concat` function performs concatenation operations of multiple tables along one of the axes (row-wise or column-wise)."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:120
msgid "By default concatenation is along axis 0, so the resulting table combines the rows of the input tables. Let’s check the shape of the original and the concatenated tables to verify the operation:"
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:130
msgid "Hence, the resulting table has 3178 = 1110 + 2068 rows."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:133
msgid "The **axis** argument will return in a number of pandas methods that can be applied **along an axis**. A ``DataFrame`` has two corresponding axes: the first running vertically downwards across rows (axis 0), and the second running horizontally across columns (axis 1). Most operations like concatenation or summary statistics are by default across rows (axis 0), but can be applied across columns as well."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:140
msgid "Sorting the table on the datetime information illustrates also the combination of both tables, with the ``parameter`` column defining the origin of the table (either ``no2`` from table ``air_quality_no2`` or ``pm25`` from table ``air_quality_pm25``):"
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:150
msgid "In this specific example, the ``parameter`` column provided by the data ensures that each of the original tables can be identified. This is not always the case. The ``concat`` function provides a convenient solution with the ``keys`` argument, adding an additional (hierarchical) row index. For example:"
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:162
msgid "The existence of multiple row/column indices at the same time has not been mentioned within these tutorials. *Hierarchical indexing* or *MultiIndex* is an advanced and powerful pandas feature to analyze higher dimensional data."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:167
msgid "Multi-indexing is out of scope for this pandas introduction. For the moment, remember that the function ``reset_index`` can be used to convert any level of an index to a column, e.g. ``air_quality.reset_index(level=0)``"
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:177
msgid "Feel free to dive into the world of multi-indexing at the user guide section on :ref:`advanced indexing <advanced>`."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:188
msgid "More options on table concatenation (row and column wise) and how ``concat`` can be used to define the logic (union or intersection) of the indexes on the other axes is provided at the section on :ref:`object concatenation <merging.concat>`."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:198
msgid "Join tables using a common identifier"
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:208
msgid "Add the station coordinates, provided by the stations metadata table, to the corresponding rows in the measurements table."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:211
msgid "The air quality measurement station coordinates are stored in a data file ``air_quality_stations.csv``, downloaded using the `py-openaq <http://dhhagan.github.io/py-openaq/index.html>`__ package."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:221
msgid "The stations used in this example (FR04014, BETR801 and London Westminster) are just three entries enlisted in the metadata table. We only want to add the coordinates of these three to the measurements table, each on the corresponding rows of the ``air_quality`` table."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:235
msgid "Using the :meth:`~pandas.merge` function, for each of the rows in the ``air_quality`` table, the corresponding coordinates are added from the ``air_quality_stations_coord`` table. Both tables have the column ``location`` in common which is used as a key to combine the information. By choosing the ``left`` join, only the locations available in the ``air_quality`` (left) table, i.e. FR04014, BETR801 and London Westminster, end up in the resulting table. The ``merge`` function supports multiple join options similar to database-style operations."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:254
msgid "Add the parameters' full description and name, provided by the parameters metadata table, to the measurements table."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:257
msgid "The air quality parameters metadata are stored in a data file ``air_quality_parameters.csv``, downloaded using the `py-openaq <http://dhhagan.github.io/py-openaq/index.html>`__ package."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:272
msgid "Compared to the previous example, there is no common column name. However, the ``parameter`` column in the ``air_quality`` table and the ``id`` column in the ``air_quality_parameters_name`` both provide the measured variable in a common format. The ``left_on`` and ``right_on`` arguments are used here (instead of just ``on``) to make the link between the two tables."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:289
msgid "pandas supports also inner, outer, and right joins. More information on join/merge of tables is provided in the user guide section on :ref:`database style merging of tables <merging.join>`. Or have a look at the :ref:`comparison with SQL<compare_with_sql.join>` page."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:303
msgid "Multiple tables can be concatenated both column-wise and row-wise using the ``concat`` function."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:305
msgid "For database-like merging/joining of tables, use the ``merge`` function."
msgstr ""

#: ../../source/getting_started/intro_tutorials/08_combine_dataframes.rst:317
msgid "See the user guide for a full description of the various :ref:`facilities to combine data tables <merging>`."
msgstr ""
