# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/getting_started/comparison/comparison_with_sas.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:6
msgid "Comparison with SAS"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:8
msgid "For potential users coming from `SAS <https://en.wikipedia.org/wiki/SAS_(software)>`__ this page is meant to demonstrate how different SAS operations would be performed in pandas."
msgstr ""

#: ../../source/getting_started/comparison/includes/introduction.rst:1
msgid "If you're new to pandas, you might want to first read through :ref:`10 Minutes to pandas<10min>` to familiarize yourself with the library."
msgstr ""

#: ../../source/getting_started/comparison/includes/introduction.rst:4
msgid "As is customary, we import pandas and NumPy as follows:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:16
msgid "Data structures"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:19
msgid "General terminology translation"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "pandas"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "SAS"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
#: ../../source/getting_started/comparison/comparison_with_sas.rst:33
msgid "``DataFrame``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "data set"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "column"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "variable"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "row"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "observation"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "groupby"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "BY-group"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "``NaN``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:1
msgid "``.``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:35
msgid "A ``DataFrame`` in pandas is analogous to a SAS data set - a two-dimensional data source with labeled columns that can be of different types. As will be shown in this document, almost any operation that can be applied to a data set using SAS's ``DATA`` step, can also be accomplished in pandas."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:41
msgid "``Series``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:43
msgid "A ``Series`` is the data structure that represents one column of a ``DataFrame``. SAS doesn't have a separate data structure for a single column, but in general, working with a ``Series`` is analogous to referencing a column in the ``DATA`` step."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:49
msgid "``Index``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:51
msgid "Every ``DataFrame`` and ``Series`` has an ``Index`` - which are labels on the *rows* of the data. SAS does not have an exactly analogous concept. A data set's rows are essentially unlabeled, other than an implicit integer index that can be accessed during the ``DATA`` step (``_N_``)."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:56
msgid "In pandas, if no index is specified, an integer index is also used by default (first row = 0, second row = 1, and so on). While using a labeled ``Index`` or ``MultiIndex`` can enable sophisticated analyses and is ultimately an important part of pandas to understand, for this comparison we will essentially ignore the ``Index`` and just treat the ``DataFrame`` as a collection of columns. Please see the :ref:`indexing documentation<indexing>` for much more on how to use an ``Index`` effectively."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:66
msgid "Copies vs. in place operations"
msgstr ""

#: ../../source/getting_started/comparison/includes/copies.rst:1
msgid "Most pandas operations return copies of the ``Series``/``DataFrame``. To make the changes \"stick\", you'll need to either assign to a new variable:"
msgstr ""

#: ../../source/getting_started/comparison/includes/copies.rst:9
msgid "or overwrite the original one:"
msgstr ""

#: ../../source/getting_started/comparison/includes/copies.rst:17
msgid "You will see an ``inplace=True`` or ``copy=False`` keyword argument available for some methods:"
msgstr ""

#: ../../source/getting_started/comparison/includes/copies.rst:24
msgid "There is an active discussion about deprecating and removing ``inplace`` and ``copy`` for most methods (e.g. ``dropna``) except for a very small subset of methods (including ``replace``). Both keywords won't be necessary anymore in the context of Copy-on-Write. The proposal can be found `here <https://github.com/pandas-dev/pandas/pull/51466>`_."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:72
msgid "Data input / output"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:75
msgid "Constructing a DataFrame from values"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:77
msgid "A SAS data set can be built from specified values by placing the data after a ``datalines`` statement and specifying the column names."
msgstr ""

#: ../../source/getting_started/comparison/includes/construct_dataframe.rst:1
msgid "A pandas ``DataFrame`` can be constructed in many different ways, but for a small number of values, it is often convenient to specify it as a Python dictionary, where the keys are the column names and the values are the data."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:95
msgid "Reading external data"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:97
msgid "Like SAS, pandas provides utilities for reading in data from many formats.  The ``tips`` dataset, found within the pandas tests (`csv <https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/tips.csv>`_) will be used in many of the following examples."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:102
msgid "SAS provides ``PROC IMPORT`` to read csv data into a data set."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:110
msgid "The pandas method is :func:`read_csv`, which works similarly."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:122
msgid "Like ``PROC IMPORT``, ``read_csv`` can take a number of parameters to specify how the data should be parsed.  For example, if the data was instead tab delimited, and did not have column names, the pandas command would be:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:133
msgid "In addition to text/csv, pandas supports a variety of other data formats such as Excel, HDF5, and SQL databases.  These are all read via a ``pd.read_*`` function.  See the :ref:`IO documentation<io>` for more details."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:138
msgid "Limiting output"
msgstr ""

#: ../../source/getting_started/comparison/includes/limit.rst:1
msgid "By default, pandas will truncate output of large ``DataFrame``\\s to show the first and last rows. This can be overridden by :ref:`changing the pandas options <options>`, or using :meth:`DataFrame.head` or :meth:`DataFrame.tail`."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:142
msgid "The equivalent in SAS would be:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:151
msgid "Exporting data"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:153
msgid "The inverse of ``PROC IMPORT`` in SAS is ``PROC EXPORT``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:160
msgid "Similarly in pandas, the opposite of ``read_csv`` is :meth:`~DataFrame.to_csv`, and other data formats follow a similar api."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:169
msgid "Data operations"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:172
msgid "Operations on columns"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:174
msgid "In the ``DATA`` step, arbitrary math expressions can be used on new or existing columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/column_operations.rst:1
msgid "pandas provides vectorized operations by specifying the individual ``Series`` in the ``DataFrame``. New columns can be assigned in the same way. The :meth:`DataFrame.drop` method drops a column from the ``DataFrame``."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:189
msgid "Filtering"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:191
msgid "Filtering in SAS is done with an ``if`` or ``where`` statement, on one or more columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/filtering.rst:1
msgid "DataFrames can be filtered in multiple ways; the most intuitive of which is using :ref:`boolean indexing <indexing.boolean>`."
msgstr ""

#: ../../source/getting_started/comparison/includes/filtering.rst:8
msgid "The above statement is simply passing a ``Series`` of ``True``/``False`` objects to the DataFrame, returning all rows with ``True``."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:211
msgid "If/then logic"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:213
msgid "In SAS, if/then logic can be used to create new columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/if_then.rst:1
msgid "The same operation in pandas can be accomplished using the ``where`` method from ``numpy``."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:228
msgid "Date functionality"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:230
msgid "SAS provides a variety of functions to do operations on date/datetime columns."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:248
msgid "The equivalent pandas operations are shown below.  In addition to these functions pandas supports other Time Series features not available in Base SAS (such as resampling and custom offsets) - see the :ref:`timeseries documentation<timeseries>` for more details."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:256
msgid "Selection of columns"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:258
msgid "SAS provides keywords in the ``DATA`` step to select, drop, and rename columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/column_selection.rst:1
msgid "The same operations are expressed in pandas below."
msgstr ""

#: ../../source/getting_started/comparison/includes/column_selection.rst:4
msgid "Keep certain columns"
msgstr ""

#: ../../source/getting_started/comparison/includes/column_selection.rst:11
msgid "Drop a column"
msgstr ""

#: ../../source/getting_started/comparison/includes/column_selection.rst:18
msgid "Rename a column"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:282
msgid "Sorting by values"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:284
msgid "Sorting in SAS is accomplished via ``PROC SORT``"
msgstr ""

#: ../../source/getting_started/comparison/includes/sorting.rst:1
msgid "pandas has a :meth:`DataFrame.sort_values` method, which takes a list of columns to sort by."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:295
msgid "String processing"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:298
msgid "Finding length of string"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:300
msgid "SAS determines the length of a character string with the `LENGTHN <https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002284668.htm>`__ and `LENGTHC <https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002283942.htm>`__ functions. ``LENGTHN`` excludes trailing blanks and ``LENGTHC`` includes trailing blanks."
msgstr ""

#: ../../source/getting_started/comparison/includes/length.rst:1
msgid "You can find the length of a character string with :meth:`Series.str.len`. In Python 3, all strings are Unicode strings. ``len`` includes trailing blanks. Use ``len`` and ``rstrip`` to exclude trailing blanks."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:317
msgid "Finding position of substring"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:319
msgid "SAS determines the position of a character in a string with the `FINDW <https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002978282.htm>`__ function. ``FINDW`` takes the string defined by the first argument and searches for the first position of the substring you supply as the second argument."
msgstr ""

#: ../../source/getting_started/comparison/includes/find_substring.rst:1
msgid "You can find the position of a character in a column of strings with the :meth:`Series.str.find` method. ``find`` searches for the first position of the substring. If the substring is found, the method returns its position. If not found, it returns ``-1``. Keep in mind that Python indexes are zero-based."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:335
msgid "Extracting substring by position"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:337
msgid "SAS extracts a substring from a string based on its position with the `SUBSTR <https://support.sas.com/documentation/cdl/en/imlug/66845/HTML/default/viewer.htm#imlug_langref_sect455.htm>`__ function."
msgstr ""

#: ../../source/getting_started/comparison/includes/extract_substring.rst:1
msgid "With pandas you can use ``[]`` notation to extract a substring from a string by position locations. Keep in mind that Python indexes are zero-based."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:351
msgid "Extracting nth word"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:353
msgid "The SAS `SCAN <https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000214639.htm>`__ function returns the nth word from a string. The first argument is the string you want to parse and the second argument specifies which word you want to extract."
msgstr ""

#: ../../source/getting_started/comparison/includes/nth_word.rst:1
msgid "The simplest way to extract words in pandas is to split the strings by spaces, then reference the word by index. Note there are more powerful approaches should you need them."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:373
msgid "Changing case"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:375
msgid "The SAS `UPCASE <https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245965.htm>`__ `LOWCASE <https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245912.htm>`__ and `PROPCASE <https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/a002598106.htm>`__ functions change the case of the argument."
msgstr ""

#: ../../source/getting_started/comparison/includes/case.rst:1
msgid "The equivalent pandas methods are :meth:`Series.str.upper`, :meth:`Series.str.lower`, and :meth:`Series.str.title`."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:397
msgid "Merging"
msgstr ""

#: ../../source/getting_started/comparison/includes/merge_setup.rst:1
msgid "The following tables will be used in the merge examples:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:401
msgid "In SAS, data must be explicitly sorted before merging.  Different types of joins are accomplished using the ``in=`` dummy variables to track whether a match was found in one or both input frames."
msgstr ""

#: ../../source/getting_started/comparison/includes/merge.rst:1
msgid "pandas DataFrames have a :meth:`~DataFrame.merge` method, which provides similar functionality. The data does not have to be sorted ahead of time, and different join types are accomplished via the ``how`` keyword."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:429
msgid "Missing data"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:431
msgid "Both pandas and SAS have a representation for missing data."
msgstr ""

#: ../../source/getting_started/comparison/includes/missing_intro.rst:1
msgid "pandas represents missing data with the special float value ``NaN`` (not a number).  Many of the semantics are the same; for example missing data propagates through numeric operations, and is ignored by default for aggregations."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:435
msgid "One difference is that missing data cannot be compared to its sentinel value. For example, in SAS you could do this to filter missing values."
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:1
msgid "In pandas, :meth:`Series.isna` and :meth:`Series.notna` can be used to filter the rows."
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:8
msgid "pandas provides :ref:`a variety of methods to work with missing data <missing_data>`. Here are some examples:"
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:11
msgid "Drop rows with missing values"
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:18
msgid "Forward fill from previous rows"
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:25
msgid "Replace missing values with a specified value"
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:27
msgid "Using the mean:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:454
msgid "GroupBy"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:457
msgid "Aggregation"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:459
msgid "SAS's ``PROC SUMMARY`` can be used to group by one or more key variables and compute aggregations on numeric columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/groupby.rst:1
msgid "pandas provides a flexible ``groupby`` mechanism that allows similar aggregations. See the :ref:`groupby documentation<groupby>` for more details and examples."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:475
msgid "Transformation"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:477
msgid "In SAS, if the group aggregations need to be used with the original frame, it must be merged back together.  For example, to subtract the mean for each observation by smoker group."
msgstr ""

#: ../../source/getting_started/comparison/includes/transform.rst:1
msgid "pandas provides a :ref:`groupby.transform` mechanism that allows these type of operations to be succinctly expressed in one operation."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:504
msgid "By group processing"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:506
msgid "In addition to aggregation, pandas ``groupby`` can be used to replicate most other by group processing from SAS. For example, this ``DATA`` step reads the data by sex/smoker group and filters to the first entry for each."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:523
msgid "In pandas this would be written as:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:531
msgid "Other considerations"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:534
msgid "Disk vs memory"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:536
msgid "pandas operates exclusively in memory, where a SAS data set exists on disk. This means that the size of data able to be loaded in pandas is limited by your machine's memory, but also that the operations on that data may be faster."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:540
msgid "If out of core processing is needed, one possibility is the `dask.dataframe <https://docs.dask.org/en/latest/dataframe.html>`_ library (currently in development) which provides a subset of pandas functionality for an on-disk ``DataFrame``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:546
msgid "Data interop"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:548
msgid "pandas provides a :func:`read_sas` method that can read SAS data saved in the XPORT or SAS7BDAT binary format."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:564
msgid "You can also specify the file format directly. By default, pandas will try to infer the file format based on its extension."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_sas.rst:572
msgid "XPORT is a relatively limited format and the parsing of it is not as optimized as some of the other pandas readers. An alternative way to interop data between SAS and pandas is to serialize to csv."
msgstr ""
