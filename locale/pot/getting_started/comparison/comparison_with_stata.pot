# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/getting_started/comparison/comparison_with_stata.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:6
msgid "Comparison with Stata"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:7
msgid "For potential users coming from `Stata <https://en.wikipedia.org/wiki/Stata>`__ this page is meant to demonstrate how different Stata operations would be performed in pandas."
msgstr ""

#: ../../source/getting_started/comparison/includes/introduction.rst:1
msgid "If you're new to pandas, you might want to first read through :ref:`10 Minutes to pandas<10min>` to familiarize yourself with the library."
msgstr ""

#: ../../source/getting_started/comparison/includes/introduction.rst:4
msgid "As is customary, we import pandas and NumPy as follows:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:15
msgid "Data structures"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:18
msgid "General terminology translation"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "pandas"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "Stata"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
#: ../../source/getting_started/comparison/comparison_with_stata.rst:32
msgid "``DataFrame``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "data set"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "column"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "variable"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "row"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "observation"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "groupby"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "bysort"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "``NaN``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:1
msgid "``.``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:34
msgid "A ``DataFrame`` in pandas is analogous to a Stata data set -- a two-dimensional data source with labeled columns that can be of different types. As will be shown in this document, almost any operation that can be applied to a data set in Stata can also be accomplished in pandas."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:40
msgid "``Series``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:42
msgid "A ``Series`` is the data structure that represents one column of a ``DataFrame``. Stata doesn't have a separate data structure for a single column, but in general, working with a ``Series`` is analogous to referencing a column of a data set in Stata."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:48
msgid "``Index``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:50
msgid "Every ``DataFrame`` and ``Series`` has an ``Index`` -- labels on the *rows* of the data. Stata does not have an exactly analogous concept. In Stata, a data set's rows are essentially unlabeled, other than an implicit integer index that can be accessed with ``_n``."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:55
msgid "In pandas, if no index is specified, an integer index is also used by default (first row = 0, second row = 1, and so on). While using a labeled ``Index`` or ``MultiIndex`` can enable sophisticated analyses and is ultimately an important part of pandas to understand, for this comparison we will essentially ignore the ``Index`` and just treat the ``DataFrame`` as a collection of columns. Please see the :ref:`indexing documentation<indexing>` for much more on how to use an ``Index`` effectively."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:65
msgid "Copies vs. in place operations"
msgstr ""

#: ../../source/getting_started/comparison/includes/copies.rst:1
msgid "Most pandas operations return copies of the ``Series``/``DataFrame``. To make the changes \"stick\", you'll need to either assign to a new variable:"
msgstr ""

#: ../../source/getting_started/comparison/includes/copies.rst:9
msgid "or overwrite the original one:"
msgstr ""

#: ../../source/getting_started/comparison/includes/copies.rst:17
msgid "You will see an ``inplace=True`` or ``copy=False`` keyword argument available for some methods:"
msgstr ""

#: ../../source/getting_started/comparison/includes/copies.rst:24
msgid "There is an active discussion about deprecating and removing ``inplace`` and ``copy`` for most methods (e.g. ``dropna``) except for a very small subset of methods (including ``replace``). Both keywords won't be necessary anymore in the context of Copy-on-Write. The proposal can be found `here <https://github.com/pandas-dev/pandas/pull/51466>`_."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:71
msgid "Data input / output"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:74
msgid "Constructing a DataFrame from values"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:76
msgid "A Stata data set can be built from specified values by placing the data after an ``input`` statement and specifying the column names."
msgstr ""

#: ../../source/getting_started/comparison/includes/construct_dataframe.rst:1
msgid "A pandas ``DataFrame`` can be constructed in many different ways, but for a small number of values, it is often convenient to specify it as a Python dictionary, where the keys are the column names and the values are the data."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:91
msgid "Reading external data"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:93
msgid "Like Stata, pandas provides utilities for reading in data from many formats.  The ``tips`` data set, found within the pandas tests (`csv <https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/tips.csv>`_) will be used in many of the following examples."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:98
msgid "Stata provides ``import delimited`` to read csv data into a data set in memory. If the ``tips.csv`` file is in the current working directory, we can import it as follows."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:105
msgid "The pandas method is :func:`read_csv`, which works similarly. Additionally, it will automatically download the data set if presented with a url."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:117
msgid "Like ``import delimited``, :func:`read_csv` can take a number of parameters to specify how the data should be parsed.  For example, if the data were instead tab delimited, did not have column names, and existed in the current working directory, the pandas command would be:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:129
msgid "pandas can also read Stata data sets in ``.dta`` format with the :func:`read_stata` function."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:135
msgid "In addition to text/csv and Stata files, pandas supports a variety of other data formats such as Excel, SAS, HDF5, Parquet, and SQL databases.  These are all read via a ``pd.read_*`` function.  See the :ref:`IO documentation<io>` for more details."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:141
msgid "Limiting output"
msgstr ""

#: ../../source/getting_started/comparison/includes/limit.rst:1
msgid "By default, pandas will truncate output of large ``DataFrame``\\s to show the first and last rows. This can be overridden by :ref:`changing the pandas options <options>`, or using :meth:`DataFrame.head` or :meth:`DataFrame.tail`."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:145
msgid "The equivalent in Stata would be:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:153
msgid "Exporting data"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:155
msgid "The inverse of ``import delimited`` in Stata is ``export delimited``"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:161
msgid "Similarly in pandas, the opposite of ``read_csv`` is :meth:`DataFrame.to_csv`."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:167
msgid "pandas can also export to Stata file format with the :meth:`DataFrame.to_stata` method."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:175
msgid "Data operations"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:178
msgid "Operations on columns"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:180
msgid "In Stata, arbitrary math expressions can be used with the ``generate`` and ``replace`` commands on new or existing columns. The ``drop`` command drops the column from the data set."
msgstr ""

#: ../../source/getting_started/comparison/includes/column_operations.rst:1
msgid "pandas provides vectorized operations by specifying the individual ``Series`` in the ``DataFrame``. New columns can be assigned in the same way. The :meth:`DataFrame.drop` method drops a column from the ``DataFrame``."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:194
msgid "Filtering"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:196
msgid "Filtering in Stata is done with an ``if`` clause on one or more columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/filtering.rst:1
msgid "DataFrames can be filtered in multiple ways; the most intuitive of which is using :ref:`boolean indexing <indexing.boolean>`."
msgstr ""

#: ../../source/getting_started/comparison/includes/filtering.rst:8
msgid "The above statement is simply passing a ``Series`` of ``True``/``False`` objects to the DataFrame, returning all rows with ``True``."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:205
msgid "If/then logic"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:207
msgid "In Stata, an ``if`` clause can also be used to create new columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/if_then.rst:1
msgid "The same operation in pandas can be accomplished using the ``where`` method from ``numpy``."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:217
msgid "Date functionality"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:219
msgid "Stata provides a variety of functions to do operations on date/datetime columns."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:237
msgid "The equivalent pandas operations are shown below.  In addition to these functions, pandas supports other Time Series features not available in Stata (such as time zone handling and custom offsets) -- see the :ref:`timeseries documentation<timeseries>` for more details."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:245
msgid "Selection of columns"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:247
msgid "Stata provides keywords to select, drop, and rename columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/column_selection.rst:1
msgid "The same operations are expressed in pandas below."
msgstr ""

#: ../../source/getting_started/comparison/includes/column_selection.rst:4
msgid "Keep certain columns"
msgstr ""

#: ../../source/getting_started/comparison/includes/column_selection.rst:11
msgid "Drop a column"
msgstr ""

#: ../../source/getting_started/comparison/includes/column_selection.rst:18
msgid "Rename a column"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:261
msgid "Sorting by values"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:263
msgid "Sorting in Stata is accomplished via ``sort``"
msgstr ""

#: ../../source/getting_started/comparison/includes/sorting.rst:1
msgid "pandas has a :meth:`DataFrame.sort_values` method, which takes a list of columns to sort by."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:272
msgid "String processing"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:275
msgid "Finding length of string"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:277
msgid "Stata determines the length of a character string with the :func:`strlen` and :func:`ustrlen` functions for ASCII and Unicode strings, respectively."
msgstr ""

#: ../../source/getting_started/comparison/includes/length.rst:1
msgid "You can find the length of a character string with :meth:`Series.str.len`. In Python 3, all strings are Unicode strings. ``len`` includes trailing blanks. Use ``len`` and ``rstrip`` to exclude trailing blanks."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:289
msgid "Finding position of substring"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:291
msgid "Stata determines the position of a character in a string with the :func:`strpos` function. This takes the string defined by the first argument and searches for the first position of the substring you supply as the second argument."
msgstr ""

#: ../../source/getting_started/comparison/includes/find_substring.rst:1
msgid "You can find the position of a character in a column of strings with the :meth:`Series.str.find` method. ``find`` searches for the first position of the substring. If the substring is found, the method returns its position. If not found, it returns ``-1``. Keep in mind that Python indexes are zero-based."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:303
msgid "Extracting substring by position"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:305
msgid "Stata extracts a substring from a string based on its position with the :func:`substr` function."
msgstr ""

#: ../../source/getting_started/comparison/includes/extract_substring.rst:1
msgid "With pandas you can use ``[]`` notation to extract a substring from a string by position locations. Keep in mind that Python indexes are zero-based."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:315
msgid "Extracting nth word"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:317
msgid "The Stata :func:`word` function returns the nth word from a string. The first argument is the string you want to parse and the second argument specifies which word you want to extract."
msgstr ""

#: ../../source/getting_started/comparison/includes/nth_word.rst:1
msgid "The simplest way to extract words in pandas is to split the strings by spaces, then reference the word by index. Note there are more powerful approaches should you need them."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:336
msgid "Changing case"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:338
msgid "The Stata :func:`strupper`, :func:`strlower`, :func:`strproper`, :func:`ustrupper`, :func:`ustrlower`, and :func:`ustrtitle` functions change the case of ASCII and Unicode strings, respectively."
msgstr ""

#: ../../source/getting_started/comparison/includes/case.rst:1
msgid "The equivalent pandas methods are :meth:`Series.str.upper`, :meth:`Series.str.lower`, and :meth:`Series.str.title`."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:359
msgid "Merging"
msgstr ""

#: ../../source/getting_started/comparison/includes/merge_setup.rst:1
msgid "The following tables will be used in the merge examples:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:363
msgid "In Stata, to perform a merge, one data set must be in memory and the other must be referenced as a file name on disk. In contrast, Python must have both ``DataFrames`` already in memory."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:367
msgid "By default, Stata performs an outer join, where all observations from both data sets are left in memory after the merge. One can keep only observations from the initial data set, the merged data set, or the intersection of the two by using the values created in the ``_merge`` variable."
msgstr ""

#: ../../source/getting_started/comparison/includes/merge.rst:1
msgid "pandas DataFrames have a :meth:`~DataFrame.merge` method, which provides similar functionality. The data does not have to be sorted ahead of time, and different join types are accomplished via the ``how`` keyword."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:420
msgid "Missing data"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:422
msgid "Both pandas and Stata have a representation for missing data."
msgstr ""

#: ../../source/getting_started/comparison/includes/missing_intro.rst:1
msgid "pandas represents missing data with the special float value ``NaN`` (not a number).  Many of the semantics are the same; for example missing data propagates through numeric operations, and is ignored by default for aggregations."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:426
msgid "One difference is that missing data cannot be compared to its sentinel value. For example, in Stata you could do this to filter missing values."
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:1
msgid "In pandas, :meth:`Series.isna` and :meth:`Series.notna` can be used to filter the rows."
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:8
msgid "pandas provides :ref:`a variety of methods to work with missing data <missing_data>`. Here are some examples:"
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:11
msgid "Drop rows with missing values"
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:18
msgid "Forward fill from previous rows"
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:25
msgid "Replace missing values with a specified value"
msgstr ""

#: ../../source/getting_started/comparison/includes/missing.rst:27
msgid "Using the mean:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:440
msgid "GroupBy"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:443
msgid "Aggregation"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:445
msgid "Stata's ``collapse`` can be used to group by one or more key variables and compute aggregations on numeric columns."
msgstr ""

#: ../../source/getting_started/comparison/includes/groupby.rst:1
msgid "pandas provides a flexible ``groupby`` mechanism that allows similar aggregations. See the :ref:`groupby documentation<groupby>` for more details and examples."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:457
msgid "Transformation"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:459
msgid "In Stata, if the group aggregations need to be used with the original data set, one would usually use ``bysort`` with :func:`egen`. For example, to subtract the mean for each observation by smoker group."
msgstr ""

#: ../../source/getting_started/comparison/includes/transform.rst:1
msgid "pandas provides a :ref:`groupby.transform` mechanism that allows these type of operations to be succinctly expressed in one operation."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:472
msgid "By group processing"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:474
msgid "In addition to aggregation, pandas ``groupby`` can be used to replicate most other ``bysort`` processing from Stata. For example, the following example lists the first observation in the current sort order by sex/smoker group."
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:483
msgid "In pandas this would be written as:"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:491
msgid "Other considerations"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:494
msgid "Disk vs memory"
msgstr ""

#: ../../source/getting_started/comparison/comparison_with_stata.rst:496
msgid "pandas and Stata both operate exclusively in memory. This means that the size of data able to be loaded in pandas is limited by your machine's memory. If out of core processing is needed, one possibility is the `dask.dataframe <https://docs.dask.org/en/latest/dataframe.html>`_ library, which provides a subset of pandas functionality for an on-disk ``DataFrame``."
msgstr ""
