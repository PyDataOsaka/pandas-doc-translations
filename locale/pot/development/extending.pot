# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/development/extending.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/development/extending.rst:7
msgid "Extending pandas"
msgstr ""

#: ../../source/development/extending.rst:9
msgid "While pandas provides a rich set of methods, containers, and data types, your needs may not be fully satisfied. pandas offers a few options for extending pandas."
msgstr ""

#: ../../source/development/extending.rst:16
msgid "Registering custom accessors"
msgstr ""

#: ../../source/development/extending.rst:18
msgid "Libraries can use the decorators :func:`pandas.api.extensions.register_dataframe_accessor`, :func:`pandas.api.extensions.register_series_accessor`, and :func:`pandas.api.extensions.register_index_accessor`, to add additional \"namespaces\" to pandas objects. All of these follow a similar convention: you decorate a class, providing the name of attribute to add. The class's ``__init__`` method gets the object being decorated. For example:"
msgstr ""

#: ../../source/development/extending.rst:51
msgid "Now users can access your methods using the ``geo`` namespace:"
msgstr ""

#: ../../source/development/extending.rst:61
msgid "This can be a convenient way to extend pandas objects without subclassing them. If you write a custom accessor, make a pull request adding it to our `ecosystem <https://pandas.pydata.org/community/ecosystem.html>`_ page."
msgstr ""

#: ../../source/development/extending.rst:65
msgid "We highly recommend validating the data in your accessor's ``__init__``. In our ``GeoAccessor``, we validate that the data contains the expected columns, raising an ``AttributeError`` when the validation fails. For a ``Series`` accessor, you should validate the ``dtype`` if the accessor applies only to certain dtypes."
msgstr ""

#: ../../source/development/extending.rst:75
msgid "Extension types"
msgstr ""

#: ../../source/development/extending.rst:79
msgid "The :class:`pandas.api.extensions.ExtensionDtype` and :class:`pandas.api.extensions.ExtensionArray` APIs were experimental prior to pandas 1.5. Starting with version 1.5, future changes will follow the :ref:`pandas deprecation policy <policies.version>`."
msgstr ""

#: ../../source/development/extending.rst:83
msgid "pandas defines an interface for implementing data types and arrays that *extend* NumPy's type system. pandas itself uses the extension system for some types that aren't built into NumPy (categorical, period, interval, datetime with timezone)."
msgstr ""

#: ../../source/development/extending.rst:88
msgid "Libraries can define a custom array and data type. When pandas encounters these objects, they will be handled properly (i.e. not converted to an ndarray of objects). Many methods like :func:`pandas.isna` will dispatch to the extension type's implementation."
msgstr ""

#: ../../source/development/extending.rst:93
msgid "If you're building a library that implements the interface, please publicize it on `the ecosystem page <https://pandas.pydata.org/community/ecosystem.html>`_."
msgstr ""

#: ../../source/development/extending.rst:96
msgid "The interface consists of two classes."
msgstr ""

#: ../../source/development/extending.rst:99
msgid ":class:`~pandas.api.extensions.ExtensionDtype`"
msgstr ""

#: ../../source/development/extending.rst:101
msgid "A :class:`pandas.api.extensions.ExtensionDtype` is similar to a ``numpy.dtype`` object. It describes the data type. Implementors are responsible for a few unique items like the name."
msgstr ""

#: ../../source/development/extending.rst:104
msgid "One particularly important item is the ``type`` property. This should be the class that is the scalar type for your data. For example, if you were writing an extension array for IP Address data, this might be ``ipaddress.IPv4Address``."
msgstr ""

#: ../../source/development/extending.rst:108
msgid "See the `extension dtype source`_ for interface definition."
msgstr ""

#: ../../source/development/extending.rst:110
msgid ":class:`pandas.api.extensions.ExtensionDtype` can be registered to pandas to allow creation via a string dtype name. This allows one to instantiate ``Series`` and ``.astype()`` with a registered string name, for example ``'category'`` is a registered string accessor for the ``CategoricalDtype``."
msgstr ""

#: ../../source/development/extending.rst:114
msgid "See the `extension dtype dtypes`_ for more on how to register dtypes."
msgstr ""

#: ../../source/development/extending.rst:117
msgid ":class:`~pandas.api.extensions.ExtensionArray`"
msgstr ""

#: ../../source/development/extending.rst:119
msgid "This class provides all the array-like functionality. ExtensionArrays are limited to 1 dimension. An ExtensionArray is linked to an ExtensionDtype via the ``dtype`` attribute."
msgstr ""

#: ../../source/development/extending.rst:123
msgid "pandas makes no restrictions on how an extension array is created via its ``__new__`` or ``__init__``, and puts no restrictions on how you store your data. We do require that your array be convertible to a NumPy array, even if this is relatively expensive (as it is for ``Categorical``)."
msgstr ""

#: ../../source/development/extending.rst:128
msgid "They may be backed by none, one, or many NumPy arrays. For example, :class:`pandas.Categorical` is an extension array backed by two arrays, one for codes and one for categories. An array of IPv6 addresses may be backed by a NumPy structured array with two fields, one for the lower 64 bits and one for the upper 64 bits. Or they may be backed by some other storage type, like Python lists."
msgstr ""

#: ../../source/development/extending.rst:135
msgid "See the `extension array source`_ for the interface definition. The docstrings and comments contain guidance for properly implementing the interface."
msgstr ""

#: ../../source/development/extending.rst:141
msgid ":class:`~pandas.api.extensions.ExtensionArray` operator support"
msgstr ""

#: ../../source/development/extending.rst:143
msgid "By default, there are no operators defined for the class :class:`~pandas.api.extensions.ExtensionArray`. There are two approaches for providing operator support for your ExtensionArray:"
msgstr ""

#: ../../source/development/extending.rst:146
msgid "Define each of the operators on your ``ExtensionArray`` subclass."
msgstr ""

#: ../../source/development/extending.rst:147
msgid "Use an operator implementation from pandas that depends on operators that are already defined on the underlying elements (scalars) of the ExtensionArray."
msgstr ""

#: ../../source/development/extending.rst:152
msgid "Regardless of the approach, you may want to set ``__array_priority__`` if you want your implementation to be called when involved in binary operations with NumPy arrays."
msgstr ""

#: ../../source/development/extending.rst:156
msgid "For the first approach, you define selected operators, e.g., ``__add__``, ``__le__``, etc. that you want your ``ExtensionArray`` subclass to support."
msgstr ""

#: ../../source/development/extending.rst:159
msgid "The second approach assumes that the underlying elements (i.e., scalar type) of the ``ExtensionArray`` have the individual operators already defined.  In other words, if your ``ExtensionArray`` named ``MyExtensionArray`` is implemented so that each element is an instance of the class ``MyExtensionElement``, then if the operators are defined for ``MyExtensionElement``, the second approach will automatically define the operators for ``MyExtensionArray``."
msgstr ""

#: ../../source/development/extending.rst:166
msgid "A mixin class, :class:`~pandas.api.extensions.ExtensionScalarOpsMixin` supports this second approach.  If developing an ``ExtensionArray`` subclass, for example ``MyExtensionArray``, can simply include ``ExtensionScalarOpsMixin`` as a parent class of ``MyExtensionArray``, and then call the methods :meth:`~MyExtensionArray._add_arithmetic_ops` and/or :meth:`~MyExtensionArray._add_comparison_ops` to hook the operators into your ``MyExtensionArray`` class, as follows:"
msgstr ""

#: ../../source/development/extending.rst:188
msgid "Since ``pandas`` automatically calls the underlying operator on each element one-by-one, this might not be as performant as implementing your own version of the associated operators directly on the ``ExtensionArray``."
msgstr ""

#: ../../source/development/extending.rst:192
msgid "For arithmetic operations, this implementation will try to reconstruct a new ``ExtensionArray`` with the result of the element-wise operation. Whether or not that succeeds depends on whether the operation returns a result that's valid for the ``ExtensionArray``. If an ``ExtensionArray`` cannot be reconstructed, an ndarray containing the scalars returned instead."
msgstr ""

#: ../../source/development/extending.rst:198
msgid "For ease of implementation and consistency with operations between pandas and NumPy ndarrays, we recommend *not* handling Series and Indexes in your binary ops. Instead, you should detect these cases and return ``NotImplemented``. When pandas encounters an operation like ``op(Series, ExtensionArray)``, pandas will"
msgstr ""

#: ../../source/development/extending.rst:204
msgid "unbox the array from the ``Series`` (``Series.array``)"
msgstr ""

#: ../../source/development/extending.rst:205
msgid "call ``result = op(values, ExtensionArray)``"
msgstr ""

#: ../../source/development/extending.rst:206
msgid "re-box the result in a ``Series``"
msgstr ""

#: ../../source/development/extending.rst:211
msgid "NumPy universal functions"
msgstr ""

#: ../../source/development/extending.rst:213
msgid ":class:`Series` implements ``__array_ufunc__``. As part of the implementation, pandas unboxes the ``ExtensionArray`` from the :class:`Series`, applies the ufunc, and re-boxes it if necessary."
msgstr ""

#: ../../source/development/extending.rst:217
msgid "If applicable, we highly recommend that you implement ``__array_ufunc__`` in your extension array to avoid coercion to an ndarray. See `the NumPy documentation <https://numpy.org/doc/stable/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html>`__ for an example."
msgstr ""

#: ../../source/development/extending.rst:222
msgid "As part of your implementation, we require that you defer to pandas when a pandas container (:class:`Series`, :class:`DataFrame`, :class:`Index`) is detected in ``inputs``. If any of those is present, you should return ``NotImplemented``. pandas will take care of unboxing the array from the container and re-calling the ufunc with the unwrapped input."
msgstr ""

#: ../../source/development/extending.rst:230
msgid "Testing extension arrays"
msgstr ""

#: ../../source/development/extending.rst:232
msgid "We provide a test suite for ensuring that your extension arrays satisfy the expected behavior. To use the test suite, you must provide several pytest fixtures and inherit from the base test class. The required fixtures are found in https://github.com/pandas-dev/pandas/blob/main/pandas/tests/extension/conftest.py."
msgstr ""

#: ../../source/development/extending.rst:237
msgid "To use a test, subclass it:"
msgstr ""

#: ../../source/development/extending.rst:248
msgid "See https://github.com/pandas-dev/pandas/blob/main/pandas/tests/extension/base/__init__.py for a list of all the tests available."
msgstr ""

#: ../../source/development/extending.rst:254
msgid "Compatibility with Apache Arrow"
msgstr ""

#: ../../source/development/extending.rst:256
msgid "An ``ExtensionArray`` can support conversion to / from ``pyarrow`` arrays (and thus support for example serialization to the Parquet file format) by implementing two methods: ``ExtensionArray.__arrow_array__`` and ``ExtensionDtype.__from_arrow__``."
msgstr ""

#: ../../source/development/extending.rst:261
msgid "The ``ExtensionArray.__arrow_array__`` ensures that ``pyarrow`` knowns how to convert the specific extension array into a ``pyarrow.Array`` (also when included as a column in a pandas DataFrame):"
msgstr ""

#: ../../source/development/extending.rst:276
msgid "The ``ExtensionDtype.__from_arrow__`` method then controls the conversion back from pyarrow to a pandas ExtensionArray. This method receives a pyarrow ``Array`` or ``ChunkedArray`` as only argument and is expected to return the appropriate pandas ``ExtensionArray`` for this dtype and the passed values:"
msgstr ""

#: ../../source/development/extending.rst:289
msgid "See more in the `Arrow documentation <https://arrow.apache.org/docs/python/extending_types.html>`__."
msgstr ""

#: ../../source/development/extending.rst:291
msgid "Those methods have been implemented for the nullable integer and string extension dtypes included in pandas, and ensure roundtrip to pyarrow and the Parquet file format."
msgstr ""

#: ../../source/development/extending.rst:301
msgid "Subclassing pandas data structures"
msgstr ""

#: ../../source/development/extending.rst:303
msgid "There are some easier alternatives before considering subclassing ``pandas`` data structures."
msgstr ""

#: ../../source/development/extending.rst:305
msgid "Extensible method chains with :ref:`pipe <basics.pipe>`"
msgstr ""

#: ../../source/development/extending.rst:307
msgid "Use *composition*. See `here <https://en.wikipedia.org/wiki/Composition_over_inheritance>`_."
msgstr ""

#: ../../source/development/extending.rst:309
msgid "Extending by :ref:`registering an accessor <extending.register-accessors>`"
msgstr ""

#: ../../source/development/extending.rst:311
msgid "Extending by :ref:`extension type <extending.extension-types>`"
msgstr ""

#: ../../source/development/extending.rst:313
msgid "This section describes how to subclass ``pandas`` data structures to meet more specific needs. There are two points that need attention:"
msgstr ""

#: ../../source/development/extending.rst:315
msgid "Override constructor properties."
msgstr ""

#: ../../source/development/extending.rst:316
#: ../../source/development/extending.rst:399
msgid "Define original properties"
msgstr ""

#: ../../source/development/extending.rst:320
msgid "You can find a nice example in `geopandas <https://github.com/geopandas/geopandas>`_ project."
msgstr ""

#: ../../source/development/extending.rst:323
msgid "Override constructor properties"
msgstr ""

#: ../../source/development/extending.rst:325
msgid "Each data structure has several *constructor properties* for returning a new data structure as the result of an operation. By overriding these properties, you can retain subclasses through ``pandas`` data manipulations."
msgstr ""

#: ../../source/development/extending.rst:329
msgid "There are 3 possible constructor properties to be defined on a subclass:"
msgstr ""

#: ../../source/development/extending.rst:331
msgid "``DataFrame/Series._constructor``: Used when a manipulation result has the same dimension as the original."
msgstr ""

#: ../../source/development/extending.rst:332
msgid "``DataFrame._constructor_sliced``: Used when a ``DataFrame`` (sub-)class manipulation result should be a ``Series`` (sub-)class."
msgstr ""

#: ../../source/development/extending.rst:333
msgid "``Series._constructor_expanddim``: Used when a ``Series`` (sub-)class manipulation result should be a ``DataFrame`` (sub-)class, e.g. ``Series.to_frame()``."
msgstr ""

#: ../../source/development/extending.rst:335
msgid "Below example shows how to define ``SubclassedSeries`` and ``SubclassedDataFrame`` overriding constructor properties."
msgstr ""

#: ../../source/development/extending.rst:401
msgid "To let original data structures have additional properties, you should let ``pandas`` know what properties are added. ``pandas`` maps unknown properties to data names overriding ``__getattribute__``. Defining original properties can be done in one of 2 ways:"
msgstr ""

#: ../../source/development/extending.rst:403
msgid "Define ``_internal_names`` and ``_internal_names_set`` for temporary properties which WILL NOT be passed to manipulation results."
msgstr ""

#: ../../source/development/extending.rst:404
msgid "Define ``_metadata`` for normal properties which will be passed to manipulation results."
msgstr ""

#: ../../source/development/extending.rst:406
msgid "Below is an example to define two original properties, \"internal_cache\" as a temporary property and \"added_property\" as a normal property"
msgstr ""

#: ../../source/development/extending.rst:451
msgid "Plotting backends"
msgstr ""

#: ../../source/development/extending.rst:453
msgid "pandas can be extended with third-party plotting backends. The main idea is letting users select a plotting backend different than the provided one based on Matplotlib. For example:"
msgstr ""

#: ../../source/development/extending.rst:462
msgid "This would be more or less equivalent to:"
msgstr ""

#: ../../source/development/extending.rst:469
msgid "The backend module can then use other visualization tools (Bokeh, Altair,...) to generate the plots."
msgstr ""

#: ../../source/development/extending.rst:472
msgid "Libraries implementing the plotting backend should use `entry points <https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`__ to make their backend discoverable to pandas. The key is ``\"pandas_plotting_backends\"``. For example, pandas registers the default \"matplotlib\" backend as follows."
msgstr ""

#: ../../source/development/extending.rst:489
msgid "More information on how to implement a third-party plotting backend can be found at https://github.com/pandas-dev/pandas/blob/main/pandas/plotting/__init__.py#L1."
msgstr ""

#: ../../source/development/extending.rst:495
msgid "Arithmetic with 3rd party types"
msgstr ""

#: ../../source/development/extending.rst:497
msgid "In order to control how arithmetic works between a custom type and a pandas type, implement ``__pandas_priority__``.  Similar to numpy's ``__array_priority__`` semantics, arithmetic methods on :class:`DataFrame`, :class:`Series`, and :class:`Index` objects will delegate to ``other``, if it has an attribute ``__pandas_priority__`` with a higher value."
msgstr ""

#: ../../source/development/extending.rst:502
msgid "By default, pandas objects try to operate with other objects, even if they are not types known to pandas:"
msgstr ""

#: ../../source/development/extending.rst:511
msgid "In the example above, if ``[10, 20]`` was a custom type that can be understood as a list, pandas objects will still operate with it in the same way."
msgstr ""

#: ../../source/development/extending.rst:513
msgid "In some cases, it is useful to delegate to the other type the operation. For example, consider I implement a custom list object, and I want the result of adding my custom list with a pandas :class:`Series` to be an instance of my list and not a :class:`Series` as seen in the previous example. This is now possible by defining the ``__pandas_priority__`` attribute of my custom list, and setting it to a higher value, than the priority of the pandas objects I want to operate with."
msgstr ""

#: ../../source/development/extending.rst:518
msgid "The ``__pandas_priority__`` of :class:`DataFrame`, :class:`Series`, and :class:`Index` are ``4000``, ``3000``, and ``2000`` respectively.  The base ``ExtensionArray.__pandas_priority__`` is ``1000``."
msgstr ""
