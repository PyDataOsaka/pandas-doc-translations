# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/development/debugging_extensions.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/development/debugging_extensions.rst:7
msgid "Debugging C extensions"
msgstr ""

#: ../../source/development/debugging_extensions.rst:9
msgid "Pandas uses Cython and C/C++ `extension modules <https://docs.python.org/3/extending/extending.html>`_ to optimize performance. Unfortunately, the standard Python debugger does not allow you to step into these extensions. Cython extensions can be debugged with the `Cython debugger <https://docs.cython.org/en/latest/src/userguide/debugging.html>`_ and C/C++ extensions can be debugged using the tools shipped with your platform's compiler."
msgstr ""

#: ../../source/development/debugging_extensions.rst:11
msgid "For Python developers with limited or no C/C++ experience this can seem a daunting task. Core developer Will Ayd has written a 3 part blog series to help guide you from the standard Python debugger into these other tools:"
msgstr ""

#: ../../source/development/debugging_extensions.rst:13
msgid "`Fundamental Python Debugging Part 1 - Python <https://willayd.com/fundamental-python-debugging-part-1-python.html>`_"
msgstr ""

#: ../../source/development/debugging_extensions.rst:14
msgid "`Fundamental Python Debugging Part 2 - Python Extensions <https://willayd.com/fundamental-python-debugging-part-2-python-extensions.html>`_"
msgstr ""

#: ../../source/development/debugging_extensions.rst:15
msgid "`Fundamental Python Debugging Part 3 - Cython Extensions <https://willayd.com/fundamental-python-debugging-part-3-cython-extensions.html>`_"
msgstr ""

#: ../../source/development/debugging_extensions.rst:18
msgid "Generating debug builds"
msgstr ""

#: ../../source/development/debugging_extensions.rst:20
msgid "By default building pandas from source will generate a release build. To generate a development build you can type::"
msgstr ""

#: ../../source/development/debugging_extensions.rst:24
msgid "By specifying ``builddir=\"debug\"`` all of the targets will be built and placed in the debug directory relative to the project root. This helps to keep your debug and release artifacts separate; you are of course able to choose a different directory name or omit altogether if you do not care to separate build types."
msgstr ""

#: ../../source/development/debugging_extensions.rst:27
msgid "Editor support"
msgstr ""

#: ../../source/development/debugging_extensions.rst:29
msgid "The meson build system generates a `compilation database <https://clang.llvm.org/docs/JSONCompilationDatabase.html>`_ automatically and places it in the build directory. Many language servers and IDEs can use this information to provide code-completion, go-to-defintion and error checking support as you type."
msgstr ""

#: ../../source/development/debugging_extensions.rst:31
msgid "How each language server / IDE chooses to look for the compilation database may vary. When in doubt you may want to create a symlink at the root of the project that points to the compilation database in your build directory. Assuming you used *debug* as your directory name, you can run::"
msgstr ""
