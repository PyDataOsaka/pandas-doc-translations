# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023
# This file is distributed under the same license as the pandas package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandas 2.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-12 17:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/development/contributing_codebase.rst:3
msgid "{{ header }}"
msgstr ""

#: ../../source/development/contributing_codebase.rst:7
msgid "Contributing to the code base"
msgstr ""

#: ../../source/development/contributing_codebase.rst:10
msgid "Table of Contents:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:13
msgid "Code standards"
msgstr ""

#: ../../source/development/contributing_codebase.rst:15
msgid "Writing good code is not just about what you write. It is also about *how* you write it. During :ref:`Continuous Integration <contributing.ci>` testing, several tools will be run to check your code for stylistic errors. Generating any warnings will cause the test to fail. Thus, good style is a requirement for submitting code to pandas."
msgstr ""

#: ../../source/development/contributing_codebase.rst:21
msgid "There are a couple of tools in pandas to help contributors verify their changes before contributing to the project"
msgstr ""

#: ../../source/development/contributing_codebase.rst:24
msgid "``./ci/code_checks.sh``: a script validates the doctests, formatting in docstrings, and imported modules. It is possible to run the checks independently by using the parameters ``docstrings``, ``code``, and ``doctests`` (e.g. ``./ci/code_checks.sh doctests``);"
msgstr ""

#: ../../source/development/contributing_codebase.rst:28
msgid "``pre-commit``, which we go into detail on in the next section."
msgstr ""

#: ../../source/development/contributing_codebase.rst:30
msgid "In addition, because a lot of people use our library, it is important that we do not make sudden changes to the code that could have the potential to break a lot of user code as a result, that is, we need it to be as *backwards compatible* as possible to avoid mass breakages."
msgstr ""

#: ../../source/development/contributing_codebase.rst:38
msgid "Pre-commit"
msgstr ""

#: ../../source/development/contributing_codebase.rst:40
msgid "Additionally, :ref:`Continuous Integration <contributing.ci>` will run code formatting checks like ``black``, ``ruff``, ``isort``, and ``cpplint`` and more using `pre-commit hooks <https://pre-commit.com/>`_. Any warnings from these checks will cause the :ref:`Continuous Integration <contributing.ci>` to fail; therefore, it is helpful to run the check yourself before submitting code. This can be done by installing ``pre-commit`` (which should already have happened if you followed the instructions in :ref:`Setting up your development environment <contributing_environment>`) and then running::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:50
msgid "from the root of the pandas repository. Now all of the styling checks will be run each time you commit changes without your needing to run each one manually. In addition, using ``pre-commit`` will also allow you to more easily remain up-to-date with our code checks as they change."
msgstr ""

#: ../../source/development/contributing_codebase.rst:55
msgid "Note that if needed, you can skip these checks with ``git commit --no-verify``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:57
msgid "If you don't want to use ``pre-commit`` as part of your workflow, you can still use it to run its checks with one of the following::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:63
msgid "without needing to have done ``pre-commit install`` beforehand."
msgstr ""

#: ../../source/development/contributing_codebase.rst:65
msgid "Finally, we also have some slow pre-commit checks, which don't run on each commit but which do run during continuous integration. You can trigger them manually with::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:72
msgid "You may want to periodically run ``pre-commit gc``, to clean up repos which are no longer used."
msgstr ""

#: ../../source/development/contributing_codebase.rst:77
msgid "If you have conflicting installations of ``virtualenv``, then you may get an error - see `here <https://github.com/pypa/virtualenv/issues/1875>`_."
msgstr ""

#: ../../source/development/contributing_codebase.rst:80
msgid "Also, due to a `bug in virtualenv <https://github.com/pypa/virtualenv/issues/1986>`_, you may run into issues if you're using conda. To solve this, you can downgrade ``virtualenv`` to version ``20.0.33``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:86
msgid "If you have recently merged in main from the upstream branch, some of the dependencies used by ``pre-commit`` may have changed.  Make sure to :ref:`update your development environment <contributing.update-dev>`."
msgstr ""

#: ../../source/development/contributing_codebase.rst:91
msgid "Optional dependencies"
msgstr ""

#: ../../source/development/contributing_codebase.rst:93
msgid "Optional dependencies (e.g. matplotlib) should be imported with the private helper ``pandas.compat._optional.import_optional_dependency``. This ensures a consistent error message when the dependency is not met."
msgstr ""

#: ../../source/development/contributing_codebase.rst:97
msgid "All methods using an optional dependency should include a test asserting that an ``ImportError`` is raised when the optional dependency is not found. This test should be skipped if the library is present."
msgstr ""

#: ../../source/development/contributing_codebase.rst:101
msgid "All optional dependencies should be documented in :ref:`install.optional_dependencies` and the minimum required version should be set in the ``pandas.compat._optional.VERSIONS`` dict."
msgstr ""

#: ../../source/development/contributing_codebase.rst:106
msgid "Backwards compatibility"
msgstr ""

#: ../../source/development/contributing_codebase.rst:108
msgid "Please try to maintain backward compatibility. pandas has lots of users with lots of existing code, so don't break it if at all possible.  If you think breakage is required, clearly state why as part of the pull request.  Also, be careful when changing method signatures and add deprecation warnings where needed. Also, add the deprecated sphinx directive to the deprecated functions or methods."
msgstr ""

#: ../../source/development/contributing_codebase.rst:114
msgid "If a function with the same arguments as the one being deprecated exist, you can use the ``pandas.util._decorators.deprecate``:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:123
msgid "Otherwise, you need to do it manually:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:148
msgid "You'll also need to"
msgstr ""

#: ../../source/development/contributing_codebase.rst:150
msgid "Write a new test that asserts a warning is issued when calling with the deprecated argument"
msgstr ""

#: ../../source/development/contributing_codebase.rst:151
msgid "Update all of pandas existing tests and code to use the new argument"
msgstr ""

#: ../../source/development/contributing_codebase.rst:153
msgid "See :ref:`contributing.warnings` for more."
msgstr ""

#: ../../source/development/contributing_codebase.rst:158
msgid "Type hints"
msgstr ""

#: ../../source/development/contributing_codebase.rst:160
msgid "pandas strongly encourages the use of :pep:`484` style type hints. New development should contain type hints and pull requests to annotate existing code are accepted as well!"
msgstr ""

#: ../../source/development/contributing_codebase.rst:163
msgid "Style guidelines"
msgstr ""

#: ../../source/development/contributing_codebase.rst:165
msgid "Type imports should follow the ``from typing import ...`` convention. Your code may be automatically re-written to use some modern constructs (e.g. using the built-in ``list`` instead of ``typing.List``) by the :ref:`pre-commit checks <contributing.pre-commit>`."
msgstr ""

#: ../../source/development/contributing_codebase.rst:169
msgid "In some cases in the code base classes may define class variables that shadow builtins. This causes an issue as described in `Mypy 1775 <https://github.com/python/mypy/issues/1775#issuecomment-310969854>`_. The defensive solution here is to create an unambiguous alias of the builtin and use that without your annotation. For example, if you come across a definition like"
msgstr ""

#: ../../source/development/contributing_codebase.rst:176
msgid "The appropriate way to annotate this would be as follows"
msgstr ""

#: ../../source/development/contributing_codebase.rst:185
msgid "In some cases you may be tempted to use ``cast`` from the typing module when you know better than the analyzer. This occurs particularly when using custom inference functions. For example"
msgstr ""

#: ../../source/development/contributing_codebase.rst:201
msgid "The limitation here is that while a human can reasonably understand that ``is_number`` would catch the ``int`` and ``float`` types mypy cannot make that same inference just yet (see `mypy #5206 <https://github.com/python/mypy/issues/5206>`_. While the above works, the use of ``cast`` is **strongly discouraged**. Where applicable a refactor of the code to appease static analysis is preferable"
msgstr ""

#: ../../source/development/contributing_codebase.rst:212
msgid "With custom types and inference this is not always possible so exceptions are made, but every effort should be exhausted to avoid ``cast`` before going down such paths."
msgstr ""

#: ../../source/development/contributing_codebase.rst:215
msgid "pandas-specific types"
msgstr ""

#: ../../source/development/contributing_codebase.rst:217
msgid "Commonly used types specific to pandas will appear in `pandas._typing <https://github.com/pandas-dev/pandas/blob/main/pandas/_typing.py>`_ and you should use these where applicable. This module is private for now but ultimately this should be exposed to third party libraries who want to implement type checking against pandas."
msgstr ""

#: ../../source/development/contributing_codebase.rst:219
msgid "For example, quite a few functions in pandas accept a ``dtype`` argument. This can be expressed as a string like ``\"object\"``, a ``numpy.dtype`` like ``np.int64`` or even a pandas ``ExtensionDtype`` like ``pd.CategoricalDtype``. Rather than burden the user with having to constantly annotate all of those options, this can simply be imported and reused from the pandas._typing module"
msgstr ""

#: ../../source/development/contributing_codebase.rst:228
msgid "This module will ultimately house types for repeatedly used concepts like \"path-like\", \"array-like\", \"numeric\", etc... and can also hold aliases for commonly appearing parameters like ``axis``. Development of this module is active so be sure to refer to the source for the most up to date list of available types."
msgstr ""

#: ../../source/development/contributing_codebase.rst:231
msgid "Validating type hints"
msgstr ""

#: ../../source/development/contributing_codebase.rst:233
msgid "pandas uses `mypy <http://mypy-lang.org>`_ and `pyright <https://github.com/microsoft/pyright>`_ to statically analyze the code base and type hints. After making any change you can ensure your type hints are consistent by running"
msgstr ""

#: ../../source/development/contributing_codebase.rst:243
msgid "in your python environment."
msgstr ""

#: ../../source/development/contributing_codebase.rst:247
msgid "Please be aware that the above commands will use the current python environment. If your python packages are older/newer than those installed by the pandas CI, the above commands might fail. This is often the case when the ``mypy`` or ``numpy`` versions do not match. Please see :ref:`how to setup the python environment <contributing.mamba>` or select a `recently succeeded workflow <https://github.com/pandas-dev/pandas/actions/workflows/code-checks.yml?query=branch%3Amain+is%3Asuccess>`_, select the \"Docstring validation, typing, and other manual pre-commit hooks\" job, then click on \"Set up Conda\" and \"Environment info\" to see which versions the pandas CI installs."
msgstr ""

#: ../../source/development/contributing_codebase.rst:252
msgid "Testing type hints in code using pandas"
msgstr ""

#: ../../source/development/contributing_codebase.rst:256
msgid "Pandas is not yet a py.typed library (:pep:`561`)! The primary purpose of locally declaring pandas as a py.typed library is to test and improve the pandas-builtin type annotations."
msgstr ""

#: ../../source/development/contributing_codebase.rst:260
msgid "Until pandas becomes a py.typed library, it is possible to easily experiment with the type annotations shipped with pandas by creating an empty file named \"py.typed\" in the pandas installation folder:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:268
msgid "The existence of the py.typed file signals to type checkers that pandas is already a py.typed library. This makes type checkers aware of the type annotations shipped with pandas."
msgstr ""

#: ../../source/development/contributing_codebase.rst:272
msgid "Testing with continuous integration"
msgstr ""

#: ../../source/development/contributing_codebase.rst:274
msgid "The pandas test suite will run automatically on `GitHub Actions <https://github.com/features/actions/>`__ continuous integration services, once your pull request is submitted. However, if you wish to run the test suite on a branch prior to submitting the pull request, then the continuous integration services need to be hooked to your GitHub repository. Instructions are here for `GitHub Actions <https://docs.github.com/en/actions/>`__."
msgstr ""

#: ../../source/development/contributing_codebase.rst:280
msgid "A pull-request will be considered for merging when you have an all 'green' build. If any tests are failing, then you will get a red 'X', where you can click through to see the individual failed tests. This is an example of a green build."
msgstr ""

#: ../../source/development/contributing_codebase.rst:290
msgid "Test-driven development"
msgstr ""

#: ../../source/development/contributing_codebase.rst:292
msgid "pandas is serious about testing and strongly encourages contributors to embrace `test-driven development (TDD) <https://en.wikipedia.org/wiki/Test-driven_development>`_. This development process \"relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test.\" So, before actually writing any code, you should write your tests.  Often the test can be taken from the original GitHub issue.  However, it is always worth considering additional use cases and writing corresponding tests."
msgstr ""

#: ../../source/development/contributing_codebase.rst:301
msgid "Adding tests is one of the most common requests after code is pushed to pandas.  Therefore, it is worth getting in the habit of writing tests ahead of time so this is never an issue."
msgstr ""

#: ../../source/development/contributing_codebase.rst:305
msgid "Writing tests"
msgstr ""

#: ../../source/development/contributing_codebase.rst:307
msgid "All tests should go into the ``tests`` subdirectory of the specific package. This folder contains many current examples of tests, and we suggest looking to these for inspiration."
msgstr ""

#: ../../source/development/contributing_codebase.rst:311
msgid "As a general tip, you can use the search functionality in your integrated development environment (IDE) or the git grep command in a terminal to find test files in which the method is called. If you are unsure of the best location to put your test, take your best guess, but note that reviewers may request that you move the test to a different location."
msgstr ""

#: ../../source/development/contributing_codebase.rst:316
msgid "To use git grep, you can run the following command in a terminal:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:318
msgid "``git grep \"function_name(\"``"
msgstr ""

#: ../../source/development/contributing_codebase.rst:320
msgid "This will search through all files in your repository for the text ``function_name(``. This can be a useful way to quickly locate the function in the codebase and determine the best location to add a test for it."
msgstr ""

#: ../../source/development/contributing_codebase.rst:324
msgid "Ideally, there should be one, and only one, obvious place for a test to reside. Until we reach that ideal, these are some rules of thumb for where a test should be located."
msgstr ""

#: ../../source/development/contributing_codebase.rst:328
msgid "Does your test depend only on code in ``pd._libs.tslibs``? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:331
msgid "tests.tslibs"
msgstr ""

#: ../../source/development/contributing_codebase.rst:335
msgid "No file in ``tests.tslibs`` should import from any pandas modules outside of ``pd._libs.tslibs``"
msgstr ""

#: ../../source/development/contributing_codebase.rst:338
msgid "tests.scalar"
msgstr ""

#: ../../source/development/contributing_codebase.rst:339
msgid "tests.tseries.offsets"
msgstr ""

#: ../../source/development/contributing_codebase.rst:341
msgid "Does your test depend only on code in pd._libs? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:344
msgid "tests.libs"
msgstr ""

#: ../../source/development/contributing_codebase.rst:345
msgid "tests.groupby.test_libgroupby"
msgstr ""

#: ../../source/development/contributing_codebase.rst:347
msgid "Is your test for an arithmetic or comparison method? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:350
msgid "tests.arithmetic"
msgstr ""

#: ../../source/development/contributing_codebase.rst:354
msgid "These are intended for tests that can be shared to test the behavior of DataFrame/Series/Index/ExtensionArray using the ``box_with_array`` fixture."
msgstr ""

#: ../../source/development/contributing_codebase.rst:358
msgid "tests.frame.test_arithmetic"
msgstr ""

#: ../../source/development/contributing_codebase.rst:359
msgid "tests.series.test_arithmetic"
msgstr ""

#: ../../source/development/contributing_codebase.rst:361
msgid "Is your test for a reduction method (min, max, sum, prod, ...)? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:364
msgid "tests.reductions"
msgstr ""

#: ../../source/development/contributing_codebase.rst:368
msgid "These are intended for tests that can be shared to test the behavior of DataFrame/Series/Index/ExtensionArray."
msgstr ""

#: ../../source/development/contributing_codebase.rst:371
msgid "tests.frame.test_reductions"
msgstr ""

#: ../../source/development/contributing_codebase.rst:372
msgid "tests.series.test_reductions"
msgstr ""

#: ../../source/development/contributing_codebase.rst:373
msgid "tests.test_nanops"
msgstr ""

#: ../../source/development/contributing_codebase.rst:375
msgid "Is your test for an indexing method? This is the most difficult case for deciding where a test belongs, because there are many of these tests, and many of them test more than one method (e.g. both ``Series.__getitem__`` and ``Series.loc.__getitem__``)"
msgstr ""

#: ../../source/development/contributing_codebase.rst:380
msgid "Is the test specifically testing an Index method (e.g. ``Index.get_loc``, ``Index.get_indexer``)? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:384
msgid "tests.indexes.test_indexing"
msgstr ""

#: ../../source/development/contributing_codebase.rst:385
msgid "tests.indexes.fooindex.test_indexing"
msgstr ""

#: ../../source/development/contributing_codebase.rst:387
msgid "Within that files there should be a method-specific test class e.g. ``TestGetLoc``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:390
msgid "In most cases, neither ``Series`` nor ``DataFrame`` objects should be needed in these tests."
msgstr ""

#: ../../source/development/contributing_codebase.rst:393
msgid "Is the test for a Series or DataFrame indexing method *other* than ``__getitem__`` or ``__setitem__``, e.g. ``xs``, ``where``, ``take``, ``mask``, ``lookup``, or ``insert``? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:398
msgid "tests.frame.indexing.test_methodname"
msgstr ""

#: ../../source/development/contributing_codebase.rst:399
msgid "tests.series.indexing.test_methodname"
msgstr ""

#: ../../source/development/contributing_codebase.rst:401
msgid "Is the test for any of ``loc``, ``iloc``, ``at``, or ``iat``? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:404
msgid "tests.indexing.test_loc"
msgstr ""

#: ../../source/development/contributing_codebase.rst:405
msgid "tests.indexing.test_iloc"
msgstr ""

#: ../../source/development/contributing_codebase.rst:406
msgid "tests.indexing.test_at"
msgstr ""

#: ../../source/development/contributing_codebase.rst:407
msgid "tests.indexing.test_iat"
msgstr ""

#: ../../source/development/contributing_codebase.rst:409
msgid "Within the appropriate file, test classes correspond to either types of indexers (e.g. ``TestLocBooleanMask``) or major use cases (e.g. ``TestLocSetitemWithExpansion``)."
msgstr ""

#: ../../source/development/contributing_codebase.rst:413
msgid "See the note in section D) about tests that test multiple indexing methods."
msgstr ""

#: ../../source/development/contributing_codebase.rst:415
msgid "Is the test for ``Series.__getitem__``, ``Series.__setitem__``, ``DataFrame.__getitem__``, or ``DataFrame.__setitem__``? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:419
msgid "tests.series.test_getitem"
msgstr ""

#: ../../source/development/contributing_codebase.rst:420
msgid "tests.series.test_setitem"
msgstr ""

#: ../../source/development/contributing_codebase.rst:421
msgid "tests.frame.test_getitem"
msgstr ""

#: ../../source/development/contributing_codebase.rst:422
msgid "tests.frame.test_setitem"
msgstr ""

#: ../../source/development/contributing_codebase.rst:424
msgid "If many cases such a test may test multiple similar methods, e.g."
msgstr ""

#: ../../source/development/contributing_codebase.rst:441
msgid "In cases like this, the test location should be based on the *underlying* method being tested.  Or in the case of a test for a bugfix, the location of the actual bug.  So in this example, we know that ``Series.__getitem__`` calls ``Series.loc.__getitem__``, so this is *really* a test for ``loc.__getitem__``.  So this test belongs in ``tests.indexing.test_loc``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:447
msgid "Is your test for a DataFrame or Series method?"
msgstr ""

#: ../../source/development/contributing_codebase.rst:449
msgid "Is the method a plotting method? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:452
msgid "tests.plotting"
msgstr ""

#: ../../source/development/contributing_codebase.rst:454
msgid "Is the method an IO method? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:457
msgid "tests.io"
msgstr ""

#: ../../source/development/contributing_codebase.rst:459
msgid "Otherwise This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:462
msgid "tests.series.methods.test_mymethod"
msgstr ""

#: ../../source/development/contributing_codebase.rst:463
msgid "tests.frame.methods.test_mymethod"
msgstr ""

#: ../../source/development/contributing_codebase.rst:467
msgid "If a test can be shared between DataFrame/Series using the ``frame_or_series`` fixture, by convention it goes in the ``tests.frame`` file."
msgstr ""

#: ../../source/development/contributing_codebase.rst:471
msgid "Is your test for an Index method, not depending on Series/DataFrame? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:474
msgid "tests.indexes"
msgstr ""

#: ../../source/development/contributing_codebase.rst:476
msgid "Is your test for one of the pandas-provided ExtensionArrays (``Categorical``, ``DatetimeArray``, ``TimedeltaArray``, ``PeriodArray``, ``IntervalArray``, ``NumpyExtensionArray``, ``FloatArray``, ``BoolArray``, ``StringArray``)? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:481
msgid "tests.arrays"
msgstr ""

#: ../../source/development/contributing_codebase.rst:483
msgid "Is your test for *all* ExtensionArray subclasses (the \"EA Interface\")? This test likely belongs in one of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:486
msgid "tests.extension"
msgstr ""

#: ../../source/development/contributing_codebase.rst:489
msgid "Using ``pytest``"
msgstr ""

#: ../../source/development/contributing_codebase.rst:492
msgid "Test structure"
msgstr ""

#: ../../source/development/contributing_codebase.rst:494
msgid "pandas existing test structure is *mostly* class-based, meaning that you will typically find tests wrapped in a class."
msgstr ""

#: ../../source/development/contributing_codebase.rst:502
msgid "We prefer a more *functional* style using the `pytest <https://docs.pytest.org/en/latest/>`__ framework, which offers a richer testing framework that will facilitate testing and developing. Thus, instead of writing test classes, we will write test functions like this:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:511
msgid "Preferred ``pytest`` idioms"
msgstr ""

#: ../../source/development/contributing_codebase.rst:513
msgid "Functional tests named ``def test_*`` and *only* take arguments that are either fixtures or parameters."
msgstr ""

#: ../../source/development/contributing_codebase.rst:514
msgid "Use a bare ``assert`` for testing scalars and truth-testing"
msgstr ""

#: ../../source/development/contributing_codebase.rst:515
msgid "Use ``tm.assert_series_equal(result, expected)`` and ``tm.assert_frame_equal(result, expected)`` for comparing :class:`Series` and :class:`DataFrame` results respectively."
msgstr ""

#: ../../source/development/contributing_codebase.rst:516
msgid "Use `@pytest.mark.parameterize <https://docs.pytest.org/en/latest/how-to/parametrize.html>`__ when testing multiple cases."
msgstr ""

#: ../../source/development/contributing_codebase.rst:517
msgid "Use `pytest.mark.xfail <https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail>`__ when a test case is expected to fail."
msgstr ""

#: ../../source/development/contributing_codebase.rst:518
msgid "Use `pytest.mark.skip <https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip>`__ when a test case is never expected to pass."
msgstr ""

#: ../../source/development/contributing_codebase.rst:519
msgid "Use `pytest.param <https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param>`__ when a test case needs a particular mark."
msgstr ""

#: ../../source/development/contributing_codebase.rst:520
msgid "Use `@pytest.fixture <https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture>`__ if multiple tests can share a setup object."
msgstr ""

#: ../../source/development/contributing_codebase.rst:524
msgid "Do not use ``pytest.xfail`` (which is different than ``pytest.mark.xfail``) since it immediately stops the test and does not check if the test will fail. If this is the behavior you desire, use ``pytest.skip`` instead."
msgstr ""

#: ../../source/development/contributing_codebase.rst:527
msgid "If a test is known to fail but the manner in which it fails is not meant to be captured, use ``pytest.mark.xfail`` It is common to use this method for a test that exhibits buggy behavior or a non-implemented feature. If the failing test has flaky behavior, use the argument ``strict=False``. This will make it so pytest does not fail if the test happens to pass."
msgstr ""

#: ../../source/development/contributing_codebase.rst:533
msgid "Prefer the decorator ``@pytest.mark.xfail`` and the argument ``pytest.param`` over usage within a test so that the test is appropriately marked during the collection phase of pytest. For xfailing a test that involves multiple parameters, a fixture, or a combination of these, it is only possible to xfail during the testing phase. To do so, use the ``request`` fixture:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:545
msgid "xfail is not to be used for tests involving failure due to invalid user arguments. For these tests, we need to verify the correct exception type and error message is being raised, using ``pytest.raises`` instead."
msgstr ""

#: ../../source/development/contributing_codebase.rst:552
msgid "Testing a warning"
msgstr ""

#: ../../source/development/contributing_codebase.rst:554
msgid "Use ``tm.assert_produces_warning`` as a context manager to check that a block of code raises a warning."
msgstr ""

#: ../../source/development/contributing_codebase.rst:561
msgid "If a warning should specifically not happen in a block of code, pass ``False`` into the context manager."
msgstr ""

#: ../../source/development/contributing_codebase.rst:568
msgid "If you have a test that would emit a warning, but you aren't actually testing the warning itself (say because it's going to be removed in the future, or because we're matching a 3rd-party library's behavior), then use ``pytest.mark.filterwarnings`` to ignore the error."
msgstr ""

#: ../../source/development/contributing_codebase.rst:580
msgid "Testing an exception"
msgstr ""

#: ../../source/development/contributing_codebase.rst:582
msgid "Use `pytest.raises <https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises>`_ as a context manager with the specific exception subclass (i.e. never use :py:class:`Exception`) and the exception message in ``match``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:591
msgid "Testing involving files"
msgstr ""

#: ../../source/development/contributing_codebase.rst:593
msgid "The ``tm.ensure_clean`` context manager creates a temporary file for testing, with a generated filename (or your filename if provided), that is automatically deleted when the context block is exited."
msgstr ""

#: ../../source/development/contributing_codebase.rst:603
msgid "Testing involving network connectivity"
msgstr ""

#: ../../source/development/contributing_codebase.rst:605
msgid "A unit test should not access a public data set over the internet due to flakiness of network connections and lack of ownership of the server that is being connected to. To mock this interaction, use the ``httpserver`` fixture from the `pytest-localserver plugin. <https://github.com/pytest-dev/pytest-localserver>`_ with synthetic data."
msgstr ""

#: ../../source/development/contributing_codebase.rst:618
msgid "Example"
msgstr ""

#: ../../source/development/contributing_codebase.rst:620
msgid "Here is an example of a self-contained set of tests in a file ``pandas/tests/test_cool_feature.py`` that illustrate multiple features that we like to use. Please remember to add the GitHub Issue Number as a comment to a new test."
msgstr ""

#: ../../source/development/contributing_codebase.rst:663
msgid "A test run of this yields"
msgstr ""

#: ../../source/development/contributing_codebase.rst:684
msgid "Tests that we have ``parametrized`` are now accessible via the test name, for example we could run these with ``-k int8`` to sub-select *only* those tests which match ``int8``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:701
msgid "Using ``hypothesis``"
msgstr ""

#: ../../source/development/contributing_codebase.rst:703
msgid "Hypothesis is a library for property-based testing. Instead of explicitly parametrizing a test, you can describe *all* valid inputs and let Hypothesis try to find a failing input.  Even better, no matter how many random examples it tries, Hypothesis always reports a single minimal counterexample to your assertions - often an example that you would never have thought to test."
msgstr ""

#: ../../source/development/contributing_codebase.rst:709
msgid "See `Getting Started with Hypothesis <https://hypothesis.works/articles/getting-started-with-hypothesis/>`_ for more of an introduction, then `refer to the Hypothesis documentation for details <https://hypothesis.readthedocs.io/en/latest/index.html>`_."
msgstr ""

#: ../../source/development/contributing_codebase.rst:729
msgid "This test shows off several useful features of Hypothesis, as well as demonstrating a good use-case: checking properties that should hold over a large or complicated domain of inputs."
msgstr ""

#: ../../source/development/contributing_codebase.rst:733
msgid "To keep the pandas test suite running quickly, parametrized tests are preferred if the inputs or logic are simple, with Hypothesis tests reserved for cases with complex logic or where there are too many combinations of options or subtle interactions to test (or think of!) all of them."
msgstr ""

#: ../../source/development/contributing_codebase.rst:741
msgid "Running the test suite"
msgstr ""

#: ../../source/development/contributing_codebase.rst:743
msgid "The tests can then be run directly inside your Git clone (without having to install pandas) by typing::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:750
msgid "If a handful of tests don't pass, it may not be an issue with your pandas installation. Some tests (e.g. some SQLAlchemy ones) require additional setup, others might start failing because a non-pinned library released a new version, and others might be flaky if run in parallel. As long as you can import pandas from your locally built version, your installation is probably fine and you can start contributing!"
msgstr ""

#: ../../source/development/contributing_codebase.rst:756
msgid "Often it is worth running only a subset of tests first around your changes before running the entire suite (tip: you can use the [pandas-coverage app](https://pandas-coverage-12d2130077bc.herokuapp.com/)) to find out which tests hit the lines of code you've modified, and then run only those)."
msgstr ""

#: ../../source/development/contributing_codebase.rst:760
msgid "The easiest way to do this is with::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:764
msgid "Or with one of the following constructs::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:770
msgid "Using `pytest-xdist <https://pypi.org/project/pytest-xdist>`_, which is included in our 'pandas-dev' environment, one can speed up local testing on multicore machines. The ``-n`` number flag then can be specified when running pytest to parallelize a test run across the number of specified cores or auto to utilize all the available cores on your machine."
msgstr ""

#: ../../source/development/contributing_codebase.rst:784
msgid "If you'd like to speed things along further a more advanced use of this command would look like this"
msgstr ""

#: ../../source/development/contributing_codebase.rst:791
msgid "In addition to the multithreaded performance increase this improves test speed by skipping some tests using the ``-m`` mark flag:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:794
msgid "slow: any test taking long (think seconds rather than milliseconds)"
msgstr ""

#: ../../source/development/contributing_codebase.rst:795
msgid "network: tests requiring network connectivity"
msgstr ""

#: ../../source/development/contributing_codebase.rst:796
msgid "db: tests requiring a database (mysql or postgres)"
msgstr ""

#: ../../source/development/contributing_codebase.rst:797
msgid "single_cpu: tests that should run on a single cpu only"
msgstr ""

#: ../../source/development/contributing_codebase.rst:799
msgid "You might want to enable the following option if it's relevant for you:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:801
msgid "arm_slow: any test taking long on arm64 architecture"
msgstr ""

#: ../../source/development/contributing_codebase.rst:803
msgid "These markers are defined `in this toml file <https://github.com/pandas-dev/pandas/blob/main/pyproject.toml>`_ , under ``[tool.pytest.ini_options]`` in a list called ``markers``, in case you want to check if new ones have been created which are of interest to you."
msgstr ""

#: ../../source/development/contributing_codebase.rst:807
msgid "The ``-r`` report flag will display a short summary info (see `pytest documentation <https://docs.pytest.org/en/4.6.x/usage.html#detailed-summary-report>`_) . Here we are displaying the number of:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:811
msgid "s: skipped tests"
msgstr ""

#: ../../source/development/contributing_codebase.rst:812
msgid "x: xfailed tests"
msgstr ""

#: ../../source/development/contributing_codebase.rst:813
msgid "X: xpassed tests"
msgstr ""

#: ../../source/development/contributing_codebase.rst:815
msgid "The summary is optional and can be removed if you don't need the added information. Using the parallelization option can significantly reduce the time it takes to locally run tests before submitting a pull request."
msgstr ""

#: ../../source/development/contributing_codebase.rst:819
msgid "If you require assistance with the results, which has happened in the past, please set a seed before running the command and opening a bug report, that way we can reproduce it. Here's an example for setting a seed on windows"
msgstr ""

#: ../../source/development/contributing_codebase.rst:829
msgid "On Unix use"
msgstr ""

#: ../../source/development/contributing_codebase.rst:836
msgid "For more, see the `pytest <https://docs.pytest.org/en/latest/>`_ documentation."
msgstr ""

#: ../../source/development/contributing_codebase.rst:838
msgid "Furthermore one can run"
msgstr ""

#: ../../source/development/contributing_codebase.rst:844
msgid "with an imported pandas to run tests similarly."
msgstr ""

#: ../../source/development/contributing_codebase.rst:847
msgid "Running the performance test suite"
msgstr ""

#: ../../source/development/contributing_codebase.rst:849
msgid "Performance matters and it is worth considering whether your code has introduced performance regressions. pandas is in the process of migrating to `asv benchmarks <https://github.com/airspeed-velocity/asv>`__ to enable easy monitoring of the performance of critical pandas operations. These benchmarks are all found in the ``pandas/asv_bench`` directory, and the test results can be found `here <https://asv-runner.github.io/asv-collection/pandas>`__."
msgstr ""

#: ../../source/development/contributing_codebase.rst:856
msgid "To use all features of asv, you will need either ``conda`` or ``virtualenv``. For more details please check the `asv installation webpage <https://asv.readthedocs.io/en/latest/installing.html>`_."
msgstr ""

#: ../../source/development/contributing_codebase.rst:860
msgid "To install asv::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:864
msgid "If you need to run a benchmark, change your directory to ``asv_bench/`` and run::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:868
msgid "You can replace ``HEAD`` with the name of the branch you are working on, and report benchmarks that changed by more than 10%. The command uses ``conda`` by default for creating the benchmark environments. If you want to use virtualenv instead, write::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:875
msgid "The ``-E virtualenv`` option should be added to all ``asv`` commands that run benchmarks. The default value is defined in ``asv.conf.json``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:878
msgid "Running the full benchmark suite can be an all-day process, depending on your hardware and its resource utilization. However, usually it is sufficient to paste only a subset of the results into the pull request to show that the committed changes do not cause unexpected performance regressions.  You can run specific benchmarks using the ``-b`` flag, which takes a regular expression. For example, this will only run benchmarks from a ``pandas/asv_bench/benchmarks/groupby.py`` file::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:887
msgid "If you want to only run a specific group of benchmarks from a file, you can do it using ``.`` as a separator. For example::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:892
msgid "will only run the ``GroupByMethods`` benchmark defined in ``groupby.py``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:894
msgid "You can also run the benchmark suite using the version of ``pandas`` already installed in your current Python environment. This can be useful if you do not have virtualenv or conda, or are using the ``setup.py develop`` approach discussed above; for the in-place build you need to set ``PYTHONPATH``, e.g. ``PYTHONPATH=\"$PWD/..\" asv [remaining arguments]``. You can run benchmarks using an existing Python environment by::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:905
msgid "or, to use a specific Python interpreter,::"
msgstr ""

#: ../../source/development/contributing_codebase.rst:909
msgid "This will display stderr from the benchmarks, and use your local ``python`` that comes from your ``$PATH``."
msgstr ""

#: ../../source/development/contributing_codebase.rst:912
msgid "Information on how to write a benchmark and how to use asv can be found in the `asv documentation <https://asv.readthedocs.io/en/latest/writing_benchmarks.html>`_."
msgstr ""

#: ../../source/development/contributing_codebase.rst:916
msgid "Documenting your code"
msgstr ""

#: ../../source/development/contributing_codebase.rst:918
msgid "Changes should be reflected in the release notes located in ``doc/source/whatsnew/vx.y.z.rst``. This file contains an ongoing change log for each release.  Add an entry to this file to document your fix, enhancement or (unavoidable) breaking change.  Make sure to include the GitHub issue number when adding your entry (using ``:issue:`1234``` where ``1234`` is the issue/pull request number). Your entry should be written using full sentences and proper grammar."
msgstr ""

#: ../../source/development/contributing_codebase.rst:925
msgid "When mentioning parts of the API, use a Sphinx ``:func:``, ``:meth:``, or ``:class:`` directive as appropriate. Not all public API functions and methods have a documentation page; ideally links would only be added if they resolve. You can usually find similar examples by checking the release notes for one of the previous versions."
msgstr ""

#: ../../source/development/contributing_codebase.rst:931
msgid "If your code is a bugfix, add your entry to the relevant bugfix section. Avoid adding to the ``Other`` section; only in rare cases should entries go there. Being as concise as possible, the description of the bug should include how the user may encounter it and an indication of the bug itself, e.g. \"produces incorrect results\" or \"incorrectly raises\". It may be necessary to also indicate the new behavior."
msgstr ""

#: ../../source/development/contributing_codebase.rst:938
msgid "If your code is an enhancement, it is most likely necessary to add usage examples to the existing documentation.  This can be done following the section regarding :ref:`documentation <contributing_documentation>`. Further, to let users know when this feature was added, the ``versionadded`` directive is used. The sphinx syntax for that is:"
msgstr ""

#: ../../source/development/contributing_codebase.rst:948
msgid "This will put the text *New in version 2.1.0* wherever you put the sphinx directive. This should also be put in the docstring when adding a new function or method (`example <https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/frame.py#L1495>`__) or a new keyword argument (`example <https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/generic.py#L568>`__)."
msgstr ""
